/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <cstrike>
#include <hamsandwich>
#include <fakemeta>
#include < engine >
#include <fun>

#define FD_TIME 60
#define FREEZE_TIME 45
#define DAY_TASK 101
#define FD_TASK 102
#define INFO_TASK 103
#define tINFO_TASK 104
#define FREEZE_TASK 105
#define VOTE_TASK 106
#define TASK_INVISIBLE 4012
#define SHAKE_Task 4013
#define VoteDays_Task 4014


#define dViewer 7
#define TAG "eTs"
#define Chat_TAG "eTs"
#define s_IP "31.168.169.42:40800"

#define Year_Expired 2018
#define Month_Expired 1

native create_user_box(index)
native get_user_xp(index)
native set_user_xp(index,xp)
native get_user_gangid(index)
native set_user_gang_colormodel(index)
native get_user_gang_glow_r(index)
native get_user_gang_glow_g(index)
native get_user_gang_glow_b(index)
native start_random_song()
native start_random_winningsound()
native make_user_dance(index)
native is_user_premium(index)
native set_user_model(index)
native get_votect_run()
native get_votemaps_run()
native get_user_showinfo(index)

new g_mSound[ ] = "weapons/g_bounce1.wav";

enum _:  d_Days
{
	FreeDay, // 3,5,9,11,13,14,15
	SharkDay,
	KnifeDay,
	BoxDay,
	WarDay,
	tWarDay,
	GrenadeDay,
	SniperDay,
	ScoutDay,
	tSniperDay,
	NightClawerDay,
	DodgeBallDay,
	ZombieDay,
	DeaglePowerDay,
	ShotGunPowerDay
	//LASERDAY
}
new sz_Days[d_Days][] =
{
	"Free Day",
	"Shark Day",
	"Knife Day",
	"Box Day",
	"War Day",
	"Terrorists War Day",
	"Grenade Day",
	"Sniper Day",
	"Scout Day",
	"Terrorists Sniper Day",
	"NightClawer Day",
	"DodgeBall Day",
	"Zombie Day",
	"Deagle Power Day",
	"ShotGun Power Day"
	//"Laser Day"
}
new sz_DayViewer[dViewer][] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Specialday"}

new bool:d_Run,cdDay,s_Days,Day_Timer,iHudMessage,p_LR,gTouched[33],tBalls[33],Round,MaxPlayers,m_iTrail,bool:v_Run,bool:Voted[33],CountVote,TotalVotes,Votes[4],v_Days[4];

new g_iLaserSprite,bool:g_bVisible[33];
new Float:g_flWallOrigin[ 33 ][ 3 ];

new const g_szLaserSprite[ ] = "sprites/zbeam4.spr";



new szLocation [] = "eTs/JailBreak"
new szZombie [] = "eTs_Zombie"
new v_szZombie [] = "v_knife.mdl"
new v_szDodgeball[] = "v_dodgeball.mdl"
new p_szDodgeball[] = "p_dodgeball.mdl"
new w_szDodgeball[] = "w_dodgeball.mdl"

new TheMap[ 35 ];

//Winner beam
new SpriteIndex,Float:Until;

// JB SHIT
new ShowInfo[33];


new const Models [2][2][] =
{
	{"models/player/eTs_CT/eTs_CT.mdl","eTs_CT"},
	{"models/player/leet/leet.mdl","leet"}
}
// END JB SHIT

new gLeds[6];

public plugin_init() {
	new Year[6],Month[3],year,month,serverIP[20];
	format_time(Year,charsmax(Year),"%Y",get_systime())
	format_time(Month,charsmax(Month),"%m",get_systime())
	year = str_to_num(Year);
	month = str_to_num(Month);
	get_user_ip(0,serverIP,charsmax(serverIP),0);
	if((year > Year_Expired || (year == Year_Expired && month >= Month_Expired)) || (!equali(s_IP,serverIP)))
		set_fail_state("Mod Time has been expired or Your Server IP is not allowed");
	register_plugin("Days Menu","1.0","MJ")
	
	register_clcmd("say /days","DaysMenu");
	register_clcmd("say /votedays","start_VoteDays")
	register_clcmd("say /fd","StartFD")
	register_clcmd("say /infmsg","InfoMsg"); // JB SHIT
	
	iHudMessage=CreateHudSyncObj();
	
	register_event("DeathMsg","PlayerKilled","a"); 
	register_event("HLTV","Round_Start","a", "1=0", "2=0");
	register_logevent("Round_End",2,"1=Round_End");
	register_event("CurWeapon","evCurWeapon","be","1=1");
	
	register_forward(FM_SetModel, "fwdSetModel");
	RegisterHam(Ham_Touch,"grenade","Ham_Touch_Grenade_Pre",1);
	RegisterHam( Ham_Touch, "armoury_entity", "FwdHamPlayerPickup" ); 
	RegisterHam( Ham_Touch, "weaponbox", "FwdHamPlayerPickup" );
	RegisterHam( Ham_Use , "func_button" , "Fwd_UseButton")
	register_think("grenade", "think_grenade");
	RegisterHam(Ham_TakeDamage,"player","TakeDamage",1);
	
	register_clcmd("drop","BlockDrop");
	
	MaxPlayers = get_maxplayers();
	
	register_forward( FM_EmitSound, "FwdEmitSound", 0 );
	get_mapname(TheMap,charsmax(TheMap));
	register_forward( FM_Touch, "Forward_Touch_Pre", 0 );
	register_forward( FM_PlayerPreThink, "Forward_PlayerPreThink" );
	register_forward( FM_AddToFullPack, "Forward_AddToFullPack_Post", 1 );

}
public plugin_natives()
{
	register_native("get_run_day","_get_run_day");
	register_native("get_run_fd","_get_run_fd");
	register_native("get_run_vote","_get_run_vote");
	register_native("get_trun_day","_get_trun_day");
	register_native("set_user_model","_set_user_model"); // jb shit
	register_native("get_user_showinfo","_get_user_showinfo"); // jb shit
}

public _get_run_fd(plugin,param)
	return (d_Run && s_Days == FreeDay) ? 1 : 0;

public _get_run_day(plugin,param)
	return (d_Run && s_Days != FreeDay) ? 1 : 0;
	
public _get_run_vote(plugin,param)
	return v_Run;
	
public _get_trun_day(plugin,param)
{
	new TerrorDays[6] = {BoxDay,tWarDay,tSniperDay,DodgeBallDay,DeaglePowerDay,ShotGunPowerDay};
	for(new i; i < sizeof TerrorDays; i ++)
		if (d_Run && s_Days == TerrorDays[i])
			return true;
		else
			continue;
	return false;
}

public plugin_precache() {
	
	new temp[ 100 ];
	formatex( temp, charsmax( temp ), "models/%s/days_lr/Dodgeball/%s", szLocation,v_szDodgeball);
	precache_model(temp)
	formatex( temp, charsmax( temp ), "models/%s/days_lr/Dodgeball/%s", szLocation,p_szDodgeball);
	precache_model(temp)
	formatex( temp, charsmax( temp ), "models/%s/days_lr/Dodgeball/%s", szLocation,w_szDodgeball);
	precache_model(temp)
	formatex( temp, charsmax( temp ), "models/player/%s/%s.mdl",szZombie,szZombie);
	precache_model(temp)
	formatex( temp, charsmax( temp ), "models/%s/days_lr/Zombieday/%s",szLocation,v_szZombie);
	precache_model(temp)
	m_iTrail = precache_model("sprites/smoke.spr")
	precache_sound(g_mSound)
	g_iLaserSprite = precache_model( g_szLaserSprite );
	SpriteIndex = precache_model( "sprites/zbeam2.spr" );
	
	gLeds[0] = precache_model("sprites/eTs/bflare.spr");
	gLeds[1] = precache_model("sprites/eTs/gflare.spr");
	gLeds[2] = precache_model("sprites/eTs/rflare.spr");
	gLeds[3] = precache_model("sprites/eTs/aflare.spr");
	gLeds[4] = precache_model("sprites/eTs/oflare.spr");
	gLeds[5] = precache_model("sprites/eTs/pflare.spr");
}

 // JB SHIT
public client_putinserver(id)
{
	ShowInfo[id] = true;
}

public InfoMsg(id)
{
	ShowInfo[id] = !ShowInfo[id];
	return ColorChat(id,"You have ^3%s ^1the information message",ShowInfo[id] ? "enabled" : "disabled");
}

public _set_user_model(plugin,param)
{
	new index = get_param(1);
	SetModel(index)
}
public _get_user_showinfo(plugin,param)
	return ShowInfo[get_param(1)];
	

public SetModel(id)
{
	if(!is_user_alive(id))
		return 1;
	set_user_rendering(id);
	switch(cs_get_user_team(id))
	{
		case CS_TEAM_CT:
			cs_set_user_model(id,Models[0][1]);
		case CS_TEAM_T:
			cs_set_user_model(id,Models[1][1]);
	}
	return 1;
}

// END JB SHIT

public TerrorAlives()
{
	new tnum = 0;
	for(new i=1; i<MaxPlayers; i++)
	{
		if(!is_user_alive(i))
			continue;	
		if(cs_get_user_team(i) != CS_TEAM_T)
			continue;
		tnum ++;
		p_LR = i;
	}
	return tnum;
}

public CTAlives()
{
	new ctnum = 0;
	for(new i=1; i<MaxPlayers; i++)
	{
		if(!is_user_alive(i))
			continue;	
		if(cs_get_user_team(i) != CS_TEAM_CT)
			continue;
		ctnum ++;
	}
	return 100;
}

public start_VoteDays(id)
{
	if(get_votect_run() || get_votemaps_run())
		return ColorChat(id,"^3Another vote ^1is already running");
	if(v_Run)
		return ColorChat(id,"^3Vote Days ^1is already running");
	if(d_Run)
		return ColorChat(id,"^3Day ^1is already running");
	else
	{
		Load_VoteDays()
		start_random_winningsound();
	}
		//start_random_winningsound();
	return 1;
}

public DayViewer()
{	
	set_hudmessage(21, 157, 144, -1.0, 0.65, 2, 6.0, 6.0,_,_,4)
	new pnum,TheTime[20];
	for(new i=1; i< MaxPlayers; i++)
		if(is_user_connected(i)) 
			pnum ++;
	get_time("%X",TheTime,charsmax(TheTime));
	show_hudmessage(0,"[Today: %s]^n[Players: %d/%d]^n[Map: %s]^n[Time: %s]",sz_DayViewer[Round],pnum,MaxPlayers,TheMap,TheTime)
	if(Round==6 && !v_Run)
	{
		set_task(1.0,"Load_VoteDays");
		start_random_winningsound();
	}
}
public StartFD(id)
{
	if((cs_get_user_team(id) == CS_TEAM_CT && is_user_alive(id)) || get_user_flags(id) & ADMIN_BAN)
	{
		if(d_Run || v_Run)
			return;
		s_Days = FreeDay;
		CountDownDay()
	}
	else
		ColorChat(id,"^1You have no ^4access ^1to this command!" );
}
public Load_VoteDays()
{
	if(get_votect_run())
	{
		ColorChat(0,"^3Vote Days ^1will be started in^4 25 seconds^1, another vote running now.");
		set_task(25.0,"Load_VoteDays",VoteDays_Task);
		return;
	}
	if(CTAlives() < 1 || TerrorAlives() < 2)
	{
		ColorChat(0,"^3Vote Days ^1cannot be started without^4 2 Terrorists ^1alive and ^4CT ^1alive." );
		return;
	}
	for(new i =1; i <=MaxPlayers; i++)
	{
		if(!is_user_alive(i))
			continue;
		fm_strip_user_weapons(i)
		if(cs_get_user_team(i) == CS_TEAM_CT)
			set_user_godmode(i,1)
	}
	v_Run = true;
	CountVote=15;
	TotalVotes = 0;
	cdDay=3;
	
	arrayset( Votes, 0, sizeof Votes );
	arrayset( Voted, 0, sizeof Voted );
	
	do
	{
		for(new i; i < 4; i++)
			v_Days[i] = random_num(0,d_Days-1);
	}
	while (v_Days[0] == v_Days[1] || v_Days[0] == v_Days[2] || v_Days[0] == v_Days[3] || v_Days[1] == v_Days[2] || v_Days[1] == v_Days[3] || v_Days[2] == v_Days[3])
	
	for(new i = 1; i <= MaxPlayers; i++)
		if(is_user_connected(i))
		{
			make_user_dance(i);
			CreateShake(i);
		}
	VoteDays()
}

public VoteDays()
{
	new Text[128];
	if (CountVote >= 0 && v_Run)
	{
		for (new i = 1; i <= MaxPlayers; i++) 
		{
			if(!is_user_connected(i)) continue;
			CreateShake(i)
			formatex(Text,127,"\r[ \w%s \r] \wChoose your favorite \ySpecial Day\w:^n^n\y- \dStatus: \r%s\w.^n\y- \dTime Left: \r%i\w.",TAG,Voted[i] ? "Already Voted":"Haven't Voted",CountVote)
			new vMenu = menu_create(Text,"VoteDays_Handler");
			for (new j; j< sizeof(v_Days); j++) 
			{
				new Float:Ahuz = 100.0/TotalVotes*Votes[j];
				formatex(Text,127,"\w%s \r- \d[\r%d \yVotes \w- \r%.2f\w%%\d]",sz_Days[v_Days[j]],Votes[j],Ahuz);
				menu_additem(vMenu,Text);
			}
			menu_display(i,vMenu);
			set_task(0.5,"CreateShake2",i+SHAKE_Task);
			leds(i);
		}
		CountVote --;
		set_task(1.0,"VoteDays",VOTE_TASK)
	}
	if (CountVote < 0)
	{
		show_menu(0, 0, "^n", 1);
		remove_task(VOTE_TASK);
		iWinner();
		s_Days = v_Days[iWinner()];
		ColorChat(0,"^3%s ^1has won!",sz_Days[s_Days]);
		v_Run = false;
		CountDownDay();
	}
	return 1;
}

public CreateShake2(Task)
{
	new id = Task - SHAKE_Task;
	CreateShake(id);
}

public VoteDays_Handler (id,vMenu,Item)
{
	if(Item==MENU_EXIT) return menu_destroy(vMenu)
	else
	{
		if(Voted[id]) return ColorChat(id,"You ^1have ^3already ^1voted");
		Votes[Item] ++;
		Voted[id] = true;
		TotalVotes ++;
		ColorChat(id,"You ^1have voted for ^3%s!",sz_Days[v_Days[Item]]);
	}
	return menu_destroy(vMenu);
}

public iWinner()
{
	new Winner;
	for( new i=0; i<sizeof v_Days; i++ )
	{
		if(Votes[i]>Votes[Winner])
			Winner = i;
	}
	return Winner;
}


public DaysMenu(id)
{
	if(!(get_user_flags(id) & ADMIN_BAN ))
		return ColorChat(id,"You have no ^4access ^3to this ^4command^3!" );
	if(d_Run)
		return ColorChat(id,"You ^1cannot open the ^3Days Menu ^1while day runnig" );
	if(CTAlives() < 1 || TerrorAlives() < 2)
		return ColorChat(id,"^3Days ^1cannot be started without^4 2 Terrorists ^1alive and ^4CT ^1alive." );
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wDays Menu^n\dChoose Day to Activate",TAG);
	new dMenu = menu_create(Text,"DaysMenu_Handler")
	
	for(new i; i<d_Days; i++)
		menu_additem(dMenu,sz_Days[i]);
	
	menu_display(id,dMenu);
	
	return 1;
}

public DaysMenu_Handler(id,dMenu,Item)
{
	if(Item ==  MENU_EXIT)
	{
		menu_destroy(dMenu)
		return 1;
	}
	if (d_Run)
		return ColorChat(id,"You ^1cannot use the ^3Days Menu ^1while day runnig" );
	s_Days = Item;
	cdDay=3;
	d_Run =true;
	ColorChat(0,"^3%s ^1has started ^4%s^1.",get_name(id),sz_Days[Item]);
	
	CountDownDay();
	
	return menu_destroy(dMenu)
}
public CountDownDay()
{
	if(CTAlives() < 1 || TerrorAlives() < 2)
		return ColorChat(0,"^3Day ^1cannot be started without^4 2 Terrorists ^1alive and ^4CT ^1alive." );
	d_Run = true;
	new szVox[10];
	new ent = -1;
	while((ent = find_ent_by_class(ent, "func_button")))  
		dllfunc(DLLFunc_Use, ent, 0)  
	if(cdDay== 0)
	{
		remove_task(DAY_TASK)
		p_Day();
		return 1;
	}
	set_hudmessage(21, 157, 144, -1.0, 0.20, 1, 6.0, 3.0,_,_,4)
	show_hudmessage(0, "%s will start in %d seconds",sz_Days[s_Days],cdDay);
	num_to_word( cdDay, szVox, charsmax( szVox ) );
	client_cmd( 0, "spk ^"vox/%s^"", szVox );
	cdDay --;
	set_task(1.0,"CountDownDay",DAY_TASK);
	return 1;
}
public FD_TIMING()
{
	set_hudmessage(21, 157, 144, -1.0, 0.30, 0, 6.0, 3.0)
	if(Day_Timer < 1)
	{
		remove_task(FD_TASK);
		show_hudmessage(0,"The Free Day has Done^nGuards Lets Kill Terrorists");
		return 1;
	}
	show_hudmessage(0,"Day: FreeDay^nTime Left: %d",Day_Timer)
	if(Day_Timer<11 )
	{
		new szVox[10];
		num_to_word( Day_Timer, szVox, charsmax( szVox ) );
		client_cmd( 0, "spk ^"vox/%s^"", szVox );
	}
	Day_Timer--;
	set_task(1.0,"FD_TIMING",FD_TASK);
	return 1;
}
public FREEZE_TIMING()
{
	set_hudmessage(21, 157, 144, -1.0, 0.30, 0, 6.0, 3.0)
	if(Day_Timer < 1)
	{
		remove_task(FD_TASK);
		show_hudmessage(0,"The Timer has Done^nZombies Lets Kill Terrorists");
		new CTHealth = TerrorAlives() * 1500;
		for(new i=1; i<MaxPlayers; i++)
		{
			if(!is_user_alive(i)) continue;
			set_user_godmode(i,0);
			set_pev(i, pev_flags, pev(i, pev_flags) & ~FL_FROZEN);
			give_item(i,"weapon_knife");
			evCurWeapon2(i);
			if(cs_get_user_team(i) == CS_TEAM_CT)
			{
				set_user_health(i,CTHealth);
				new temp[60];
				formatex( temp, charsmax( temp ), "%s",szZombie);
				cs_set_user_model(i,temp);
				continue
			}
			if(cs_get_user_team(i) == CS_TEAM_T)
			{
				give_item(i,"weapon_ak47");
				cs_set_user_bpammo( i, CSW_AK47, 9999 );
				give_item(i,"weapon_deagle");
				cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
				continue
			}
		}
		return 1;
	}
	show_hudmessage(0,"Day: ZombieDay^nTime Left: %d",Day_Timer)
	if(Day_Timer<11 )
	{
		new szVox[10];
		num_to_word( Day_Timer, szVox, charsmax( szVox ) );
		client_cmd( 0, "spk ^"vox/%s^"", szVox );
	}
	Day_Timer--;
	set_task(1.0,"FREEZE_TIMING",FREEZE_TASK);
	return 1;
}
public Day_Info()
{
	if(d_Run)
	{
		new CTS[512];
		static Info;
		Info = 0;
		
		new ctAmount;
		
		for (new i=1; i<=MaxPlayers; i++)
		{
			if(!is_user_alive(i) || !is_user_connected(i) || cs_get_user_team (i) != CS_TEAM_CT) continue;
			
			ctAmount++;
			new ct = i;
			
			Info += formatex(CTS[Info],511-Info,"Nick: %s | Health: %d^n",get_name(ct),get_user_health(ct))
		}
		if(ctAmount ==0)
			formatex(CTS,charsmax(CTS),"No counter terrorists alive");
			
		format(CTS,charsmax(CTS),"%s^n^nTo disable this information write /infomsg",CTS);
		
		new Text[128];
			
		set_hudmessage(0, 170, 255, 0.08, 0.13, 0, 6.0, 0.6)
		for(new i = 1; i <= MaxPlayers; i++)
			if(!is_user_connected(i) || !get_user_showinfo(i))
				continue;
			else
			{
				if(is_user_alive(i))
					formatex(Text,charsmax(Text),"^n^n^n^n^n^n^n^n^n^nClient Info:^nHealth: %d",get_user_health(i));
				else
					Text = ""
				ShowSyncHudMsg(i, iHudMessage,"%s JailBreak^nDay: %s^n^nCounter-Terrorists Info:^n%s%s",TAG,sz_Days[s_Days],CTS,Text);
			}
		set_task(0.1,"Day_Info",INFO_TASK);
	}
	else remove_task(INFO_TASK);
}
public tDay_Info()
{
	if(d_Run)
	{
		new TS[512];
		static Info;
		Info = 0;
		
		new tAmount;
		
		for (new i=1; i<=MaxPlayers; i++)
		{
			if(!is_user_alive(i) || !is_user_connected(i) || cs_get_user_team (i) != CS_TEAM_T) continue;
			
			tAmount++;
			new t = i;
			if (s_Days != DodgeBallDay)
				Info += formatex(TS[Info],511-Info,"Nick: %s | Health: %d^n",get_name(t),get_user_health(t))
			else
				Info += formatex(TS[Info],511-Info,"Nick: %s | Throw Balls: %d^n",get_name(t),tBalls[t])
		}
		if(tAmount ==0)
			formatex(TS,charsmax(TS),"No terrorists alive");
		else if(tAmount > 8)
			formatex(TS,charsmax(TS),"There are too many terrorists alive");
		
		format(TS,charsmax(TS),"%s^n^nTo disable this information write /infomsg",TS);
		
		new Text[128];
			
		set_hudmessage(0, 170, 255, 0.08, 0.13, 0, 6.0, 0.6)
		for(new i = 1; i <= MaxPlayers; i++)
			if(!is_user_connected(i) || !get_user_showinfo(i))
				continue;
			else
			{
				formatex(Text,charsmax(Text),"^n^n^n^n^n^n^n^n^n^nClient Info:^nHealth: %d",get_user_health(i));
				if (s_Days != DodgeBallDay)
					ShowSyncHudMsg(i, iHudMessage,"%s JailBreak^nDay: %s^n^nTerrorists Info:^n%s%s",TAG,sz_Days[s_Days],TS,Text)
				else
					ShowSyncHudMsg(i, iHudMessage,"%s JailBreak^nDay: %s^n^nTerrorists Alives:^n%s%s",TAG,sz_Days[s_Days],TS,Text)
			}
		set_task(0.1,"tDay_Info",INFO_TASK);
	}
	else remove_task(tINFO_TASK);
}
public p_Day()
{
	Day_Info() // CT Info
	new ent = -1  
	while((ent = find_ent_by_class(ent, "func_button")))  
		dllfunc(DLLFunc_Use, ent, 0)  
	new CTHealth = TerrorAlives() * 250;
	for(new i = 1; i <= MaxPlayers; i++)
	{
		if(!is_user_alive(i))
			continue;
		set_user_godmode(i,0);
		if(cs_get_user_team(i) != CS_TEAM_T)
			continue;
		if(get_user_gangid(i) != -1 && s_Days != FreeDay)
			set_user_gang_colormodel(i);
			
	}
	start_random_song();
	switch (s_Days)
	{
		case FreeDay:
		{
			Day_Timer = FD_TIME;
			FD_TIMING()
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_knife");
				if(cs_get_user_team(i) != CS_TEAM_CT)
				{
					new r = random_num(0,255);
					new g = random_num(0,255);
					new b = random_num(0,255);
					set_user_rendering(i, kRenderFxGlowShell,r,g, b, kRenderNormal, 40 )
					continue;
				}
				
				give_item(i,"weapon_m4a1");
				cs_set_user_bpammo( i, CSW_M4A1, 9999 );
				give_item(i,"weapon_deagle");
				cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
			}
		}
		case SharkDay:
		{
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_knife");
				set_user_health(i,100);
				
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_noclip(i,1);
					set_user_health(i,CTHealth);
					continue
				}
				if(cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item(i,"weapon_m4a1");
					cs_set_user_bpammo( i, CSW_M4A1, 9999 );
					give_item(i,"weapon_ak47");
					cs_set_user_bpammo( i, CSW_AK47, 9999 );
					give_item(i,"weapon_deagle");
					cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
					continue
				}
			}
		}
		case KnifeDay:
		{
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_knife");
				set_user_health(i,200);
				
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_health(i,CTHealth);
					continue
				}
			}
		}
		case BoxDay:
		{
			remove_task(INFO_TASK);
			tDay_Info()
			server_cmd("mp_friendlyfire 1");
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				set_user_health(i,100);
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_godmode(i,1);
					continue
				}
				if(cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item(i,"weapon_knife");
					set_user_health(i,500);
					continue
				}
			}
		}
		case WarDay:
		{
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_knife");
				set_user_health(i,200);
				
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_health(i,CTHealth);
					give_item(i,"weapon_m4a1");
					cs_set_user_bpammo( i, CSW_M4A1, 9999 );
					give_item(i,"weapon_deagle");
					cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
					continue
				}
				if(cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item(i,"weapon_ak47");
					cs_set_user_bpammo( i, CSW_AK47, 9999 );
					give_item(i,"weapon_deagle");
					cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
					continue
				}
			}
		}
		case tWarDay:
		{
			remove_task(INFO_TASK);
			tDay_Info()
			server_cmd("mp_friendlyfire 1");
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				set_user_health(i,100);
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_godmode(i,1);
					continue
				}
				if(cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item(i,"weapon_ak47");
					cs_set_user_bpammo( i, CSW_AK47, 9999 );
					give_item(i,"weapon_deagle");
					cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
					give_item(i,"weapon_knife");
					set_user_health(i,500);
					continue
				}
			}
		}
		case GrenadeDay:
		{
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_hegrenade")
				cs_set_user_bpammo( i, CSW_HEGRENADE, 9999 );
				set_user_health(i,200);
				
				if(cs_get_user_team(i) == CS_TEAM_CT)
					set_user_health(i,CTHealth);
			}
		}
		case SniperDay:
		{
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_awp")
				cs_set_user_bpammo( i, CSW_AWP, 9999 );
				set_user_health(i,200);
				
				if(cs_get_user_team(i) == CS_TEAM_CT)
					set_user_health(i,TerrorAlives() *250);
			}
		}
		case ScoutDay:
		{
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				give_item(i,"weapon_scout")
				cs_set_user_bpammo( i, CSW_SCOUT, 9999 );
				set_user_health(i,200);
				
				if(cs_get_user_team(i) == CS_TEAM_CT)
					set_user_health(i,CTHealth);
			}
		}
		case tSniperDay:
		{
			remove_task(INFO_TASK);
			tDay_Info()// terror Info
			server_cmd("mp_friendlyfire 1");
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				set_user_health(i,100);
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_godmode(i,1);
					continue
				}
				if(cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item(i,"weapon_awp");
					cs_set_user_bpammo(i,CSW_AWP,9999);
					set_user_health(i,500);
					continue
				}
			}
		}
		case NightClawerDay:
		{
			CreateFog()
			for( new i=1; i <= MaxPlayers; i++ )
			{
				if(!is_user_alive(i)) continue;
				fm_strip_user_weapons(i)
				give_item(i,"weapon_knife");
				set_user_health(i,100);
				
				if ( cs_get_user_team(i) == CS_TEAM_CT )	
					set_user_health(i,CTHealth);

				if(cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item( i, "weapon_ak47")
					cs_set_user_bpammo( i, CSW_AK47, 9999)
					give_item(i,"weapon_deagle");
					cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
					if(is_user_premium(i))
					{
						give_item(i,"weapon_m249");
						cs_set_user_bpammo( i, CSW_M249, 9999 );
					}
				}
			}
		}
		case DodgeBallDay:
		{
			remove_task(INFO_TASK);
			tDay_Info()
			for( new i = 1; i <= MaxPlayers; i++ )
			{
				if(!is_user_alive(i))	continue;
				gTouched[i] = 0;
				fm_strip_user_weapons(i)
				set_user_health(i, 100)
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_godmode(i,1);
					continue
				}
				if (cs_get_user_team(i) == CS_TEAM_T)
				{
					give_item( i, "weapon_hegrenade")
					cs_set_user_bpammo( i, CSW_HEGRENADE, 9999)
				}
			}
		}
		case ZombieDay:
		{
			CreateFog()
			Day_Timer = FREEZE_TIME;
			FREEZE_TIMING()
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) continue;
				
				fm_strip_user_weapons(i)
				set_user_health(i,100);
				set_user_godmode(i,1);
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_pev(i, pev_flags, pev(i, pev_flags) | FL_FROZEN);
					new temp[60];
					formatex( temp, charsmax( temp ), "%s",szZombie);
					cs_set_user_model(i,temp);
				}
			}
		}
		case DeaglePowerDay,ShotGunPowerDay:
		{
			remove_task(INFO_TASK);
			tDay_Info()
			server_cmd("mp_friendlyfire 1");
			for (new i=1; i<=MaxPlayers; i++)
			{
				if(!is_user_alive(i)) 
					continue;
				fm_strip_user_weapons(i)
				if(cs_get_user_team(i) == CS_TEAM_CT)
				{
					set_user_godmode(i,1);
					continue;
				}
				if(s_Days == DeaglePowerDay)
				{
					give_item(i,"weapon_deagle")
					cs_set_user_bpammo( i, CSW_DEAGLE, 9999 );
					set_user_health(i,250);
				}
				else
				{						
					give_item(i,"weapon_m3")
					cs_set_user_bpammo( i, CSW_M3, 9999 );
					set_user_health(i,350);
				}
			}
		}
	}
}
public PlayerKilled()
	Event_StopDay()
	
public Event_StopDay()
{
	if(!d_Run) return 1;
//	client_print(0,print_chat,"%d",TerrorAlives());
	if(TerrorAlives() < 2 || CTAlives() < 1)
	{
		EndDay()
		d_Run = false;
		CreateFog(.clear=true);
		if(TerrorAlives() < 2)
		{
			for(new i = 1; i <= MaxPlayers; i++)
				if(is_user_connected(i))
					set_user_rendering(i);
			new pnumber,players[32];
			get_players(players,pnumber,"ch");
			ColorChat(0,"^1The ^3%s ^1has done, ^3%s ^1has ^4survived ^1the ^4Day ^1%s",sz_Days[s_Days],get_name(p_LR),sz_Days[s_Days], pnumber < 5 ? "" : "and has gotten^3 5 ^1XP!");
			Until = 10.0;
			WinnerBeam(p_LR)
			create_user_box(p_LR);
			if(pnumber < 5)
				ColorChat(0,"^3%s ^1cannot get ^4XP^1, there are not ^3enough players ^1to get XP",get_name(p_LR));
			else
				set_user_xp(p_LR,get_user_xp(p_LR)+5);
			for(new i = 1; i <= MaxPlayers; i++)
				if(is_user_alive(i))
					set_user_model(i);
		}
		start_random_winningsound()
		make_user_dance(p_LR)
	}
	return 1;
}
public Round_End()
	EndDay()
public Round_Start()
{
	v_Run = false;
	show_menu(0, 0, "^n", 1);
	remove_task(VOTE_TASK);
	
	EndDay()
	Round ++;
	if(Round > 6)
		Round = 0;
	DayViewer()
}
public client_disconnect(id)
	Event_StopDay();
public EndDay()
{
	if(!d_Run) return 1;
	d_Run = false;
	CreateFog(.clear=true);
	remove_task(FD_TASK);
	remove_task(FREEZE_TASK);
	remove_task(INFO_TASK);
	remove_task(DAY_TASK);
	server_cmd("mp_friendlyfire 0");
	for (new i=1; i<MaxPlayers; i++)
	{
		if(!is_user_connected(i) || !(is_user_alive(i))) continue;
		set_user_godmode(i,0);
		set_user_noclip(i,0);
		set_user_health(i,100);
		fm_strip_user_weapons(i)
		give_item(i,"weapon_knife");
		if(cs_get_user_team(i) != CS_TEAM_CT) continue;
		give_item(i,"weapon_m4a1");
		cs_set_user_bpammo( i, CSW_M4A1, 9999);
		give_item(i,"weapon_deagle");
		cs_set_user_bpammo( i, CSW_DEAGLE, 9999);
	}
	client_cmd(0,"mp3 stop");
	return 1;
}

public TakeDamage( victim, inf, attacker, Float:dmg)
{
	if(is_user_alive(victim) && is_user_alive(attacker) && d_Run && cs_get_user_team(victim) == CS_TEAM_T && cs_get_user_team(attacker) == CS_TEAM_T && (s_Days == DeaglePowerDay || s_Days == ShotGunPowerDay))
	{
			new Float:velocity[ 3 ];
			entity_get_vector(victim,EV_VEC_velocity,velocity);
			for( new i; i < 3; i++ )
				velocity[ i ] += random_float( ( dmg * 50.0 ) - 100, ( dmg * 50.0 ) + 100);
		
			entity_set_vector( victim, EV_VEC_velocity, velocity );
	}
	if( is_user_connected( attacker ) && cs_get_user_team( victim ) == CS_TEAM_CT && d_Run && s_Days==NightClawerDay )
	{
		remove_task( TASK_INVISIBLE + victim );
		
		g_bVisible[ victim ] = true;
		
		set_task(1.0, "Task_SetInvisible", victim + TASK_INVISIBLE );
	}
	return HAM_IGNORED;
}

// Block Weapon Drops
public BlockDrop()
{
	if(d_Run && s_Days != FreeDay)
		return 1;
	return 0;
}
//Block Use Buttons + pick weapons
public Fwd_UseButton(iEnt)
{
	
	new szInfo[ 32 ]
	pev( iEnt, pev_target, szInfo, charsmax( szInfo ) );
	
	new iTarget = engfunc( EngFunc_FindEntityByString, -1, "targetname", szInfo );
	
	if( iTarget )
		pev( iTarget, pev_classname, szInfo, charsmax( szInfo ) );
	if((equal( szInfo, "multi_manager" ) || equal( szInfo, "game_player_equip" )) && d_Run && s_Days != FreeDay)
		return HAM_SUPERCEDE;
	return HAM_IGNORED;
}

public FwdHamPlayerPickup( iEntity, id ) 
{
	if((d_Run && s_Days != FreeDay))
		return HAM_SUPERCEDE;
	return HAM_IGNORED;
}
///////////////////////////////////////////////////////////////
// Dodgeball
public evCurWeapon2(id)
	evCurWeapon(id)
public evCurWeapon(id)
{
	if(is_user_alive(id) &&get_user_weapon(id) == CSW_HEGRENADE && s_Days == DodgeBallDay && d_Run)
	{
		new temp[ 100 ];
		formatex( temp, charsmax( temp ), "models/%s/days_lr/Dodgeball/%s", szLocation,v_szDodgeball);
		set_pev(id, pev_viewmodel2,temp);
		log_amx(temp);
		formatex( temp, charsmax( temp ), "models/%s/days_lr/Dodgeball/%s", szLocation,p_szDodgeball);
		log_amx(temp);
		set_pev(id, pev_weaponmodel2,temp );
	}
	if(is_user_alive(id)&& get_user_weapon(id) == CSW_KNIFE && s_Days == ZombieDay && d_Run && cs_get_user_team(id) == CS_TEAM_CT)
	{
		new temp[ 100 ];
		formatex( temp, charsmax( temp ), "%s",szZombie);
		cs_set_user_model(id,temp)
		formatex( temp, charsmax( temp ), "models/%s/days_lr/Zombieday/%s", szLocation,v_szZombie);
		set_pev(id, pev_viewmodel2,temp);
	}
}
public fwdSetModel(ent,const model[])
{      
        if(!pev_valid(ent) || !equal(model,"models/w_hegrenade.mdl"))
                return FMRES_IGNORED;
	new temp[ 100 ];
	formatex( temp, charsmax( temp ), "models/%s/days_lr/Dodgeball/%s", szLocation,w_szDodgeball);
	if(s_Days == DodgeBallDay && d_Run)
	{
		engfunc(EngFunc_SetModel,ent,temp)
		TrailMessage(ent,pev(ent,pev_owner));
	}
	return FMRES_SUPERCEDE;
}	
public Ham_Touch_Grenade_Pre(iEntity,id)
{
	if((s_Days != DodgeBallDay) || (!(d_Run))) 
		return 1;
	new player = pev(iEntity, pev_owner);
	
	if(is_user_alive(id) && cs_get_user_team(id) == CS_TEAM_T)
	{
		ExecuteHamB(Ham_Killed, id, pev(iEntity, pev_owner), 0)
		gTouched[player] = 0;
		remove_entity(iEntity)
		Event_StopDay()
	}
	if(gTouched[player] > 3)
	{
		remove_entity(iEntity)
		gTouched[player] = 0;
	}
	else
		gTouched[player] ++;
	return 1;
}
public think_grenade(ent) 
{
	if(s_Days != DodgeBallDay || !d_Run) return PLUGIN_CONTINUE;
	new model[32];
	entity_get_string(ent, EV_SZ_model, model, 31)
	if(equali(model,"models/w_hegrenade.mdl")) 
		return PLUGIN_CONTINUE;
	new killer = pev(ent, pev_owner)
	tBalls[killer] ++;
	return PLUGIN_HANDLED;
}
public FwdEmitSound( ent, channel, sample[], Float:volume, Float:atten, flags, pitch )
{
	if ( s_Days == DodgeBallDay && d_Run )
	{
		if( containi( sample, "he_bounce" ) != -1 )
		{
			if ( pev( ent, pev_fuser1 ) + 0.3 < get_gametime( ) )
			{
				set_pev( ent, pev_fuser1, get_gametime() );
				
				emit_sound( ent, CHAN_ITEM, g_mSound, VOL_NORM, ATTN_NORM, 0, PITCH_NORM );
			}
			return 4;
		}
	}
	
	return 1;
}

stock TrailMessage(ent,id){
	if(get_user_gangid(id) == -1 || !is_user_connected(id))
		return 1;
	if(!d_Run || s_Days != DodgeBallDay) 
		return 1;
	if (ent) {
		message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
		write_byte( TE_BEAMFOLLOW )
		write_short(ent) // entity
		write_short(m_iTrail)  // model
		write_byte( 10 )       // life
		write_byte( 10 )
		write_byte( get_user_gang_glow_r(id) )
		write_byte( get_user_gang_glow_g(id) )
		write_byte( get_user_gang_glow_b(id) )
		write_byte( 192 )
		message_end()
	}
	return 1;
}

public FireInTheHole()
{
	new id = read_data(1)
	if((cs_get_user_team(id) == CS_TEAM_T) && d_Run && s_Days == DodgeBallDay)
		set_task(0.1, "grenid", id)
	return PLUGIN_HANDLED
}
	

public Forward_Touch_Pre( iEnt, id )
{
	if( !is_user_alive( id ) )
		return FMRES_IGNORED;
	if(!d_Run || s_Days != NightClawerDay)
		return FMRES_IGNORED;
	
	new szClassname[ 32 ];
	pev( iEnt, pev_classname, szClassname, charsmax( szClassname ) );
	
	if( equali( szClassname, "worldspawn" ) || equali( szClassname, "func_wall" ) || equali( szClassname, "func_breakable" ) )
		pev( id, pev_origin, g_flWallOrigin[ id ] );
	return FMRES_IGNORED;
}

public Forward_PlayerPreThink(id)
{
	if(!is_user_alive(id))
		return;
		
	if( cs_get_user_team(id) == CS_TEAM_T && is_user_premium(id) && d_Run && s_Days == NightClawerDay)
	{
		new iTarget, iBody, iRed, iGreen;
		get_user_aiming(id,iTarget,iBody);
		if(is_user_alive(iTarget) && cs_get_user_team(iTarget) == CS_TEAM_CT)
			iGreen = 255;
		else
			iRed = 255;
		
		static iOrigin[ 3 ];
		get_user_origin( id, iOrigin, 3 );
		
		message_begin( MSG_BROADCAST, SVC_TEMPENTITY );
		write_byte( TE_BEAMENTPOINT );
		write_short( id | 0x1000 );
		write_coord( iOrigin[ 0 ] );
		write_coord( iOrigin[ 1 ] );
		write_coord( iOrigin[ 2 ] );
		write_short( g_iLaserSprite );
		write_byte( 1 );
		write_byte( 10 );
		write_byte( 1 );
		write_byte( 5 );
		write_byte( 0 );
		write_byte( iRed );
		write_byte( iGreen );
		write_byte( 0 );
		write_byte( 150 );
		write_byte( 25 );
		message_end( );
	}
	else if (cs_get_user_team(id) == CS_TEAM_CT && d_Run && s_Days == NightClawerDay)
	{
		static iButton;
		iButton = get_user_button( id );
		
		if( iButton & IN_USE )
		{
			static Float:fOrigin[ 3 ];
			pev( id, pev_origin, fOrigin );
			
			if( get_distance_f( fOrigin, g_flWallOrigin[ id ] ) > 15.0 )
				return;
			
			//if( pev( id, pev_flags ) & FL_ONGROUND )
			//	return;
			
			if( iButton & IN_FORWARD )
			{
				static Float:fVelocity[ 3 ];
				velocity_by_aim( id, 250, fVelocity );
				
				set_pev( id, pev_velocity, fVelocity );
			}
			
			else if( iButton & IN_BACK )
			{
				static Float:fVelocity[ 3 ];
				velocity_by_aim( id, -250, fVelocity );
				
				set_pev( id, pev_velocity, fVelocity );
			}
			else
			{
				static Float:fVelocity[ 3 ];
				velocity_by_aim( id,0, fVelocity );
				
				set_pev( id, pev_velocity, fVelocity );
			}
		}
	}
	return;
}
public Task_SetInvisible( iTaskID )
{
	new id = iTaskID - TASK_INVISIBLE;
	
	g_bVisible[ id ] = false;
}

public Forward_AddToFullPack_Post( es, e, iEntity, iHost )
{
	if(!d_Run || s_Days != NightClawerDay)
		return FMRES_IGNORED;
	if( is_user_alive( iEntity ) && is_user_alive( iHost ) && cs_get_user_team( iEntity ) == CS_TEAM_CT && cs_get_user_team( iHost ) == CS_TEAM_T && d_Run && s_Days==NightClawerDay )
	{
		set_es( es, ES_RenderMode, kRenderTransAdd );
		
		if( g_bVisible[ iEntity ] )
			set_es( es, ES_RenderAmt, 255 );
			
		else set_es( es, ES_RenderAmt, 0 );
	}
	else if((is_user_alive(iEntity) && cs_get_user_team(iEntity) == CS_TEAM_CT && (cs_get_user_team(iHost) == CS_TEAM_CT || !is_user_alive(iHost))))
	{
		set_es( es, ES_RenderMode, kRenderTransAdd );
		set_es( es, ES_RenderAmt, 255 );
	}
	return FMRES_IGNORED;
}
	
// stocks
stock get_name(index)
{
	new szName[33];
	get_user_name(index,szName,charsmax(szName));
	return szName;
}


stock fm_strip_user_weapons(client)
{
        new ent = create_entity( "player_weaponstrip" );       
        if ( !pev_valid( ent ) )
                return 0;
 
        dllfunc( DLLFunc_Spawn, ent );
        dllfunc( DLLFunc_Use, ent, client );
        engfunc( EngFunc_RemoveEntity, ent );
 
        return 1;
} 

public WinnerBeam( id )
{
	if( get_gametime( ) > Until )
		return 0;
	new Origin[ 3 ];
	get_user_origin( id, Origin );
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY );
	write_byte( TE_BEAMCYLINDER );
	write_coord( Origin[ 0 ] );// start position
	write_coord( Origin[ 1 ] );
	write_coord( Origin[ 2 ] );
	write_coord( Origin[ 0 ] );// end position
	write_coord( Origin[ 1 ] );
	write_coord( Origin[ 2 ] + 80 );
	write_short( SpriteIndex );// sprite index
	write_byte( 0 );// starting frame
	write_byte( 50 ); // frame rate in 0.1's
	write_byte( 20 )// life in 0.1's
	write_byte( 15 )// line width in 0.1's
	write_byte( 60 )// noise amplitude in 0.01's
	write_byte( random_num(0,255) );// Red
	write_byte( random_num(0,255) );// Green
	write_byte( random_num(0,255) );// Blue
	write_byte( 255 );// brightness
	write_byte( 0 );// scroll speed in 0.1's
	message_end( );
	set_task( 0.2, "WinnerBeam", id );
	return 0;
}

stock CreateFog( const index = 0, const red = 127, const green = 127, const blue = 127, const Float:density_f = 0.003, bool:clear = false )
{
	static msgFog;
    
	if( msgFog || ( msgFog = get_user_msgid( "Fog" ) ) )
	{
		new density = _:floatclamp( density_f, 0.0001, 0.25 ) * _:!clear;
		message_begin( index ? MSG_ONE_UNRELIABLE : MSG_BROADCAST, msgFog, .player = index );
		write_byte( clamp( red  , 0, 255 ) );
		write_byte( clamp( green, 0, 255 ) );
		write_byte( clamp( blue , 0, 255 ) );
		write_long( _:density );
		message_end( );
	}
}


stock CreateShake( const client )
{
	static duration;
	
	duration= FixedUnsigned16( 1.0, 1<<12 );
	
	message_begin( MSG_ONE, get_user_msgid( "ScreenShake" ), {0,0,0},  client );
	write_short( 0xFFFF );
	write_short( duration );
	write_short( 0xFFFF );
	message_end();
}
stock FixedUnsigned16( Float:flValue, iScale ) 
{ 
	new iOutput;
	
	iOutput	= floatround( flValue * iScale );
	
	if ( iOutput < 0 )
		iOutput	= 0;
	
	if ( iOutput > 0xFFFF )
		iOutput	= 0xFFFF;
	
	return iOutput;
}

stock leds(const iIndex)
{
	new Float: Origin[3];
	entity_get_vector(iIndex,EV_VEC_origin,Origin);
	
	message_begin( MSG_BROADCAST ,SVC_TEMPENTITY);
	write_byte(TE_SPRITETRAIL); 
	write_coord(floatround(Origin[0])); 
	write_coord(floatround(Origin[1])); 
	write_coord(floatround(Origin[2])); 
	write_coord(floatround(Origin[0])); 
	write_coord(floatround(Origin[1])); 
	write_coord(floatround(Origin[2]+20)); 
	write_short(gLeds[random(6)]); 
	write_byte(50);
	write_byte(2); 
	write_byte(5); 
	write_byte(90) ;
	write_byte(40); 
	message_end(); 
}

stock ColorChat( const iPlayer, const szMsg[ ], { Float, Sql, Resul, _ } : ... )        
{
	new iMsg[ 191 ], iPlayers[ 32 ], iCount = 1;
	static iLen;
	iLen = formatex( iMsg, charsmax( iMsg ), "^4[^1 %s ^4] ^1",Chat_TAG );
	vformat( iMsg[ iLen ], charsmax( iMsg ) - iLen, szMsg, 3 );
	if ( iPlayer )
		iPlayers[ 0 ] = iPlayer;
	else    
		get_players( iPlayers, iCount, "ch" );  
	for ( new i = 0; i < iCount; i++ )
	{
		if ( ! is_user_connected( iPlayers[ i ] ) )
			continue;
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _,iPlayers[ i ] );
		write_byte( iPlayers[ i ] );
		write_string( iMsg );
		message_end( );
	}
	return 1;
}
