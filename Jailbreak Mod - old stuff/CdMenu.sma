/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <cstrike>
#include <fakemeta_util>

#define TAG "eTs"
#define Chat_TAG "eTs"
#define s_IP "31.168.169.42:40800"

#define Year_Expired 2018
#define Month_Expired 1


#define MaxTimer 10

new const Teams_Freeze [][] =
{
	"\dNone",
	"Terrorists",
	"Counter-Terrorists",
	"All Players"
}
new bool:Status,Time[33],Freeze[33],cCD;

native get_run_day()
native get_run_vote()
native get_lr_run()


public plugin_init() {
	
	new Year[6],Month[3],year,month,serverIP[20];
	format_time(Year,charsmax(Year),"%Y",get_systime())
	format_time(Month,charsmax(Month),"%m",get_systime())
	year = str_to_num(Year);
	month = str_to_num(Month);
	get_user_ip(0,serverIP,charsmax(serverIP),0);
	if((year > Year_Expired || (year == Year_Expired && month >= Month_Expired)) || (!equali(s_IP,serverIP)))
		set_fail_state("Mod Time has been expired or Your Server IP is not allowed");
	register_plugin("CountDown", "1.0", "MJ")
	register_clcmd("say /cd","CountDownMenu")
	cCD = register_cvar("jb_countdown","1");
}
public CountDownMenu(id)
{
	if (get_pcvar_num(cCD) == 0) return 0;
	if((cs_get_user_team(id) == CS_TEAM_CT && is_user_alive(id)) || get_user_flags(id) & ADMIN_LEVEL_E)
	{
		if (Status)
			return ColorChat(id,"You ^1cannot open ^3CD Menu ^1while countdown running!");
		if(get_run_day() || get_run_vote())
			return ColorChat(id,"You ^1cannot use the ^3CD Menu ^1while day running" );
		if(get_lr_run())
			return ColorChat(id,"You ^1cannot use the ^3CD Menu ^1while Last Request Dual" );
		new string[128];
		formatex(string,charsmax(string),"\r[ \w%s \r] \wCountDown Menu:",TAG);
		new menu = menu_create(string,"CountDown_Handler")
		formatex(string,127,"CountDown Time \d[\r%i \ySeconds\d]", Time[id]);
		menu_additem(menu,string);
		formatex(string,127,"Freeze Status \d- \r%s",Teams_Freeze[Freeze[id]]);
		menu_additem(menu,string);
		formatex(string,127,"CountDown Status \d- \r%s",Status ? "Activate" : "\dDeactivated");
		menu_additem(menu,string);
			
		menu_display(id,menu);
		return 1;
	}
	return ColorChat(id,"^1You have ^4no access ^1to this ^4command!");
}
public CountDown_Handler (id,menu,item)
{
	if(!(get_pcvar_num(cCD))) return 0;
	new szName [32];
	get_user_name(id,szName,charsmax(szName))
	switch (item)
	{
		case MENU_EXIT:
		{
			Status = false;
			Time[id] = 1;
			Freeze[id] = 0;
			return menu_destroy(menu);
		}
		case 0:
		{
			if(!((get_user_flags(id) & ADMIN_LEVEL_E) || (is_user_alive (id) && cs_get_user_team(id) == CS_TEAM_CT)))
				return ColorChat(id,"You ^1have ^4no access ^1to this ^4command!");
			Time[id] ++;
			if(Time[id] > MaxTimer)
				Time[id] = 1;
		}
		case 1:
		{
			if(!((get_user_flags(id) & ADMIN_LEVEL_E) || (is_user_alive (id) && cs_get_user_team(id) == CS_TEAM_CT)))
				return ColorChat(id,"You ^1have ^4no access ^1to this ^4command!");
			Freeze[id] ++;
			if(Freeze[id] >  sizeof(Teams_Freeze)-1)
				Freeze[id] =0;
		}
		case 2: 
		{
			if(!((get_user_flags(id) & ADMIN_LEVEL_E) || (is_user_alive (id) && cs_get_user_team(id) == CS_TEAM_CT)))
				return ColorChat(id,"You ^1have ^4no access ^1to this ^4command!");
			if(!Status)
			{
				Status=true;
				ColorChat(0,"^4%s has ^3activated^1 the countdown!",szName);
				return CountDown(id);
			}
			else
				return ColorChat(id,"^1You ^4cannot use ^3CD menu ^1while countdown running!");
		}
	}
	return CountDownMenu(id)
}
public CountDown (id)
{
	if(!(get_pcvar_num(cCD))) return 0;
	if(!Status)
		return 1;
	if (Time[id] > 0)
	{
		set_hudmessage(21, 157, 144, -1.0, 0.69, 1, 6.0, 18.0,_,_,4)
		show_hudmessage(0, "CountDown Activated^n Time Left: %i Seconds",Time[id])
		new szVox[ 10 ];
		num_to_word( Time[id], szVox, charsmax( szVox ) );
		client_cmd( 0, "spk ^"vox/%s^"", szVox );
		Time[id] -= 1
		set_task(1.0, "CountDown",id)
		switch (Freeze[id])
		{
			case 1:
			{
				for(new i = 1; i <= get_maxplayers( ); i++)
				{
					if(!is_user_connected(i)) continue;
					if( cs_get_user_team( i ) == CS_TEAM_T && is_user_alive(i))
						set_pev(i, pev_flags, pev(i, pev_flags) | FL_FROZEN)
				}
			}
			case 2:
			{
				for(new i = 1; i <= get_maxplayers( ); i++)
				{
					if(!is_user_connected(i)) continue;
					if( cs_get_user_team( i ) == CS_TEAM_CT  && is_user_alive(i))
						set_pev(i, pev_flags, pev(i, pev_flags) | FL_FROZEN)
				}
			}
			case 3:
			{
				for(new i = 1; i <= get_maxplayers( ); i++)
				{
					if(!is_user_connected(i)) continue;
					if( is_user_alive(i) )
						set_pev(i, pev_flags, pev(i, pev_flags) | FL_FROZEN)
				}
			}
		}
	}

	else
	{
		for(new i = 1; i <= get_maxplayers( ); i++)
			set_pev(i, pev_flags, pev(i, pev_flags) & ~FL_FROZEN);
		Status = false;
		set_hudmessage(21, 157, 144, -1.0, 0.69, 1, 6.0, 18.0,_,_,4)
		show_hudmessage(0, "CountDown Done!!")
		Time[id] = 1;
		Freeze[id] = false;
	}
	return 1;
}		



stock ColorChat( const iPlayer, const szMsg[ ], { Float, Sql, Resul, _ } : ... )        
{
	new iMsg[ 191 ], iPlayers[ 32 ], iCount = 1;
	static iLen;
	iLen = formatex( iMsg, charsmax( iMsg ), "^4[^1 %s ^4] ^1",Chat_TAG );
	vformat( iMsg[ iLen ], charsmax( iMsg ) - iLen, szMsg, 3 );
	if ( iPlayer )
		iPlayers[ 0 ] = iPlayer;
	else    
		get_players( iPlayers, iCount, "ch" );  
	for ( new i = 0; i < iCount; i++ )
	{
		if ( ! is_user_connected( iPlayers[ i ] ) )
			continue;
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _,iPlayers[ i ] );
		write_byte( iPlayers[ i ] );
		write_string( iMsg );
		message_end( );
	}
	return 1;
}
