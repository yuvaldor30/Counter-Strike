/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fvault>
#include <fun>
#include <cstrike>
#include <fakemeta>
#include <zombieswarm>

#define Levels_List 22
#define Pistols 5

#define TAG "UniqueGaming"
#define Chat_TAG "uG`"
#define s_IP "31.168.169.42:11111"

#define InfoTask 1412
#define AutoKnifeTask 1431

#define Year_Expired 2017
#define Month_Expired 1
#define TypesEachItem 2

native get_user_prestige(index)
native set_user_prestige(index,amount)
native is_user_premium(index)

enum _: PlayerData
{
	Level,
	XP,
}

enum _: GunsData
{
	GunName[20],
	GunWeapon[20],
	GunAmmo
}


new szVault [] = "XP_Players";

new Levels[Levels_List+1] =
{
	0,	// Start - Level 1
	400,	// Up To Lv2
	1000, 	// Up To Lv3
	2000, 	// Up To Lv4
	3000, 	// Up To Lv5
	4500,	// Up To Lv6
	6000,	// Up To Lv7
	8000,	// Up To Lv8
	10000,	// Up To Lv9
	13000,	// Up To Lv10
	17000,	// Up To Lv11
	21000,	// Up To Lv12
	25500,	// Up To Lv13
	30500,	// Up To Lv14
	37000,	// Up To Lv15
	42000,	// Up To Lv16
	50800,	// Up To Lv17
	58000,	// Up To Lv18
	65000,	// Up To Lv19
	70000,	// Up To Lv20
	80000,	// Up To Lv21
	125000,	// Up To Lv1 Again
	125000
}

new Guns[Levels_List][GunsData] =
{
	{ "Glock",	"weapon_glock18",	CSW_GLOCK18	},
	{ "USP",	"weapon_usp",		CSW_USP		},
	{ "Fiveseven",	"weapon_fiveseven",	CSW_FIVESEVEN	},
	{ "Elite",	"weapon_elite",		CSW_ELITE	},
	{ "Deagle",	"weapon_deagle",	CSW_DEAGLE	},	
	{ "M3",		"weapon_m3",		CSW_M3		},
	{ "XM1014",	"weapon_xm1014",	CSW_XM1014	},
	{ "TMP",	"weapon_tmp",		CSW_TMP		},
	{ "Mac10",	"weapon_mac10",		CSW_MAC10	},
	{ "MP5",	"weapon_mp5navy",	CSW_MP5NAVY	},
	{ "P90",	"weapon_p90",		CSW_P90		},
	{ "SG552",	"weapon_sg552",		CSW_SG552	},
	{ "AUG",	"weapon_aug",		CSW_AUG,	},
	{ "Famas",	"weapon_famas",		CSW_FAMAS	},
	{ "Galil",	"weapon_galil",		CSW_GALIL	},
	{ "Scout",	"weapon_scout",		CSW_SCOUT	},
	{ "AK47",	"weapon_ak47",		CSW_AK47	},
	{ "M4A1",	"weapon_m4a1",		CSW_M4A1	},
	{ "AWP",	"weapon_awp",		CSW_AWP		},
	{ "M249",	"weapon_m249",		CSW_M249	},
	{ "G3SG1",	"weapon_g3sg1",		CSW_G3SG1	},
	{ "None",	"None",			CSW_M249	}
}

/*
enum _: ItemsULData
{
	sz_ItemName[20],
	sz_ItemModel[20],
	sz_ItemID[20],
	i_ItemLevel,
	i_ItemPrice,
	Float:f_ItemDamage,
	i_ItemPremium
}

enum _: Weapons
{
	WP_KNIFE,
	WP_GLOCK,
	WP_DEAGLE,
	WP_MAC10,
	WP_M4A1,
	WP_AK47,
	WP_SCOUT,
	WP_AWP
};

enum _: ItemsInfo
{
	Item_CSW,
	Item_Type
}

new ULItems[Items][ItemsInfo] =
{
	{CSW_KNIFE,type_Knife},
	{CSW_GLOCK18,type_Pistol},
	{CSW_DEAGLE,type_Pistol},
	{CSW_MAC10,type_Gun},
	{CSW_M4A1,type_Gun},
	{CSW_AK47,type_Gun},
	{CSW_SCOUT,type_Gun},
	{CSW_AWP,type_Gun}
}

new ItemsData[Items][TypesEachItem][ItemsULData] =
{
	{
		{"Super Knife","v_knife1","strong_knife",5,1500,10.0},
		{}
	},
	{
		{"Glock 18","v_glock1","strong_glock",3,400,3.0},
		{}
	},
	{
		{"Desert Eagle","v_deagle1","strong_deagle",5,600,5.0},
		{}
	},
	{
		{"Mac-10","v_mac101","strong_mac10",10,800,3.0},
		{}
	},
	{
		{"M4a1","v_m4a11","strong_m4a1",17,1500,3.0},
		{}
	},
	{
		{"Ak-47","","knife_ak47",18,3500,1.0,PremiumOnly},
		{}
	},
	{
		{"Scout","v_scout1","strong_scout",12,1300,5.0},
		{}
	},
	{
		{"Awp","v_awp1","strong_awp",18,2700,5.0},
		{}
	}
};
new ItemsData[Weapons][ItemsDataData] =
{  
    {"Super Knife","v_knife1",5,1500},
    {"Glock 18","v_glock1",3,400},
    {"Desert Eagle","v_deagle1",5,600},
    {"Mac-10","v_mac101",10,800},
    {"M4a1","v_m4a11",17,1500},
    {"Ak-47","v_ak471",18,3500},
    {"Scout","v_scout1",12,1300},
    {"Awp","v_awp1",18,2700}
    
};

new iULData[33][Items];
new szLocation[] = "models/UniqueGaming";

*/





new iData[33][PlayerData],NumberKill[33],XPKill[33],bool:AutoWeapons[33],LastWeapon1[33],LastWeapon2[33],bool:TookWeapon[33],iHudMessage,bool:EventRun,Float:EventMultiXP=1.0;

public plugin_init() {
	register_plugin("Expirence System","1.0","MJ")
	new Year[6],Month[3],year,month,serverIP[20];
	format_time(Year,charsmax(Year),"%Y",get_systime())
	format_time(Month,charsmax(Month),"%m",get_systime())
	year = str_to_num(Year);
	month = str_to_num(Month);
	get_user_ip(0,serverIP,charsmax(serverIP),0);
	if((year > Year_Expired || (year == Year_Expired && month >= Month_Expired)) && containi(serverIP,"168.1") == -1)
		set_fail_state("Mod Time has been expired or Your Server IP is not allowed");
	else
	{
		iHudMessage=CreateHudSyncObj();
		
		//register_event("CurWeapon","evCurWeapon","be","1=1");
		
		register_event("DeathMsg", "PlayerKill", "a");
		
		RegisterHam(Ham_Spawn,"player","PlayerSpawn",1);
		//RegisterHam(Ham_TakeDamage,"player","ItemDamage");
		
		register_concmd("amx_set_level","LevelCmd");
		register_clcmd("say","SayHandle");
		RegisterHam( Ham_Touch, "armoury_entity", "FwdHamPlayerPickup" ); 
		RegisterHam( Ham_Touch, "weaponbox", "FwdHamPlayerPickup" );
		register_logevent("RoundStart", 2, "1=Round_Start")
		
		register_forward(FM_CmdStart, "FwdCmdStart", 0);
		
		
		register_clcmd("multixp","ReadXP");
	}
}	
/*
public plugin_precache()
{
	new a_szLocations[][] = {"Knives","Pistols","Rifles","Grenades","Items"};
	for(new i = 0; i < Items; i++)
	{
		for(new j = 0; j < TypesEachItem; j++)
		{
			new szTemp[100];
			formatex(szTemp,charsmax(szTemp),"%s/%s/%s.mdl",szLocation,a_szLocations[ULItems[i][Item_Type]],ItemsData[i][j][sz_ItemModel]);
			//if(!file_exists(szTemp))
			//	set_fail_state("You have missed file. (%s)",szTemp);
			if(!equali(ItemsData[i][j][sz_ItemModel],""))
				precache_model(szTemp);
		}
	}
	
}

public evCurWeapon(id)
{
	new iWeapon = -1;
	
	new a_szLocations[][] = {"Knives","Pistols","Rifles","Grenades","Items"};
	
	for(new i = 0; i < Items; i++)
		if(get_user_weapon(id) == ULItems[i][Item_CSW])
			iWeapon = i;
	if(iWeapon != -1)
		if(iULData[id][iWeapon] != -1 && cs_get_user_team(id) == CS_TEAM_CT)
		{
			new temp[100];
			formatex(temp,charsmax(temp),"%s/%s/%s.mdl",szLocation,a_szLocations[ULItems[iWeapon][Item_Type]],ItemsData[iWeapon][iULData[id][iWeapon]][sz_ItemModel]);
			set_pev(id,pev_viewmodel2,temp);
		}
}*/

public plugin_natives()
{
	register_native("get_user_xp","_get_user_xp");
	register_native("get_user_level","_get_user_level");
	register_native("get_user_max_level","_get_user_maxlevel");
	register_native("set_user_xp","_set_user_xp");
	//register_native("get_user_item_id","_get_user_item_id");
	//register_native("get_item_model_location","_get_item_model_location");
}
/*
public _get_item_model_location(plugin,params)
{
	new szItemID[20];
	get_string(1,szItemID,charsmax(szItemID));
	
	new bool: Break = false;
	new szTemp[100];
	for(new i = 0; i < Items; i++)
	{
		for(new j = 0; j < TypesEachItem; j++)
		{
			formatex(szTemp,charsmax(szTemp),"%s",ItemsData[i][j][sz_ItemID]);
			if(equali(szTemp,szItemID))
			{				
				new a_szLocations[][] = {"Knives","Pistols","Rifles","Grenades","Items"};
				formatex(szTemp,charsmax(szTemp),"%s/%s/%s.mdl",szLocation,a_szLocations[ULItems[i][Item_Type]],ItemsData[i][j][sz_ItemModel]);
				Break = true;
				break;
			}
		}
		if(Break)
			break;
	}
	return szTemp;
}
public _get_user_item_id(plugin,params)
{
	new id = get_param(1);
	new iwep = get_param(2);
	new szText[60];
	
	if(iULData[id][iwep] != -1)
		formatex(szText,charsmax(szText),"%s",ItemsData[iwep][iULData[id][iwep]][sz_ItemID]);
	else
		formatex(szText,charsmax(szText),"ErrorWeapon");
	
	
	return szText;
}
	*/
public _get_user_xp(plugin, params)
	return iData[get_param(1)][XP];
	
public _get_user_level(plugin, params)
	return iData[get_param(1)][Level]+1;
	
public _get_user_maxlevel(plugin, params)
{
	new id = get_param(1);
	id++;
	return Levels_List;
}

public _set_user_xp(plugin, params)
{
	new index = get_param(1);
	iData[index][XP] = get_param(2);
	CheckLevelUP(index);
}

	
public ReadXP(id)
{
	new szMessage[192];
	
	read_args(szMessage,charsmax(szMessage));
	
	remove_quotes(szMessage);
	
	new Float: MultiXP = str_to_float(szMessage);
	
	if(MultiXP < 1.0)
		ColorChat(id,"You have to enter ^3valid number ^1over 1.0!");
	else
		EventMultiXP = MultiXP;
	
	return EventsMenu(id);
}

public RoundStart()
{
	if(EventRun)
		ColorChat(0,"^3Experience Event ^1is running currently now. ^1(^4x %.2f^1)",EventMultiXP);
}

/*
public ItemDamage(Victim,Inflictor,Attacker,Float:Damage,iDmgBits)
{
	if(Victim == Attacker || Attacker == 0 || cs_get_user_team(Attacker) != CS_TEAM_CT)
		return HAM_IGNORED;
	
	new iWeapon = -1;
	for(new i = 0; i  < Items; i++)
		if(ULItems[i][Item_CSW] == get_user_weapon(Attacker) && ULItems[i][Item_Type] != type_Grenade &&  ULItems[i][Item_Type] != type_Item)
		{
			iWeapon = i;
			break;
		}
	if(iWeapon == -1)
		return HAM_IGNORED;
	
	if(iULData[Attacker][iWeapon] == -1)
		return HAM_IGNORED;
	
	if(ItemsData[iWeapon][iULData[Attacker][iWeapon]][f_ItemDamage] <= 1.0)
		return HAM_IGNORED;
	
	SetHamParamFloat( 4,Damage * ItemsData[iWeapon][iULData[Attacker][iWeapon]][f_ItemDamage]);
	
	return HAM_HANDLED;
}*/

public ShopMenu(id)
{
	if(cs_get_user_team(id) != CS_TEAM_CT)
		return 1;
	new szItem[128];
	
	new cb = menu_makecallback("ShopCB");
	
	formatex(szItem,charsmax(szItem),"\r[ \w%s \r] \wZombie Swarm Shop!",TAG);
	new iMenu = menu_create(szItem,"ShopHandler");
	
	menu_additem(iMenu,"\wRespawn \d- \y16000\r$",.callback = cb);
	menu_additem(iMenu,"\w50 HP \d- \y2000\r$ \d(Max 250)",.callback = cb);
	menu_additem(iMenu,"\w50 Armor \d- \y2000\r$ \d(Max 100)",.callback = cb);
	
	menu_display(id,iMenu);
	return 1;
}

public ShopCB(id,iMenu,iItem)
{
	switch(iItem)
	{		
		case 0:
			if(is_user_alive(id) || cs_get_user_money(id) < 16000)
				return ITEM_DISABLED;
		case 1:
			if(get_user_health(id) > 200 || cs_get_user_money(id) < 2000)
				return ITEM_DISABLED;
		case 2:
			if(get_user_armor(id) > 100 || cs_get_user_money(id) < 2000)
				return ITEM_DISABLED;
	}
	return ITEM_ENABLED;
	
}

public ShopHandler(id,iMenu,iItem)
{
	menu_destroy(iMenu);
	switch(iItem)
	{
		case MENU_EXIT:
			return 1;
			
		case 0:
		{
			if(is_user_alive(id) || cs_get_user_money(id) < 16000)
			{
				ColorChat(id,"You are ^3alive ^1/ do not have ^3enough ^1money.");
			}
			else
			{
				spawn(id);
				cs_set_user_money(id,cs_get_user_money(id) -16000);
			}
		}
		
		
		case 1:
		{
			if(get_user_health(id) > 200 || cs_get_user_money(id) < 2000)
			{
				ColorChat(id,"You have over^3 200 ^1HP / do not have ^3enough ^1money.");
			}
			else
			{
				set_user_health(id,get_user_health(id) + 50);
				cs_set_user_money(id,cs_get_user_money(id) -2000);
			}
		}
		case 2:
		{
			if(get_user_armor(id) > 100 || cs_get_user_money(id) < 2000)
			{
				ColorChat(id,"You have over^3 100 ^1Armor / do not have ^3enough ^1money.");
			}
			else
			{
				set_user_armor(id,get_user_armor(id) + 50);
				cs_set_user_money(id,cs_get_user_money(id) -2000);
			}
		}
	}
	return ShopMenu(id);
}
/*
public ULMenu(id)
{
	new szItem[128];
	
	formatex(szItem,charsmax(szItem),"\r[ \w%s \r] \wSpecial Items Shop!",TAG);
	new iMenu = menu_create(szItem,"ULHandler");
	
	menu_additem(iMenu,"Knives");
	menu_additem(iMenu,"Pistols");
	menu_additem(iMenu,"Rifles");
	menu_additem(iMenu,"Grenades");
	menu_additem(iMenu,"Items");
	
	menu_display(id,iMenu);
	return 1;
}

public ULHandler(id,iMenu,iItem)
{
	menu_destroy(iMenu);
	switch(iItem)
	{
		case MENU_EXIT:
			return 1;
		case 0..2:
			WeaponsMenu(id,iItem);
		//case 3:
		//	GrenadesMenu(id,iItem);
		//case 4:
		//	ItemsMenu(id);
	}
	return 1;
}

public WeaponsMenu(id,iType)
{
	new szItem[128];
	
	new a_szItems[][] = {"Knives","Pistols","Rifles","Grenades","Items"};
	
	formatex(szItem,charsmax(szItem),"\r[ \w%s \r] \wSpecial Items Shop!^n\y%s Shop",TAG,a_szItems[iType]);
	new iMenu = menu_create(szItem,"WeaponsHandler");
	new cb = menu_makecallback("WeaponsCB");
	for(new i = 0, szData[3]; i < Items; i++)
	{
		if(iType == ULItems[i][Item_Type])
		{
			
			for(new j = 0, szTemp[4][30]; j < TypesEachItem; j++)
			{
				if(equali(ItemsData[i][j][sz_ItemName],""))
					break;
			
				formatex(szTemp[0],charsmax(szTemp[]),"Level \r%d",ItemsData[i][j][i_ItemLevel]);
				formatex(szTemp[1],charsmax(szTemp[]),"%s",iULData[id][i] == j ? "Already owned" : "Already Bought");
				formatex(szTemp[2],charsmax(szTemp[]),"%s",ItemsData[i][j][i_ItemPremium] == EveryOne ? "" : "[Player]");
				formatex(szTemp[3],charsmax(szTemp[]),"%s",ItemsData[i][j][i_ItemPremium] == PremiumOnly ? "\r[Premium]" : szTemp[2]);
				formatex(szItem,charsmax(szItem),"\w%s \d- \r%d \wXP \d(\y%s\d) %s",ItemsData[i][j][sz_ItemName],ItemsData[i][j][i_ItemPrice],iULData[id][i] == -1 ? szTemp[0] : szTemp[1],szTemp[3]);
				szData[0] = i + 1;
				szData[1] = j + 1;
				szData[2] = iType + 1;
				if(!equali(ItemsData[i][j][sz_ItemName],""))
					menu_additem(iMenu,szItem,szData,.callback = cb);
			}
		}
	}
	
	menu_setprop(iMenu,MPROP_EXITNAME,"Back");
	
	menu_display(id,iMenu);
	return 1;
}

public WeaponsHandler(id,iMenu,iItem)
{

	if(iItem == MENU_EXIT)
	{
		menu_destroy(iMenu);
		
		ULMenu(id);
		return;
	}
	
	new szData[3],_shit;
	menu_item_getinfo(iMenu,iItem,_shit,szData,sizeof szData,_,_,_shit);
	menu_destroy(iMenu);
	
	new i = szData[0] - 1;
	new j = szData[1] - 1;
	new k = szData[2] - 1;
	
	if(iData[id][XP] < ItemsData[i][j][i_ItemPrice])
		ColorChat(id,"You don't have enough ^3XP ^1to buy that item.");
	else if(iData[id][Level] < ItemsData[i][j][i_ItemLevel])
		ColorChat(id,"Your ^3level ^1is not high enough to buy that item.");
	else if(iULData[id][i] != -1)
		ColorChat(id,"You have already bought item with that type of item.");
	else if(ItemsData[i][j][i_ItemPremium] == PremiumOnly && !is_user_premium(id))
		ColorChat(id,"You have to be ^3Premium Access^1 to buy that item.");
	else if(ItemsData[i][j][i_ItemPremium] == PlayerOnly && is_user_premium(id))
		ColorChat(id,"You cannot buy that item with ^3Premium Access^1.");
	else
	{
		iData[id][XP] -= ItemsData[i][j][i_ItemPrice];
		iULData[id][i] = j;
		ColorChat(id,"Congratulations! You own ^3%s ^1weapon.",ItemsData[i][j][sz_ItemName]);
	}
	
	WeaponsMenu(id,k);
}

public WeaponsCB(id,iMenu,iItem)
{	
	
	new szData[3],_shit;
	menu_item_getinfo(iMenu,iItem,_shit,szData,sizeof szData,_,_,_shit);
	
	new i = szData[0] - 1;
	new j = szData[1] - 1;
	
	
	if(iData[id][XP] < ItemsData[i][j][i_ItemPrice])
		return ITEM_DISABLED;
		
	if(iData[id][Level] < ItemsData[i][j][i_ItemLevel])
		return ITEM_DISABLED;
		
	if(iULData[id][i] != -1)
		return ITEM_DISABLED;
		
	if((ItemsData[i][j][i_ItemPremium] == PremiumOnly && !is_user_premium(id)) || ItemsData[i][j][i_ItemPremium] == PlayerOnly && is_user_premium(id))
		return ITEM_DISABLED;

	
	return ITEM_ENABLED;
}
*/
public FwdHamPlayerPickup( iEntity, id ) {}
    //return HAM_SUPERCEDE

public SayHandle(id)
{
	new Cmd[192],Arg1[32],Arg2[32];
	read_argv(1,Cmd,charsmax(Cmd))
	parse(Cmd,Arg1,31,Arg2,31);

	if(equali(Cmd,"/off"))
	{
		OffAutoWeapons(id)
		return 1;
	}
	else if(equali(Cmd,"/guns") && cs_get_user_team(id) == CS_TEAM_CT)
	{
		CheckGunsMenu(id)
		return 1;
	}/*
	else if(equali(Arg1,"/ul"))
	{
		ULMenu(id);
		return 1;
	}*/
	else if(equali(Arg1,"/shop"))
	{
		ShopMenu(id);	
		return 1;
	}
		
	else if(equali(Arg1,"/level") || equali(Arg1,"/xp"))
	{
		new iPlayer = cmd_target(id,Arg2,8);

		if(equali(Arg2,""))
			iPlayer = id;
		if(!iPlayer)
			return ColorChat(id,"^1 The Target was not found");
		
		ColorChat(id,"^3%s ^1Info:",iPlayer == id ? "Your" : get_name(iPlayer));
		ColorChat(id,"^4[^3Expirence:^1 %d^3/^1%d^4]",iData[iPlayer][XP],Levels[iData[iPlayer][Level]+1]);
		ColorChat(id,"^4[^3Level:^1 %d^4][^3Next Gun:^1 %s^4]",iData[iPlayer][Level]+1,Guns[iData[iPlayer][Level]+1][GunName]);
		ColorChat(id,"^4[^3Kills To Level UP:^1 %d^4]",(Levels[iData[iPlayer][Level]+1] - iData[iPlayer][XP])/XPKill[iPlayer]);
		return 1;
	}
	else if(equali(Arg1,"/events"))
	{
		if(get_user_flags(id) & ADMIN_IMMUNITY)
			EventsMenu(id);
		return 1;
	}
	
	return 0;
}

public ShowInfo(taskid)
{
	new id = taskid - InfoTask;
	if (XPKill[id] == 0)
		XPKill[id] = 500;
	
	new Kills;
	while(Kills * XPKill[id] < Levels[iData[id][Level]+1] - iData[id][XP])
		Kills++;
	
	new szTemp[60];
	formatex(szTemp,charsmax(szTemp),"^n[Experience x %.2f]",EventMultiXP);
	
	set_hudmessage(0, 170, 255, 0.02, 0.25,0, 6.0, 0.6,0.0,0.0,1)
	ShowSyncHudMsg(id, iHudMessage,"[Expirence: %d/%d]^n\
	[Level: %d][Next Gun: %s]^n\
	[Prestiges: %d]^n\
	[Kills to LevelUP: %d]%s",
	iData[id][XP],Levels[iData[id][Level]+1],
	iData[id][Level]+1,Guns[iData[id][Level]+1][GunName],
	get_user_prestige(id),Kills,EventRun ? szTemp : "");
	
	set_task(0.5,"ShowInfo",id+InfoTask);
}

public EventsMenu(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wEvents Menu",TAG);
	new eMenu = menu_create(Text,"EventHandler");
	
	new cb = menu_makecallback("CallBackEvent");
	
	formatex(Text,charsmax(Text),"\wEvent Multi Expirence \d[\r%.2f\d]",EventMultiXP);
	menu_additem(eMenu,Text,.callback = cb);
	formatex(Text,charsmax(Text),"\wEvent Running \d[\r%s\d]",EventRun ? "Enable" : "Disable");
	menu_additem(eMenu,Text);
	
	menu_display(id,eMenu);
	return 1;
}

public CallBackEvent(id,eMenu,Item)
{
	if(EventRun)
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public EventHandler(id,eMenu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(eMenu)
			return 1;
		}
		case 0:
			client_cmd(id,"messagemode multixp");
		case 1:
		{
			EventRun = !EventRun;
			server_cmd("sv_restart 1");
		}
	}
	return EventsMenu(id)
}

public PlayerSpawn(id)
{	
	TookWeapon[id] = false;
	set_task(0.5,"ShowInfo",id + InfoTask);
	if(!is_user_alive(id))
		return 1;
	strip_user_weapons(id)
	set_task(0.2,"GiveKnife",id+AutoKnifeTask);
	if(!is_user_alive(id) || cs_get_user_team(id) != CS_TEAM_CT)
		return 1;
	if(AutoWeapons[id])
		GiveLastGuns(id)
	else
	{
		TookWeapon[id] = false;
		MainMenu(id)
	}
	return 1;
}

public GiveKnife (taskid)
{
	new id = taskid-AutoKnifeTask;
	give_item(id,"weapon_knife");	
}
	
public OffAutoWeapons(id)
{
	if(AutoWeapons[id])
	{
		AutoWeapons[id] = false;
		return ColorChat(id,"^1 Auto Weapons Mode ^3Shutted Down");
	}
	else
		return ColorChat(id,"^1 Auto Weapons Mode is already ^3not running");
}
public CheckGunsMenu(id)
{
	if(TookWeapon[id])
		return ColorChat(id,"^1 You already took guns this round.");
	else
		MainMenu(id)
	return 1;
}

public GiveLastGuns(id)
{
	give_item(id,"weapon_knife")
	new Weapon[64];
	new pWeapon = Guns[LastWeapon1[id]][GunAmmo];
	formatex(Weapon,charsmax(Weapon),"%s",Guns[LastWeapon1[id]][GunWeapon])
	
	give_item(id,"weapon_hegrenade");
	give_item(id,"weapon_smokegrenade");
	if(iData[id][Level] >= LastWeapon1[id])
	{
		give_item(id,Weapon)
		cs_set_user_bpammo(id,pWeapon,500);
		TookWeapon[id] = true;
	}
	else
	{
		ColorChat(id,"^1Your level is ^4too low ^1to take your ^3last weapons^1.");
		PistolsMenu(id)
		return 1;
	}	
	if(iData[id][Level] >= LastWeapon2[id] && LastWeapon2[id] >= Pistols)
	{				
		formatex(Weapon,charsmax(Weapon),"%s",Guns[LastWeapon2[id]][GunWeapon])
		pWeapon = Guns[LastWeapon2[id]][GunAmmo];
		give_item(id,Weapon)
		cs_set_user_bpammo(id,pWeapon,500);
	}
	if (AutoWeapons[id])
		return ColorChat(id,"^1to shut down ^3auto weapons mode ^1write ^4/off");
	return 1;
}

public MainMenu(id)
{
	new Text[128];
	
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wChoose a Option",TAG)
	new mMenu = menu_create(Text,"Main_Handler");
	
	menu_additem(mMenu,"Guns Menu");
	menu_additem(mMenu,"Last Guns");
	menu_additem(mMenu,"Auto Last Guns");
	
	menu_display(id,mMenu)
	return 1;
}

public Main_Handler(id,mMenu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(mMenu)
			return 1;
		}
		case 0: PistolsMenu(id);
		case 1: GiveLastGuns(id);
		case 2:
		{
			AutoWeapons[id] = true;
			GiveLastGuns(id)
		}
	}
	menu_destroy(mMenu)
	return 1;
}
	
public PistolsMenu(id)
{
	new Text[128];
	new CB = menu_makecallback("LevelLow");
	
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wChoose a Weapon",TAG);
	new pMenu = menu_create(Text,"Pistols_Handler");
	
	for(new i; i < Pistols; i++)
	{
		if( i > iData[id][Level])
			formatex(Text,charsmax(Text),"\w%s \d(Level %d)",Guns[i][GunName],i+1)
		else
			formatex(Text,charsmax(Text),"\w%s \d(\yLevel \r%d\d)",Guns[i][GunName],i+1)
		menu_additem(pMenu,Text,.callback = CB);
	}
	
	menu_display(id,pMenu)
	return 1;
}

public Pistols_Handler(id,pMenu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(pMenu)
		return 1;
	}
	
	new Weapon[64];
	give_item(id,"weapon_knife")
	formatex(Weapon,charsmax(Weapon),"%s",Guns[Item][GunWeapon])
	give_item(id,Weapon)
	new pWeapon = Guns[Item][GunAmmo];
	cs_set_user_bpammo(id,pWeapon,500);
	give_item(id,"weapon_hegrenade");
	give_item(id,"weapon_smokegrenade");
	
	LastWeapon1[id] = Item;
	TookWeapon[id] = true;
	
	if(iData[id][Level] >= Pistols)
		GunsMenu(id)
	return 1;
}

public GunsMenu(id)
{
	new Text[128];
	new CB = menu_makecallback("LevelLow2");
	
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wChoose a Weapon",TAG);
	new gMenu = menu_create(Text,"Guns_Handler");
	
	for(new i = Pistols; i < Levels_List-1; i++)
	{
		if( i > iData[id][Level])
			formatex(Text,charsmax(Text),"\w%s \d(Level %d)",Guns[i][GunName],i+1)
		else
			formatex(Text,charsmax(Text),"\w%s \d(\yLevel \r%d\d)",Guns[i][GunName],i+1)
		menu_additem(gMenu,Text,.callback = CB);
	}
	
	menu_display(id,gMenu)
	return 1;
}

public Guns_Handler(id,gMenu,choose)
{
	if(choose == MENU_EXIT)
	{
		menu_destroy(gMenu)
		return 1;
	}
	new Item = choose + Pistols;
	
	new Weapon[64];
	formatex(Weapon,charsmax(Weapon),"%s",Guns[Item][GunWeapon])
	give_item(id,Weapon)
	new pWeapon = Guns[Item][GunAmmo];
	cs_set_user_bpammo(id,pWeapon,500);
	
	LastWeapon2[id] = Item;
	TookWeapon[id] = true;
	return 1;
}

//CallBacks
public LevelLow(id,pMenu,Item)
{
	if(Item > iData[id][Level])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public LevelLow2(id,gMenu,Item)
{
	if(Item + Pistols > iData[id][Level])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public PlayerKill()
{
	new id = read_data(1);
	new killed = read_data(2);
	if(killed == id || id == 0)
		return 1;
	if(get_user_team(id) == get_user_team(killed))
	{
		iData[id][XP] -= 500;
		NumberKill[id] = 0;
		CmdSave(id);
		return 1;
	}
	NumberKill[killed] = 0;
	NumberKill[id] ++;
	new Kills = NumberKill[id];
	
	new r = random_num(1,255);
	new g = random_num(1,255);
	new b = random_num(1,255);
	
	new Kill[30]
	
	if(Kills < 3)
	{	
		XPKill[id] = 500;
		formatex(Kill,charsmax(Kill),"Kill");
	}	
	else if(Kills < 5)
	{
		XPKill[id] = 1000;
		formatex(Kill,charsmax(Kill),"Triple Kill");
	}	
	else if(Kills < 7)
	{
		XPKill[id] = 1500;
		formatex(Kill,charsmax(Kill),"Ultra Kill");
	}
	else
	{
		XPKill[id] = 2000;
		formatex(Kill,charsmax(Kill),"Mega Kill");
	}
	
	if(is_user_premium(id))
		XPKill[id] *= 3;
		
	new szWeapon_name[32];
	read_data(4,szWeapon_name,31);
	
	if(EventRun)
		XPKill[id] = floatround(float(XPKill[id]) * EventMultiXP);
		
	set_hudmessage(r,g,b, 0.50, 0.20,1, 6.0,2.0, 0.0, 0.0, 3)
	show_hudmessage(id, "%s +%d XP!",Kill,XPKill[id])
	
	
	iData[id][XP] += XPKill[id];
	
	CheckLevelUP(id);
	return 1;
}		
public CheckLevelUP(id)
{	
	if(iData[id][XP] >= Levels[iData[id][Level]+1])
	{
		iData[id][Level] ++;
		if(iData[id][Level] >= (Levels_List -1))
		{
			iData[id][Level] = 0;
			iData[id][XP] = Levels[0];
			set_user_prestige(id,get_user_prestige(id) + 1);
			AutoWeapons[id] = false;
			return ColorChat(0,"^3%s ^1Level up and has returned to Level^4 1 ^1with ^3%d ^1prestiges",get_name(id),get_user_prestige(id))
		}
		ColorChat(0,"^3%s ^1Level up to level^4 %d^1!",get_name(id),iData[id][Level]+1)
		CheckLevelUP(id)
	}
	CmdSave(id);
	
	return 1;
}
public LevelCmd(id)
{
	if(!(get_user_flags(id) & ADMIN_IMMUNITY)) return 1;
	new Args[128],aTarget[32],aLevel[32];
	read_args(Args,charsmax(Args));
	remove_quotes(Args);
	parse(Args,aTarget,charsmax(aTarget),aLevel,charsmax(aLevel));
	if( equali(aTarget,"") || equali(aLevel,""))
		return console_print(id,"Usage: amx_set_level <Nick> <Level>");
	new iPlayer = cmd_target( iPlayer, aTarget,8);
	if(!is_str_num(aLevel))
		return console_print(id,"You need to fill numbers in the Level Amount");
	if(!iPlayer)
		return console_print(id,"The Player has not found");
	new iLevel = str_to_num(aLevel);
	if( iLevel < 1)
		return console_print(id,"The Minimum of the value to set level is 1");
	if( iLevel > 21)
		return console_print(id,"The Maximum of the value to set level is 21");
		
	ColorChat(0,"^1Admin: ^4%s ^1has ^3setted ^4%d ^1level to the player ^4%s",get_name(id),iLevel,get_name(iPlayer));
	
	iData[iPlayer][Level] = iLevel-1;
	iData[iPlayer][XP] = Levels[iLevel-1];
	
	CmdSave(iPlayer);
	return 1;
}

public plugin_cfg()  
{  
    register_message(get_user_msgid("StatusIcon"), "Message_StatusIcon"); 
} 

public Message_StatusIcon(iMsgId, iMsgDest, id)  
{  
    static szIcon[8];  
    get_msg_arg_string(2, szIcon, charsmax(szIcon));  
    if( equal(szIcon, "buyzone") ) 
    {  
        if( get_msg_arg_int(1) )  
        {  
            set_pdata_int(id, 235, get_pdata_int(id, 235) & ~(1<<0)); 
            return PLUGIN_HANDLED;  
        }  
    }  
      
    return PLUGIN_CONTINUE;  
}

public FwdCmdStart(plr, uc_handle, seed) 
{ 
    static clip, ammo; 
    if( !is_user_alive(plr) 
    || get_user_weapon(plr, clip, ammo) != CSW_C4 ) 
    { 
        return FMRES_IGNORED; 
    } 
     
    new buttons = get_uc(uc_handle, UC_Buttons); 
    if( buttons&IN_ATTACK ) 
    { 
        buttons &= ~IN_ATTACK; 
        set_uc(uc_handle, UC_Buttons, buttons); 
         
        return FMRES_SUPERCEDE; 
    } 
     
    return FMRES_IGNORED; 
}  

//Saving & Loading
public client_connect(id)
{
	CmdLoad(id)
	AutoWeapons[id] = false;
	LastWeapon1[id] = 0;
	LastWeapon2[id] = -1;
	TookWeapon[id] = false;
	XPKill[id] = 500;
	//for(new i = 0; i < Items; i++)
	//	iULData[id][i] = -1;
}
	
public client_disconnected(id)
	CmdSave(id)

stock CmdLoad(index)
{
	new szAuth[60],szData[1024];
	new Set[PlayerData] = {0,0}
	formatex(szAuth,charsmax(szAuth),"%s",GetAuth(index));
	if(!(fvault_get_data(szVault,szAuth,szData,charsmax(szData))))
	{
		for(new i=0;i<PlayerData;i++)
			iData[index][i]=Set[i];
		return;
	}
	replace_all(szData,charsmax(szData),"#"," ");
	new sData[PlayerData][8];
	parse(szData,sData[0],7,sData[1],7)
	for(new i;i<PlayerData;i++)
		iData[index][i]=str_to_num(sData[i]);
	log_to_file("log_buying",szData);
}

stock CmdSave(index)
{
	new szTemp[11],szData[1000];
	for(new i=0;i<PlayerData;i++)
	{
		formatex(szTemp,charsmax(szTemp),"#%d",iData[index][i]);
		add(szData,charsmax(szData),szTemp);
	}
	log_to_file("log_buying",szData);
	fvault_set_data(szVault,GetAuth(index),szData);
}

stock GetAuth(index)
{
	static szAuth[60];
	get_user_authid(index,szAuth,charsmax(szAuth));
	if(contain(szAuth,"VALVE_")!=-1||contain(szAuth,"ID_LAN")!=-1)
	get_user_ip(index,szAuth,charsmax(szAuth),1);
	return szAuth;
}

stock get_name(index)
{
	new szName[32];
	get_user_name(index,szName,charsmax(szName))
	return szName;
}

stock ColorChat( const iPlayer, const szMsg[ ], { Float, Sql, Resul, _ } : ... )        
{
	new iMsg[ 191 ], iPlayers[ 32 ], iCount = 1;
	static iLen;
	iLen = formatex( iMsg, charsmax( iMsg ), "^4[^1 %s ^4] ^1",Chat_TAG );
	vformat( iMsg[ iLen ], charsmax( iMsg ) - iLen, szMsg, 3 );
	if ( iPlayer )
		iPlayers[ 0 ] = iPlayer;
	else    
		get_players( iPlayers, iCount, "ch" );  
	for ( new i = 0; i < iCount; i++ )
	{
		if ( ! is_user_connected( iPlayers[ i ] ) )
			continue;
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _,iPlayers[ i ] );
		write_byte( iPlayers[ i ] );
		write_string( iMsg );
		message_end( );
	}
	return 1;
}
