/* Plugin generated by AMXX-Studio */

#pragma semicolon 1

#define MAX_COMMUNITYID_LENGTH 18
#define MAX_AUTHID_LENGTH 26

#define SOCKET_DELAY_CHECK 1.0
#define SOCKET_CHECK_TIMES 15

#include "amxmodx.inc"
#include "sockets.inc"

new const g_szPluginName[] = "Steam Names Only";

new const g_szHost[] = "api.steampowered.com";
new const g_szSteamAPIKey[] = "ABC1072FE8820856795B6336A0B4C140	"; // STEAM API KEY -- GET YOURS IN 'http://steamcommunity.com/dev/apikey'

new const g_szTopicFormat[] = "/ISteamUser/GetPlayerSummaries/v0002/?key=%s&steamids=%s";
new const g_szSocketFormat[] = "GET %s HTTP/1.1^nHost:%s^n^n";

new bool: g_bNameApplied[MAX_PLAYERS + 1];
new g_hSockets[MAX_PLAYERS + 1];
new g_szNames[MAX_PLAYERS + 1][MAX_NAME_LENGTH];

public plugin_init() {
	register_plugin(g_szPluginName, "V1.0", "Yannay");
	
	register_message(get_user_msgid("SayText"), "cmd_SayTextMessage");
	
	for(new i, iError; i < MAX_PLAYERS + 1; i ++) {
		g_hSockets[i] = socket_open(g_szHost, 80, SOCKET_TCP, iError);
		
		if(iError != 0) {
			set_fail_state("[Error] Couldn't create socket for %s Plugin!", g_szPluginName);
		}
	}
}

public plugin_end() {
	for(new i; i < MAX_PLAYERS + 1; i ++) {
		socket_close(g_hSockets[i]);
	}
}

public cmd_SayTextMessage() {
	new szMessage[22];
	get_msg_arg_string(2, szMessage, charsmax(szMessage));
	
	if(!equal(szMessage, "#Cstrike_Name_Change")) {
		return PLUGIN_CONTINUE;
	}
	
	new index = get_msg_arg_int(1);
	
	if((1 <= index <= MaxClients) && g_bNameApplied[index]) {
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public client_infochanged(index) {
	if(!g_bNameApplied[index]) {
		return PLUGIN_CONTINUE;
	}
	
	set_user_info(index, "name", g_szNames[index]);
	return PLUGIN_CONTINUE;
}

public client_connect(index) {
	g_bNameApplied[index] = false;
}

public client_authorized(index) {
	new szKey[26], szCommunityID[MAX_COMMUNITYID_LENGTH];
	
	get_user_authid(index, szKey, charsmax(szKey));
	cmd_SteamIDToCommunityID(szKey, szCommunityID);
	
	new szTopic[256], szSocketBuffer[512];
	
	formatex(szTopic, charsmax(szTopic), g_szTopicFormat, g_szSteamAPIKey, szCommunityID);
	formatex(szSocketBuffer, charsmax(szSocketBuffer), g_szSocketFormat, szTopic, g_szHost);
	
	socket_send(g_hSockets[index], szSocketBuffer, charsmax(szSocketBuffer));
	
	set_task(SOCKET_DELAY_CHECK, "cmd_SocketCheckResponse", index, .flags="a", .repeat=SOCKET_CHECK_TIMES);
	set_task(SOCKET_DELAY_CHECK * (SOCKET_CHECK_TIMES + 1), "cmd_SocketFailedResponse", index);
}

public cmd_SocketCheckResponse(const index) {
	if(socket_change(g_hSockets[index])) {
		remove_task(index);
		
		new szData[2048];
		
		socket_recv(g_hSockets[index], szData, charsmax(szData));
		
		cmd_ProcessData(index, szData);
	}
}

public cmd_SocketFailedResponse(const index) {
	remove_task(index);
}

stock cmd_ProcessData(const index, const szData[]) {
	cmd_CopyNameFromData(szData, g_szNames[index], MAX_NAME_LENGTH - 1);
	
	if(g_szNames[index][0] != EOS) {
		set_user_info(index, "name", g_szNames[index]);
		g_bNameApplied[index] = true;
	}
}

stock cmd_CopyNameFromData(const szData[], szName[], const iLength) {
	new iSize = strlen(szData);
		
	for(new i; i < iSize; i ++) {
		
		if(equal(szData[i], "^"personaname^":", 14)) {
			copy(szName, iLength, szData[i + 16]);
			
			iSize = strlen(szName);
			
			for(i = 0; i < iSize; i ++) {
				if(szName[i] == '"') {
					copy(szName[i], iLength - i, "");
				}
			}
			
			trim(szName);
			break;
		}
	}
}

/* thanks to joaquimandrade */
stock cmd_SteamIDToCommunityID(const szSteamID[], szCommunityID[MAX_COMMUNITYID_LENGTH]) {			
	static const this_weird_thing[MAX_COMMUNITYID_LENGTH] = "76561197960265728";
	
	new szLeft[8];
	new szRight[20];
	
	strtok(szSteamID, szLeft, charsmax(szLeft), szRight, charsmax(szRight), ':');
	strtok(szRight, szLeft, charsmax(szLeft), szRight, charsmax(szRight), ':');
	
	new iServer = str_to_num(szLeft);
	new iAuthID = str_to_num(szRight);
	
	copy(szCommunityID, MAX_COMMUNITYID_LENGTH, this_weird_thing);
	
	new toAdd = iAuthID * 2 + iServer;
	new toAddString[MAX_COMMUNITYID_LENGTH];
	
	num_to_str(toAdd, toAddString, MAX_COMMUNITYID_LENGTH - 1);
	
	new iLastIndex = strlen(toAddString) - 1;
	new f, x, s, j;
	
	for(new i; i <= iLastIndex; i ++) {
		f = toAddString[iLastIndex - i] - 48;	
		j = MAX_COMMUNITYID_LENGTH - 2 - i;
		
		do {
			x = szCommunityID[j] - 48;
			s = f + x;
			
			szCommunityID[j] = (s % 10) + 48;
			
			f = s / 10;
			
			j--;
		} while(f);
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ fbidis\\ ansi\\ ansicpg1252\\ deff0{\\ fonttbl{\\ f0\\ fnil\\ fcharset0 Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ ltrpar\\ lang1037\\ f0\\ fs16 \n\\ par }
*/
