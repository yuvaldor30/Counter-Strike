/* Plugin generated by AMXX-Studio */

#include "amxmodx.inc"
#include "fun.inc"
#include "hamsandwich.inc"
#include "engine.inc"
#include "cstrike.inc"
#include "accounts.inc"

#define PLUGIN "Amx Commands System"
#define VERSION "1.0"
#define AUTHOR "MJ"

#define cmd_TaskID(%1,%2) (%1 + (%2 * 100))

#define PREFIX "Amx Commands"

#define TIMEDELAY_RESET 1.0
#define TAKEDAMAGE_CHANNEL 2
#define DEALDAMAGE_CHANNEL 3

#pragma semicolon 1

enum _: eTasks
{
	TASK_NONE,
	TASK_NOCLIP,
	TASK_GODMODE,
	TASK_FREEZE
}

enum _:eWeapons
{
	WEAPON_USP,
	WEAPON_GLOCK18,
	WEAPON_DEAGLE,
	WEAPON_P228,
	WEAPON_ELITE,
	WEAPON_FIVESEVEN,
	WEAPON_M3,
	WEAPON_XM1014,
	WEAPON_TMP,
	WEAPON_MAC10,
	WEAPON_MP5NAVY,
	WEAPON_P90,
	WEAPON_UMP45,
	WEAPON_FAMAS,
	WEAPON_GALIL,
	WEAPON_AK47,
	WEAPON_M4A1,
	WEAPON_SG552,
	WEAPON_AUG,
	WEAPON_SCOUT,
	WEAPON_SG550,
	WEAPON_AWP,
	WEAPON_G3SG1,
	WEAPON_M249,
	WEAPON_HEGRENADE,
	WEAPON_SMOKEGRENADE,
	WEAPON_FLASHBANG,
	WEAPON_SHIELD,
	WEAPON_C4,
	WEAPON_KNIFE,
	ITEM_KEVLAR,
	ITEM_ASSAULTSUIT,
	ITEM_THIGHPACK
}

enum _:eWeaponData
{
	wd_szName[32],
	wd_iAmmo
}
new const g_aWeapons[eWeapons][eWeaponData] = 
{
	{"weapon_usp",CSW_USP},
	{"weapon_glock18",CSW_GLOCK18},
	{"weapon_deagle",CSW_DEAGLE},
	{"weapon_p228",CSW_P228},
	{"weapon_elite",CSW_ELITE},
	{"weapon_fiveseven",CSW_FIVESEVEN},
	{"weapon_m3",CSW_M3},
	{"weapon_xm1014",CSW_XM1014},
	{"weapon_tmp",CSW_TMP},
	{"weapon_mac10",CSW_MAC10},
	{"weapon_mp5navy",CSW_MP5NAVY},
	{"weapon_p90",CSW_P90},
	{"weapon_ump45",CSW_UMP45},
	{"weapon_famas",CSW_FAMAS},
	{"weapon_galil",CSW_GALI},
	{"weapon_ak47",CSW_AK47},
	{"weapon_m4a1",CSW_M4A1},
	{"weapon_sg552",CSW_SG552},
	{"weapon_aug",CSW_AUG},
	{"weapon_scout",CSW_SCOUT},
	{"weapon_sg550",CSW_SG550},
	{"weapon_awp",CSW_AWP},
	{"weapon_g3sg1",CSW_G3SG1},
	{"weapon_m249",CSW_M249},
	{"weapon_hegrenade",CSW_NONE},
	{"weapon_smokegrenade",CSW_NONE},
	{"weapon_flashbang",CSW_NONE},
	{"weapon_shield",CSW_NONE},
	{"weapon_c4",CSW_NONE},
	{"weapon_knife",CSW_NONE},
	{"item_kevlar",CSW_NONE},
	{"item_assaultsuit",CSW_NONE},
	{"item_thighpack",CSW_NONE}
};

enum _:eColorData
{
	cd_szColor[16],
	cd_iColors[3]
}

new const g_aColors[][eColorData] =
{
	{"off",{0,0,0}},
	{"White",{255,255,255}},
	{"Red",{255,0,0}},
	{"Yellow",{255,255,0}},
	{"Blue",{0,0,255}},
	{"Green",{0,128,0}},
	{"Silver",{192,192,192}},
	{"Aquamarine",{102,205,170}},
	{"Purple",{128,0,128}},
	{"Brown",{139,69,19}},
	{"Orange",{255,69,0}},
	{"Pink",{255,20,147}}
};

enum _: eTypes
{
	TYPE_INT,
	TYPE_FLOAT,
	TYPE_STRING,
	TYPE_PLAYER,
	TYPE_ALIVE
}

enum _: eCommandData
{
	cd_szCommand[16],
	cd_iType,
	cd_iAccess,
	cd_iMin,
	cd_iMax
}

enum _: eCommands
{
	CMD_TERRORIST,
	CMD_CT,
	CMD_SPECTATOR,
	CMD_KICK,
	CMD_SLAY,
	CMD_SLAP,
	CMD_UBERSLAP,
	CMD_GLOW,
	CMD_HEALTH,
	CMD_BAN,
	CMD_NOCLIP,
	CMD_GODMODE,
	CMD_WEAPON,
	CMD_FLASH,
	CMD_STRIP,
	CMD_FREEZE,
	CMD_RESTART_ROUND,
	CMD_RESTART_SERVER,
	CMD_ROUND_TIME,
	CMD_FREEZE_TIME,
	CMD_AIR_ACCELERATE,
	CMD_FRIENDLY_FIRE,
	CMD_GRAVITY,
	CMD_PASSWORD,
	CMD_ALLTALK,
	CMD_BUY_TIME,
	CMD_START_MONEY,
	CMD_MAP_CHANGE,
	CMD_SLAP_MENU,
	CMD_TEAM_MENU,
	CMD_KICK_MENU,
	CMD_AMXX_MENU,
	CMD_BAN_MENU
}

new const g_aCommands[eCommands][eCommandData] =
{
	{"t",TYPE_PLAYER,VIP},
	{"ct",TYPE_PLAYER,VIP},
	{"spec",TYPE_PLAYER,VIP},
	{"kick",TYPE_PLAYER,VIP},
	{"slay",TYPE_ALIVE,VIP},
	{"slap",TYPE_ALIVE,VIP,0,2147483647},
	{"uberslap",TYPE_ALIVE,VIP,2,50},
	{"glow",TYPE_ALIVE,Administrator,0,sizeof g_aColors - 1},
	{"health",TYPE_ALIVE,Administrator,1,2147483647},
	{"ban",TYPE_PLAYER,Administrator},
	{"noclip",TYPE_ALIVE,SuperAdministrator,0,120},
	{"godmode",TYPE_ALIVE,SuperAdministrator,0,120},
	{"weapon",TYPE_ALIVE,SuperAdministrator,1,200},
	{"flash",TYPE_ALIVE,GameMaster},
	{"strip",TYPE_ALIVE,GameMaster},
	{"freeze",TYPE_ALIVE,GameMaster,0,120},
	
	{"rr",TYPE_INT,VIP,1,5},
	{"rs",TYPE_INT,SuperAdministrator,0,1},
	{"rt",TYPE_FLOAT,Administrator,1,9},
	{"ft",TYPE_INT,Administrator,0,5},
	{"aa",TYPE_INT,Administrator,10,100000},
	{"ff",TYPE_INT,Administrator,0,1},
	{"gravity",TYPE_INT,Administrator,50,800},
	{"pass",TYPE_STRING,SuperAdministrator},
	{"alltalk",TYPE_INT,Administrator,0,1},
	{"buytime",TYPE_INT,Administrator,15,60},
	{"startmoney",TYPE_INT,Administrator,800,16000},
	{"map",TYPE_STRING,SuperAdministrator},
	{"smenu",TYPE_INT,VIP},
	{"tmenu",TYPE_INT,VIP},
	{"kmenu",TYPE_INT,VIP},
	{"amxx",TYPE_INT,Administrator},
	{"bmenu",TYPE_INT,Administrator}
};

new g_iMsgScreenFade;

new Float: g_flTime[MAX_PLAYERS ][MAX_PLAYERS];
new g_iDamage[MAX_PLAYERS][MAX_PLAYERS];
new g_pFriendlyFire;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	g_iMsgScreenFade = get_user_msgid("ScreenFade");
	
	register_event("HLTV","event_OnNewRound", "a", "1=0", "2=0");
	
	RegisterHam(Ham_Spawn,"player","ham_Spawn",1);
	register_clcmd("say","cmd_SayHandler");
	
	// Message DMG
	RegisterHamPlayer(Ham_TakeDamage, "ham_TakeDamage_Post", 1);
	g_pFriendlyFire = get_cvar_pointer("mp_friendlyfire");
}

public event_OnNewRound()
{
	for(new i = 1,j; i <= MaxClients; i++)
		for(j = TASK_NONE + 1; j < eTasks; j++)
			if(task_exists(cmd_TaskID(i,j)))
				remove_task(cmd_TaskID(i,j));
				
	set_pcvar_num(g_pFriendlyFire,0);
}

public cmd_SayHandler(const iIndex)
{	
	static szMessage[128],szCommand[16];
	
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	trim(szMessage);
	
	if(szMessage[0] != '!')
		return PLUGIN_CONTINUE;
	
	argbreak(szMessage,szCommand,charsmax(szCommand),szMessage,charsmax(szMessage));
	
	new iAccess;
	
	for(new i; i < eCommands; i++)
	{
		if(equali(szCommand[1],g_aCommands[i][cd_szCommand]))
		{	
			iAccess = get_user_access(iIndex);
			
			if(iAccess < g_aCommands[i][cd_iAccess])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
			
			else
			{
				new szName[MAX_NAME_LENGTH + 16];
				get_user_name(iIndex,szName,charsmax(szName));
				
				format(szName,charsmax(szName),"^1%s: ^3%s",get_access_name(iAccess),szName);
				
				if(g_aCommands[i][cd_iType] < TYPE_PLAYER)
					cmd_ServerCommand(iIndex,i,szMessage,szName);
					
				else
					cmd_PlayerCommand(iIndex,i,szMessage,szName);
			}
			
			return PLUGIN_HANDLED;
		}
	}
	
	return PLUGIN_CONTINUE;
}

public cmd_ServerCommand(const iIndex, const iCommand, szMessage[], const szName[MAX_NAME_LENGTH + 16])
{
	static iNum,Float: fNum;
	
	trim(szMessage);
	
	if(g_aCommands[iCommand][cd_iType] == TYPE_INT)
	{
		if(szMessage[0] == EOS)
			iNum = g_aCommands[iCommand][cd_iMin];
		
		else if(!is_str_num(szMessage))
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid value.",PREFIX);
			
			return PLUGIN_HANDLED;
		}
			
		else
		{
			iNum = str_to_num(szMessage);
			
			if(iNum > g_aCommands[iCommand][cd_iMax])
			{
				iNum = g_aCommands[iCommand][cd_iMax];
				
				//client_print_color(iIndex,print_team_default,"^4[%s] ^1The maximum value of the command is ^4%d^1.",PREFIX,g_aCommands[iCommand][cd_iMax]);
			
				//return PLUGIN_HANDLED;
			}
			
			else if(iNum < g_aCommands[iCommand][cd_iMin])
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1The minimum value of the command is ^4%d^1.",PREFIX,g_aCommands[iCommand][cd_iMin]);
			
				return PLUGIN_HANDLED;
			}
		}
	}
	
	else if(g_aCommands[iCommand][cd_iType] == TYPE_FLOAT)
	{	
		if(szMessage[0] == EOS)
			fNum = float(g_aCommands[iCommand][cd_iMin]);
			
		else
		{
			fNum = str_to_float(szMessage);
			
			
			if(fNum > g_aCommands[iCommand][cd_iMax])
			{
				fNum = float(g_aCommands[iCommand][cd_iMax]);
				
				//client_print_color(iIndex,print_team_default,"^4[%s] ^1The maximum value of the command is ^4%.2f^1.",PREFIX,float(g_aCommands[iCommand][cd_iMax]));
			
				//return PLUGIN_HANDLED;
			}
			
			else if(fNum < g_aCommands[iCommand][cd_iMin])
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1The minimum value of the command is ^4%.2f^1.",PREFIX,float(g_aCommands[iCommand][cd_iMin]));
			
				return PLUGIN_HANDLED;
			}
		}
	}
	
	switch(iCommand)
	{
		case CMD_RESTART_ROUND:
		{
			server_cmd("sv_restart %d",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have ^3restarted ^1the round.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has ^3restarted ^1the round.",PREFIX,szName);
			}
		}
		
		case CMD_RESTART_SERVER:
		{
			
			server_cmd("restart");
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have ^3restarted ^1the server.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has ^3restarted ^1the server.",PREFIX,szName);
			}
		}
		
		case CMD_ROUND_TIME:
		{
			set_cvar_float("mp_roundtime",fNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3round time ^1to ^4%.2f^1 minute%s.",PREFIX,fNum, fNum == 1.0 ? "" : "s");
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3round time ^1to ^4%.2f^1 minute%s.",PREFIX,szName,fNum, fNum == 1.0 ? "" : "s"	);
			}
		}
		
		case CMD_FREEZE_TIME:
		{
			set_cvar_num("mp_freezetime",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3freeze time ^1to ^4%d^1 second%s.",PREFIX,iNum,iNum == 1 ? "" : "s");
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3freeze time ^1to ^4%d^1 second%s.",PREFIX,szName,iNum,iNum == 1 ? "" : "s");
			}
		}
		
		case CMD_AIR_ACCELERATE:
		{
			set_cvar_num("sv_airaccelerate",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3air accelerate ^1to ^4%d^1.",PREFIX,iNum);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3air accelerate ^1to ^4%d^1.",PREFIX,szName,iNum);
			}
		}
		
		case CMD_FRIENDLY_FIRE:
		{
			set_cvar_num("mp_friendlyfire",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have ^4%s ^3friendly fire^1.",PREFIX,iNum ? "activated" : "deactivated");
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has ^4%s ^3friendly fire^1.",PREFIX,szName,iNum ? "activated" : "deactivated");
			}
		}
		
		case CMD_GRAVITY:
		{
			set_cvar_num("sv_gravity",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3gravity ^1to ^4%d^1.",PREFIX,iNum);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3gravity ^1to ^4%d^1.",PREFIX,szName,iNum);
			}
		}
		
		case CMD_PASSWORD:
		{
			set_cvar_string("sv_password",szMessage);
			
			if(strlen(szMessage))
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3server password ^1to ^4%s^1.",PREFIX,szMessage);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3server password^1.",PREFIX,szName);
				}
			}
			
			else
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have removed ^3server password^1.",PREFIX);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has removed ^3server password^1.",PREFIX);
				}
			}
				
		}
		
		case CMD_ALLTALK:
		{
			set_cvar_num("sv_alltalk",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have ^4%s ^3all talk^1.",PREFIX,iNum ? "activated" : "deactivated");
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has ^4%s ^3all talk^1.",PREFIX,szName,iNum ? "activated" : "deactivated");
			}
		}
		
		case CMD_BUY_TIME:
		{
			set_cvar_num("mp_buytime",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3buy time ^1to ^4%d^1 second%s.",PREFIX,iNum,iNum == 1 ? "" : "s");
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3buy time ^1to ^4%d^1 second%s.",PREFIX,szName,iNum,iNum == 1 ? "" : "s");
			}
		}
		
		case CMD_START_MONEY:
		{
			set_cvar_num("mp_startmoney",iNum);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3start money ^1to ^4%d^1.",PREFIX,iNum);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3start money ^1to ^4%d^1.",PREFIX,szName,iNum);
			}
		}
		
		case CMD_MAP_CHANGE:
		{
			strtolower(szMessage);
			
			new szMap[64];
			formatex(szMap,charsmax(szMap),"maps/%s.bsp",szMessage);
			
			if(!file_exists(szMap))
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid map.",PREFIX);
				
				return PLUGIN_HANDLED;
			}
			
			server_cmd("amx_map %s",szMessage);
			
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have changed ^3map's server ^1to ^4%s^1.",PREFIX,szMessage);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has changed ^3map's server ^1to ^4%s^1.",PREFIX,szName,szMessage);
			}
		}
		
		case CMD_SLAP_MENU:
		{
			client_cmd(iIndex,"amx_slapmenu");
		
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have opened ^3Slap Menu^1.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has opened ^3Slap Menu^1.",PREFIX,szName);
			}
		}
		
		case CMD_TEAM_MENU:
		{
			client_cmd(iIndex,"amx_teammenu");
		
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have opened ^3Team Menu^1.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has opened ^3Team Menu^1.",PREFIX,szName);
			}
		}
		
		case CMD_KICK_MENU:
		{
			client_cmd(iIndex,"amx_kickmenu");
		
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have opened ^3Kick Menu^1.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has opened ^3Kick Menu^1.",PREFIX,szName);
			}
		}
		
		case CMD_AMXX_MENU:
		{
			client_cmd(iIndex,"amxmodmenu");
		
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have opened ^3Amx Menu^1.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has opened ^3Amx Menu^1.",PREFIX,szName);
			}
		}
		
		case CMD_BAN_MENU:
		{
			client_cmd(iIndex,"amx_banmenu");
		
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have opened ^3Ban Menu^1.",PREFIX);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has opened ^3Ban Menu^1.",PREFIX,szName);
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

public cmd_PlayerCommand(const iIndex, const iCommand, szMessage[128], const szName[MAX_NAME_LENGTH + 16])
{
	static iTarget,szTarget[MAX_NAME_LENGTH + 16];
	
	argbreak(szMessage,szTarget,charsmax(szTarget),szMessage,charsmax(szMessage));
	
	iTarget = 0;
	
	if(szTarget[0] == '@')
	{	
		if(equali(szTarget[1],"t"))
			iTarget = MAX_PLAYERS + 1;
		
		else if(equali(szTarget[1],"ct"))
			iTarget = MAX_PLAYERS + 2;
		
		else if(equali(szTarget[1],"all"))
			iTarget = MAX_PLAYERS + 3;
	}
	
	if(!iTarget)
	{
		new iPlayer[2];
		
		iPlayer[0] = find_player("bl",szTarget);
		iPlayer[1] = find_player("blj",szTarget);
		
		if(iPlayer[0] != iPlayer[1])
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1There are more than ^41 ^1player with that name.",PREFIX);
			
			return PLUGIN_HANDLED;
		}
		
		else if(!iPlayer[0])
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1The target ^3%s ^1cannot be found.",PREFIX,szTarget);
			
			return PLUGIN_HANDLED;
		}
		
		else if(g_aCommands[iCommand][cd_iType] == TYPE_ALIVE && !is_user_alive(iPlayer[0]))
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1This command can be used just on alive person.",PREFIX);
			
			return PLUGIN_HANDLED;
		}
		
		else if(!(get_user_access(iIndex) > get_user_access(iPlayer[0])) && iIndex != iPlayer[0])
		{
			new szTarget[MAX_NAME_LENGTH];
			get_user_name(iPlayer[0],szTarget,charsmax(szTarget));
			
			client_print_color(iIndex,print_team_default,"^4[%s] ^3%s ^1access is higher than your access.",PREFIX,szTarget);
			
			return PLUGIN_HANDLED;
		}
		
		iTarget = iPlayer[0];
	}
	
	static szFlags[8],iPlayers[MAX_PLAYERS],iNum,szAmount[8],iAmount;
	
	if(iTarget > MAX_PLAYERS)
	{
		static const szTeams[][] = {"TERRORIST", "CT", ""};
		static const szTargets[][] = {"all terrorists","all counter-terrorists","all players"};
		
		copy(szTarget,charsmax(szTarget),szTargets[iTarget - (MAX_PLAYERS + 1)]);
		
		formatex(szFlags,charsmax(szFlags),"ch");
		
		if(g_aCommands[iCommand][cd_iType] == TYPE_ALIVE)
			add(szFlags,charsmax(szFlags),"a");
		
		if(iTarget > MAX_PLAYERS + 2)
			get_players(iPlayers,iNum,szFlags);
			
		else
		{
			add(szFlags,charsmax(szFlags),"e");
			get_players(iPlayers,iNum,szFlags,szTeams[iTarget - (MAX_PLAYERS + 1)]);
		}
	}
	else
	{
		get_user_name(iTarget,szTarget,charsmax(szTarget));
		format(szTarget,charsmax(szTarget),"^1the player ^3%s",szTarget);
	}
	
	trim(szMessage);
	
	if(iCommand != CMD_KICK)
		argbreak(szMessage,szAmount,charsmax(szAmount),szMessage,charsmax(szMessage));
	
	if(szAmount[0] == EOS)
		iAmount = g_aCommands[iCommand][cd_iMin];
		
	else if(!is_str_num(szAmount) && iCommand != CMD_GLOW)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid value.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	else if(iCommand == CMD_GLOW)
	{
		iAmount = cmd_ValidColor(szAmount);
		
		if(iAmount == -1)
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid color.",PREFIX);
			
			return PLUGIN_HANDLED;
		}
	}
	
	else
	{
		if(iCommand != CMD_KICK)
			iAmount = str_to_num(szAmount);
			
		else
			iAmount = 0;
		
		if(iAmount > g_aCommands[iCommand][cd_iMax])
		{
			iAmount = g_aCommands[iCommand][cd_iMax];
			
			//client_print_color(iIndex,print_team_default,"^4[%s] ^1The maximum value of the command is ^4%d^1.",PREFIX,g_aCommands[iCommand][cd_iMax]);
		
			//return PLUGIN_HANDLED;
		}
		
		else if(iAmount < g_aCommands[iCommand][cd_iMin])
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1The minimum value of the command is ^4%d^1.",PREFIX,g_aCommands[iCommand][cd_iMax]);
		
			return PLUGIN_HANDLED;
		}
		
		if(iCommand == CMD_WEAPON && !cmd_GiveKit(0,iAmount))
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid kit number.",PREFIX);
			
			return PLUGIN_HANDLED;
		}
		
	}
	
	if(iTarget <= MAX_PLAYERS)
		cmd_Command(iIndex,iCommand,iTarget,false,iAmount,szMessage);
	
	else
		for(new i; i < iNum; i++)
			cmd_Command(iIndex,iCommand,iPlayers[i],true,iAmount,szMessage);
	
	switch(iCommand)
	{
		case CMD_TERRORIST:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have transfered ^3%s ^1to the ^4terrorists team^1.",PREFIX,szTarget);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has transfered ^3%s ^1to the ^4terrorists team^1.",PREFIX,szName,szTarget);
			}
		}
			
		case CMD_CT:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have transfered ^3%s ^1to the ^4counter-terrorists team^1.",PREFIX,szTarget);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has transfered ^3%s ^1to the ^4counter-terrorists team^1.",PREFIX,szName,szTarget);
			}
		}
		
		case CMD_SPECTATOR:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have transfered ^3%s ^1to the ^4spectators team^1.",PREFIX,szTarget);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has transfered ^3%s ^1to the ^4spectators team^1.",PREFIX,szName,szTarget);
			}
		}
		
		
		case CMD_SLAY:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have slain ^3%s^1.",PREFIX,szTarget);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has slain ^3%s^1.",PREFIX,szName,szTarget);
			}
		}
		
		case CMD_SLAP:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have slapped ^3%s ^1with ^4%d ^1damage.",PREFIX,szTarget,iAmount);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has slapped ^3%s ^1with ^4%d ^1damage.",PREFIX,szName,szTarget,iAmount);
			}
		}
		
		case CMD_UBERSLAP:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have uberslapped ^3%s ^4%d ^1times with ^4%d ^1damage.",PREFIX,szTarget,iAmount,str_to_num(szMessage));
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has uberslapped ^3%s ^4%d ^1times with ^4%d ^1damage.",PREFIX,szName,szTarget,iAmount,str_to_num(szMessage));
			}
		}
		
		case CMD_GLOW:
		{
			if(iAmount)
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3%s^1's ^1glow as ^4%s^1.",PREFIX,szTarget,g_aColors[iAmount][cd_szColor]);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3%s^1's ^1glow as ^4%s^1.",PREFIX,szName,szTarget,g_aColors[iAmount][cd_szColor]);
				}
			}
			
			else
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have removed ^3%s^1's ^1glow.",PREFIX,szTarget);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has removed ^3%s^1's ^1glow.",PREFIX,szName,szTarget);
				}
			}
		}
			
		case CMD_HEALTH:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3%s^1's health to ^4%d^1.",PREFIX,szTarget,iAmount);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3%s^1's health to ^4%d^1.",PREFIX,szName,szTarget,iAmount);
			}
		}
		
		case CMD_NOCLIP:
		{
			if(iAmount)
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3%s^1's noclip for ^4%d ^1second%s.",PREFIX,szTarget,iAmount,iAmount == 1 ? "" : "s");
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3%s^1's noclip for ^4%d ^1second%s.",PREFIX,szName,szTarget,iAmount,iAmount == 1 ? "" : "s");
				}
			}
				
			else
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3%s^1's noclip for ^4permanent^1.",PREFIX,szTarget);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3%s^1's noclip for ^4permanent^1.",PREFIX,szName,szTarget);
				}
			}
		}
		
		case CMD_GODMODE:
		{
			if(iAmount)
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3%s^1's godmode for ^4%d ^1second%s.",PREFIX,szTarget,iAmount,iAmount == 1 ? "" : "s");
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3%s^1's godmode for ^4%d ^1second%s.",PREFIX,szName,szTarget,iAmount,iAmount == 1 ? "" : "s");
				}
			}
				
			else
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have set ^3%s^1's godmode for ^4permanent^1.",PREFIX,szName,szTarget);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has set ^3%s^1's godmode for ^4permanent^1.",PREFIX,szName,szTarget);
				}
			}
		}
		
		case CMD_WEAPON:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have given to ^3%s ^1weapon kit ^4#%d^1.",PREFIX,szTarget,iAmount);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has given to ^3%s ^1weapon kit ^4#%d^1.",PREFIX,szName,szTarget,iAmount);
			}
		}
		
		case CMD_FLASH:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have flashed ^3%s^1.",PREFIX,szTarget);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has flashed ^3%s^1.",PREFIX,szName,szTarget);
			}
		}
		
		case CMD_STRIP:
		{
			for(new i = 1; i <= MaxClients; i++)
			{
				if(!is_user_connected(i))
					continue;
				
				else if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have stripped ^3%s^1's weapons.",PREFIX,szTarget);
					
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has stripped ^3%s^1's weapons.",PREFIX,szName,szTarget);
			}
		}
		
		case CMD_FREEZE:
		{
			if(iAmount)
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have frozen ^3%s^1 for ^4%d ^1second%s.",PREFIX,szTarget,iAmount,iAmount == 1 ? "" : "s");
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has frozen ^3%s^1 for ^4%d ^1second%s.",PREFIX,szName,szTarget,iAmount,iAmount == 1 ? "" : "s");
				}
			}
				
			else
			{
				for(new i = 1; i <= MaxClients; i++)
				{
					if(!is_user_connected(i))
						continue;
					
					else if(i == iIndex)
						client_print_color(i,print_team_default,"^4[%s] ^1You have frozen ^3%s^1 for ^4permanent^1.",PREFIX,szTarget);
						
					else
						client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has frozen ^3%s^1 for ^4permanent^1.",PREFIX,szName,szTarget);
				}
			}
		}
	}
	
	return PLUGIN_HANDLED;
}


public cmd_unPower(const iTaskID)
{
	new iInfo[2];
	
	iInfo = cmd_unTaskID(iTaskID);
	
	new const szPowers[eTasks][] = {"","noclip","godmode","frozen"};
	
	switch(iInfo[1])
	{
		case TASK_FREEZE:
		{
			new iFlags = entity_get_int(iInfo[0],EV_INT_flags);
			
			entity_set_int(iInfo[0],EV_INT_flags,iFlags & ~FL_FROZEN);
		}
		
		case TASK_GODMODE:
			set_user_godmode(iInfo[0]);
		
		case TASK_NOCLIP:
			set_user_noclip(iInfo[0]);
	}
	
	new szTarget[MAX_NAME_LENGTH];
	get_user_name(iInfo[0],szTarget,charsmax(szTarget));
	
	for(new i = 1; i <= MaxClients; i++)
	{
		if(!is_user_connected(i))
			continue;
		
		else if(i == iInfo[0])
			client_print_color(i,print_team_default,"^4[%s] ^1Your %s has been expired.",PREFIX,szPowers[iInfo[1]]);
			
		else
			client_print_color(i,print_team_default,"^4[%s] ^3%s^1's %s has been expired.",PREFIX,szTarget,szPowers[iInfo[1]]);
	}
}

public cmd_Slap(const szDamage[8], const iIndex)
{
	new iDamage = str_to_num(szDamage);
	new iHealth = get_user_health(iIndex);
	
	if(iHealth > 1)
		if(iHealth <= iDamage)
			user_slap(iIndex,iHealth - 1);
		else
			user_slap(iIndex,iDamage);
	else
		user_slap(iIndex,0);
}
	

//Forwards

public ham_Spawn(const iIndex)
{
	if(is_user_alive(iIndex))
		set_user_rendering(iIndex);
}

public ham_TakeDamage_Post(const iVictim, const iInflictor, const iAttacker, Float: flDamage, const iDamageBits) {
	if(get_user_team(iVictim) == get_user_team(iAttacker) && !get_pcvar_num(g_pFriendlyFire) || /*iVictim == iAttacker ||*/ !iAttacker || iAttacker > MaxClients || !is_user_connected(iVictim) || get_user_godmode(iVictim)) {
		return HAM_IGNORED;
	}
	
	if(get_user_team(iVictim) == get_user_team(iAttacker) && get_pcvar_num(g_pFriendlyFire))
		flDamage /= 3.0;
	
	if(get_gametime() - g_flTime[iVictim - 1][iAttacker - 1] >= TIMEDELAY_RESET) {
		g_iDamage[iVictim - 1][iAttacker - 1] = 0;
	}

	g_flTime[iVictim - 1][iAttacker - 1] = get_gametime();
	
	g_iDamage[iVictim - 1][iAttacker - 1] += floatround(flDamage);
		
	if(g_iDamage[iVictim - 1][iAttacker - 1] >= 1) {
		for(new i = 1; i <= MaxClients; i++) {
			if(is_user_alive(i) || i == iVictim || i == iAttacker) {
				continue;
			}
				
			if(entity_get_int(i, EV_INT_iuser2) == iVictim) {
				set_hudmessage(255, 0, 0, 0.45, 0.55, 0, 0.0, 1.5, .channel=TAKEDAMAGE_CHANNEL);
				show_hudmessage(i, "%i", g_iDamage[iVictim - 1][iAttacker - 1]);
			}
			
			if(entity_get_int(i, EV_INT_iuser2) == iAttacker) {
				set_hudmessage(0, 127, 255, 0.55, 0.45, 0, 0.0, 1.5, .channel=DEALDAMAGE_CHANNEL);
				show_hudmessage(i, "%i", g_iDamage[iVictim - 1][iAttacker - 1]);
			}
		}
		
		set_hudmessage(255, 0, 0, 0.45, 0.55, 0, 0.0, 1.5, .channel=TAKEDAMAGE_CHANNEL);
		show_hudmessage(iVictim, "%i", g_iDamage[iVictim - 1][iAttacker - 1]);
		
		set_hudmessage(0, 127, 255, 0.55, 0.45, 0, 0.0, 1.5, .channel=DEALDAMAGE_CHANNEL);
		show_hudmessage(iAttacker, "%i", g_iDamage[iVictim - 1][iAttacker - 1]);
	}
	return HAM_IGNORED;
}

stock cmd_Command(const iIndex, const iCommand,const iTarget,const bool:bTeam,const iValue,szMessage[128])
{
	switch(iCommand)
	{
		case CMD_TERRORIST:
		{
			if(bTeam && (!is_user_alive(iTarget) || cs_get_user_team(iTarget) != CS_TEAM_T) || !bTeam)
			{
				if(cs_get_user_team(iTarget) != CS_TEAM_T)
					cs_set_user_team(iTarget,CS_TEAM_T);
					
				spawn(iTarget);
			}
		}
		
		case CMD_CT:
		{
			if(bTeam && (!is_user_alive(iTarget) || cs_get_user_team(iTarget) != CS_TEAM_CT) || !bTeam)
			{
				if(cs_get_user_team(iTarget) != CS_TEAM_CT)
					cs_set_user_team(iTarget,CS_TEAM_CT);
					
				spawn(iTarget);
			}
		}
		
		case CMD_SPECTATOR:
		{
			cs_set_user_team(iTarget,CS_TEAM_SPECTATOR);
			user_kill(iTarget);
		}
		
		case CMD_KICK:
		{
			new szTarget[MAX_NAME_LENGTH];
			get_user_name(iTarget,szTarget,charsmax(szTarget));
			
			client_cmd(iIndex,"amx_kick ^"%s^" ^"%s^"",szTarget,szMessage);
		}
		
		case CMD_SLAY:
		{
			new szTarget[MAX_NAME_LENGTH];
			get_user_name(iTarget,szTarget,charsmax(szTarget));
			user_kill(iTarget);
			//client_cmd(iIndex,"amx_slay ^"%s^" %d",szTarget,iValue);
		}
		
		case CMD_SLAP:
		{
			new szTarget[MAX_NAME_LENGTH];
			get_user_name(iTarget,szTarget,charsmax(szTarget));
			
			user_slap(iTarget,iValue);
			//client_cmd(iIndex,"amx_slap ^"%s^"",szTarget);
		}
		
		case CMD_UBERSLAP:
			set_task(0.2,"cmd_Slap",iTarget,szMessage,charsmax(szMessage),"a",iValue);
		
		case CMD_GLOW:
			set_user_rendering(iTarget,kRenderFxGlowShell,g_aColors[iValue][cd_iColors][0],g_aColors[iValue][cd_iColors][1],g_aColors[iValue][cd_iColors][2],kRenderNormal,16);
			
		case CMD_HEALTH:
			set_user_health(iTarget,iValue);
		
		case CMD_BAN:
		{
			new szTime[8];
			
			argbreak(szMessage,szTime,charsmax(szTime),szMessage,charsmax(szMessage));
			
			client_cmd(iIndex,"amx_kick #%d %s ^"%s^"",get_user_userid(iTarget),szTime,szMessage);
		}
		
		case CMD_NOCLIP:
		{			
			if(task_exists(cmd_TaskID(iTarget,TASK_NOCLIP)))
				remove_task(cmd_TaskID(iTarget,TASK_NOCLIP));
				
			if(iValue)
			{
				set_user_noclip(iTarget,1);
				set_task(float(iValue),"cmd_unPower",cmd_TaskID(iTarget,TASK_NOCLIP));
			}
			
			else
				set_user_noclip(iTarget,1);
		}
		
		case CMD_GODMODE:
		{
			if(task_exists(cmd_TaskID(iTarget,TASK_GODMODE)))
				remove_task(cmd_TaskID(iTarget,TASK_GODMODE));
				
			if(iValue)
			{
				set_user_godmode(iTarget,1);
				set_task(float(iValue),"cmd_unPower",cmd_TaskID(iTarget,TASK_GODMODE));
			}
			
			else
				set_user_godmode(iTarget,1);		}
		
		case CMD_WEAPON:
			cmd_GiveKit(iTarget,iValue);
		
		case CMD_FLASH:
			cmd_Flash(iTarget);
		
		case CMD_STRIP:
			strip_user_weapons(iTarget);
		
		case CMD_FREEZE:
		{
			new iFlags = entity_get_int(iTarget,EV_INT_flags);
			
			if(iValue)
			{
				entity_set_int(iTarget,EV_INT_flags,iFlags | FL_FROZEN);
				set_task(float(iValue),"cmd_unPower",cmd_TaskID(iTarget,TASK_FREEZE));
			}
			
			else
			{
				entity_set_int(iTarget,EV_INT_flags,iFlags | FL_FROZEN);
				
				if(task_exists(cmd_TaskID(iTarget,TASK_FREEZE)))
					remove_task(cmd_TaskID(iTarget,TASK_FREEZE));
			}
		}
	}
	
	return true;
}

stock cmd_GiveKit(const iIndex, const iKit)
{
	switch(iKit)
	{
		case 1:
			cmd_GiveItem(iIndex,WEAPON_KNIFE);
		
		case 11:
			cmd_GiveItem(iIndex,WEAPON_GLOCK18);
		
		case 12:
			cmd_GiveItem(iIndex,WEAPON_USP);
		
		case 13:
			cmd_GiveItem(iIndex,WEAPON_P228);
		
		case 14:
			cmd_GiveItem(iIndex,WEAPON_DEAGLE);
		
		case 15:
			cmd_GiveItem(iIndex,WEAPON_FIVESEVEN);
		
		case 16:
			cmd_GiveItem(iIndex,WEAPON_ELITE);
		
		case 21:
			cmd_GiveItem(iIndex,WEAPON_M3);
		
		case 22:
			cmd_GiveItem(iIndex,WEAPON_XM1014);
		
		case 31:
			cmd_GiveItem(iIndex,WEAPON_TMP);
		
		case 32:
			cmd_GiveItem(iIndex,WEAPON_MAC10);
		
		case 33:
			cmd_GiveItem(iIndex,WEAPON_MP5NAVY);
		
		case 34:
			cmd_GiveItem(iIndex,WEAPON_P90);
		
		case 35:
			cmd_GiveItem(iIndex,WEAPON_UMP45);
	
		case 40:
			cmd_GiveItem(iIndex,WEAPON_FAMAS);
		
		case 41:
			cmd_GiveItem(iIndex,WEAPON_GALIL);
		
		case 42:
			cmd_GiveItem(iIndex,WEAPON_AK47);
		
		case 43:
			cmd_GiveItem(iIndex,WEAPON_M4A1);
		
		case 44:
			cmd_GiveItem(iIndex,WEAPON_SG552);
		
		case 45:
			cmd_GiveItem(iIndex,WEAPON_AUG);
		
		case 46:
			cmd_GiveItem(iIndex,WEAPON_SCOUT);
		
		case 47:
			cmd_GiveItem(iIndex,WEAPON_SG550);
		
		case 48:
			cmd_GiveItem(iIndex,WEAPON_AWP);
		
		case 49:
			cmd_GiveItem(iIndex,WEAPON_G3SG1);
		
		case 51:
			cmd_GiveItem(iIndex,WEAPON_M249);
		
		case 60:
		{
			cmd_GiveItem(iIndex,WEAPON_SHIELD);
			cmd_GiveItem(iIndex,WEAPON_GLOCK18);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		}
		
		case 61:
		{
			cmd_GiveItem(iIndex,WEAPON_SHIELD);
			cmd_GiveItem(iIndex,WEAPON_USP);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		}
		
		case 62:
		{
			cmd_GiveItem(iIndex,WEAPON_SHIELD);
			cmd_GiveItem(iIndex,WEAPON_P228);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		}
		
		case 63:
		{
			cmd_GiveItem(iIndex,WEAPON_SHIELD);
			cmd_GiveItem(iIndex,WEAPON_DEAGLE);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		}
		
		case 64:
		{
			cmd_GiveItem(iIndex,WEAPON_SHIELD);
			cmd_GiveItem(iIndex,WEAPON_FIVESEVEN);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		}
		
		case 81:
			cmd_GiveItem(iIndex,ITEM_KEVLAR);
		
		case 82:
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		
		case 83:
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
		
		case 84:
		{
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
		}
		
		case 85:
			cmd_GiveItem(iIndex,WEAPON_SMOKEGRENADE);
		
		case 86:
			cmd_GiveItem(iIndex,ITEM_THIGHPACK);
		
		case 87:
			cmd_GiveItem(iIndex,WEAPON_SHIELD);
		
		case 89:
		{
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_SMOKEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
		}
		
		case 91:
			cmd_GiveItem(iIndex,WEAPON_C4);

		case 100:
		{
			cmd_GiveItem(iIndex,WEAPON_AWP);
			cmd_GiveItem(iIndex,WEAPON_DEAGLE);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_SMOKEGRENADE);
			cmd_GiveItem(iIndex,ITEM_ASSAULTSUIT);
		}
		
		case 200:
		{
			cmd_GiveItem(iIndex,WEAPON_USP);
			cmd_GiveItem(iIndex,WEAPON_GLOCK18);
			cmd_GiveItem(iIndex,WEAPON_DEAGLE);
			cmd_GiveItem(iIndex,WEAPON_P228);
			cmd_GiveItem(iIndex,WEAPON_ELITE);
			cmd_GiveItem(iIndex,WEAPON_FIVESEVEN);
			cmd_GiveItem(iIndex,WEAPON_M3);
			cmd_GiveItem(iIndex,WEAPON_XM1014);
			cmd_GiveItem(iIndex,WEAPON_TMP);
			cmd_GiveItem(iIndex,WEAPON_MAC10);
			cmd_GiveItem(iIndex,WEAPON_MP5NAVY);
			cmd_GiveItem(iIndex,WEAPON_P90);
			cmd_GiveItem(iIndex,WEAPON_UMP45);
			cmd_GiveItem(iIndex,WEAPON_FAMAS);
			cmd_GiveItem(iIndex,WEAPON_GALIL);
			cmd_GiveItem(iIndex,WEAPON_AK47);
			cmd_GiveItem(iIndex,WEAPON_M4A1);
			cmd_GiveItem(iIndex,WEAPON_SG552);
			cmd_GiveItem(iIndex,WEAPON_AUG);
			cmd_GiveItem(iIndex,WEAPON_SCOUT);
			cmd_GiveItem(iIndex,WEAPON_SG550);
			cmd_GiveItem(iIndex,WEAPON_AWP);
 			cmd_GiveItem(iIndex,WEAPON_G3SG1);
			cmd_GiveItem(iIndex,WEAPON_M249);
			cmd_GiveItem(iIndex,WEAPON_HEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_SMOKEGRENADE);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
			cmd_GiveItem(iIndex,WEAPON_FLASHBANG);
		}
	
		default:
			return false; // kit does not exists
	}
	
	return true; // kit exists
}

stock cmd_ValidColor(const szColor[])
{
	for(new 	i; i < sizeof g_aColors; i++)
	{
		if(equali(szColor,g_aColors[i][cd_szColor]))
			return i;
	}
	
	return -1;
}

stock cmd_GiveItem(const iIndex, const iItem)
{
	if(iIndex == 0)
		return;
	
	give_item(iIndex,g_aWeapons[iItem][wd_szName]);
	
	if(g_aWeapons[iItem][wd_iAmmo] != CSW_NONE)
		cs_set_user_bpammo(iIndex,g_aWeapons[iItem][wd_iAmmo],999);
}

stock cmd_unTaskID(const iTaskID)
{
	new iValue[2];
	
	iValue[0] = iTaskID % 100;
	iValue[1] = iTaskID / 100;
	
	return iValue;
}

stock cmd_Flash(const iIndex)
{
	message_begin(MSG_ONE,g_iMsgScreenFade,.player = iIndex);
	write_short(1<<15);
	write_short(1<<10);
	write_short(1<<12);
	write_byte(255); // Red
	write_byte(255); // Green
	write_byte(255); // Blue
	write_byte(255); // Alpha
	message_end();
}


