/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fvault>
#include <hamsandwich>
#include <engine>
#include <fun>
#include <cstrike>
#include <fakemeta_util>

#define KnivesAmount 21
#define Premium_KnivesAmount 3
#define ItemsAmount 13

#define AMMOBOX_CLASSNAME "ammo_box"
#define TASK_TAKING_BOX 10314

#define TAG "eTs"
#define Chat_TAG "eTs"
#define s_IP "31.168.169.42:40800"

#define Year_Expired 2018
#define Month_Expired 1

#define NC_Task 12178
#define Dance_Task 10243
#define Msg_Task 11223
#define CurTask 10224
#define Heal_Task1 40222


#define SaveType 0 // 0 = STEAMID , 1 = IP, 2 = STEAMID + IP

native get_user_tickets(index)
native set_user_tickets(index,amount)
native get_user_level(index)
native get_user_gangid(index)
native get_run_day()
native get_lr_run()
native is_user_premium(index)
native set_user_gang_colormodel(index)
native get_user_gang_heal(index)
native get_user_gang_health(index)
native Float:get_user_gang_damage(index)
native Float:get_user_gang_bonuscash(index)
native Float:get_user_gang_dropchance(index)
native get_user_gang_getcash(index)

new PremiumKnives = KnivesAmount +1 -Premium_KnivesAmount;

//BANK
new Float:g_NpcXYZ[ 33 ] [ 3 ];
new bool:g_connected[ 33 ];
//

enum _:ItemData
{
	Name2[80],
	Price2
}

new ItemsToShop[ItemsAmount][ItemData] =
{
	//Health Menu
	{"\w+10 \dHealth \r- 7000",7000},
	{"\w+20 \dHealth \r- 10500",10500},
	{"\w+30 \dHealth \r- 14000",14000},
	{"\w+40 \dHealth \r- 17500",17500},
	{"\w+50 \dHealth \r- 20000",20000},
	//Armor Menu
	{"\w+10 \dArmor \r- 7000",7000},
	{"\w+20 \dArmor \r- 10500",10500},
	{"\w+30 \dArmor \r- 14000",14000},
	{"\w+40 \dArmor \r- 17500",17500},
	{"\w+50 \dArmor \r- 20000",20000},
	//Grenades Menu
	{"\wHe \dGrenade \r- 8000",8000},
	{"\wFlashbang \dGrenade \r- 3000",3000},
	{"\wSmoke \dGrenade \r- 3000",3000}
}
//

enum _: PlayerData
{
	Cash,
	Bank,
	uKnife,
	lKnife,
	Tickets,
	nCash,
	Wood,
	Steel,
	Iron,
	Leather,
	Gold,
	Diamond,
	GambleMode,
	pName[32],
	pSteamID[35],
	pIP[30]
}

/*
enum _: sPlayerData
{	
	pName[35],
	pSTEAMID[35],
	pIP[35],
}*/

enum _: TopOptions
{
	tCash,
	tKnife,
	tMaterials
}
/*
enum _: ArrData
{
	a_Cash,
	a_Bank,
	a_uKnife,
	a_lKnife,
	a_Tickets,
	a_nCash,
	a_Wood,
	a_Steel,
	a_Iron,
	a_Leather,
	a_Gold,
	a_Diamond,
	a_pIP[30],
	a_pSTEAMID[35],
	a_pName[32],
}*/

new Array:ArrPlayers;

enum _: KnifeData
{
	Name[30],
	Price,
	bHealth,
	bDamage[8],
	bCash[8],
	bSlag[8],
	mWood,
	mSteel,
	mIron,
	mLeather,
	mGold,
	mDiamond,
	bsSlag[8],
	LevelReq
}
enum _: GambleLimitData
{
	Gambles,
	WinGambles,
	LoseGambles,
	CashGambles,
	WinCashGambles,
	LoseCashGambles
}
new KnivesList[KnivesAmount][KnifeData] =
{
	 {"Hands",   		12500, 0, "0.00",  "0.00",  "1.00",  		0,0,0,0,0,0,  "0.00",0},
	 {"Bayonet Knife",  	22500, 1, "2.50",  "3.50",  "4.00",  		2,1,1,1,0,0,  "0.00",2},
	 {"Karambit",  		32000, 3, "5.00",  "7.00",  "8.00",  		4,2,2,2,0,0,  "0.00",3},
	 {"Long Sword",  	59500, 4, "7.50",  "10.50", "12.00", 		6,3,1,0,2,0,  "1.00",5},
	 {"Dual Sword",   	70000, 6, "10.00", "14.00", "16.00", 		8,4,1,6,4,6,  "1.00",6},
	 {"Boxing Knife",   	90000, 8, "12.50", "17.50", "20.00", 		10,5,6,4,1,8,  "1.00",7},
	 {"Hammer",	  	105000, 10, "15.00", "21.00", "24.00", 		12,6,4,2,8,2,  "2.00",8},
	 // 7 ^^
	 {"Shadow Knife",   	115000, 11, "17.50", "24.50", "28.00", 		14,7,7,3,3,1,  "2.00",9},
	 {"Axe", 	 	140000, 13, "20.00", "28.00", "32.00", 		16,8,8,5,8,4,  "2.00",10},
	 {"Machete",   		165000, 14, "22.50", "31.50", "36.00", 		18,9,6,1,6,0,  "3.00",12},
	 {"Hokey Knife", 	190000, 16, "25.00", "35.00", "40.00", 		20,10,9,4,12,2,  "3.00",14},
	 {"Cyborg",  		240000, 18, "27.50", "38.50", "44.00", 		22,34,34,4,16,5,  "3.00",16},
	 {"Invisible Knife",  	270000, 20, "30.00", "42.00", "48.00", 		24,12,9,1,2,11,  "4.00",17},
	 {"Steel Hammer",  	365000, 21, "32.50", "45.50", "52.00", 		26,13,12,7,0,3,  "4.00",18},
	 // 14 ^^
	 {"Dangerous Knife",  	410000, 23, "35.00", "49.00", "56.00", 		28,14,13,9,4,0,  "4.00",19},
	 {"Sickle Knife",   	460000, 24, "37.50", "52.50", "60.00", 		30,15,2,12,11,12,  "5.00",21},
	 {"Butterfly Knife",  	525000, 26, "40.00", "56.00", "64.00", 		32,16,16,10,6,0, "5.00",22},
	 {"Wolverine",  		600000, 28, "42.50", "59.50", "68.00", 		34,17,15,15,4,3, "5.00",24},
	 {"Critical Knife",   	710000, 30, "45.00", "63.00", "72.00", 		36,18,16,16,14,0, "6.00",26},
	 {"Holy Knife",  	855000, 31, "47.50", "66.50", "76.00", 		38,19,18,16,0,14, "6.00",27},
	 {"Blood Wolverine", 	1000000, 33, "50.00", "70.00", "80.00",		40,20,13,17,5,7, "6.00",28}
	 /*// 21 ^^
	 {"Ninja Knife",  	1250000,34, "52.50", "73.50", "84.00", 		41,22,12,19,0,9, "7.00",30},
	 {"Red Light Syber",     1550000,36, "55.00", "77.00", "88.00", 		42,24,15,15,4,2, "7.00",31},
	 {"Fire Axe Knife",   	1900000,38, "57.50", "80.50", "92.00", 		43,24,17,19,0,7, "7.00",32},
	 {"Mini Machete",   	2300000,40, "60.00", "84.00", "96.00", 		44,26,10,22,8,0, "8.00",33},
	 {"Neo Knife",   	2900000,41, "62.50", "87.50", "100.00", 		45,25,12,20,0,5, "8.00",34},
	 {"Assasian Knife",   	3500000,43, "65.00", "91.00", "104.00", 		46,27,15,16,0,0, "8.00",35},
	 {"Red Ninja Knife",  	4150000,44, "67.50", "94.50", "108.00", 		47,28,16,15,6,7, "9.00",36},
	 // 28 ^^
	 {"Dual Axe Knife",  	4850000,46, "70.00", "98.00", "112.00", 		48,29,10,13,0,11, "9.00",38},
	 {"Murderous Knife",  	5500000,48, "72.50", "101.50", "116.00", 	49,30,13,13,0,16, "9.00",39},
	 {"Pistol Sword",  	7000000,50, "75.00", "105.00", "120.00", 	50,31,34,16,8,13, "10.00",40},
	 {"Critical Long Sword", 8000000,51, "77.50", "108.50", "124.00", 	45,34,18,22,0,20, "10.00",41},
	 {"Expert Knife",	9000000,53, "80.00", "112.00", "128.00", 	40,33,19,20,0,21, "11.00",42},
	 {"Dark Wolverine", 	10000000,54, "82.50", "116.00", "132.00", 	35,34,20,22,13,25, "11.00",43},
	 {"Red Scorpion Knife",	12000000,56, "85.00", "120.00", "136.00", 	30,35,21,17,7,27, "12.00",44}*/
}
new iData[33][PlayerData]/*,isData[33][sPlayerData]*/,ilData[33][GambleLimitData],cForm[33],Choosed[33],bool:InProgress[33],iTop[33];
new InSlagging[33],PlayerChoosed[33],bGetCash[33],MaxPlayers,bool:Dance[33],bool:ShowCash[33],bool:BlackList[33],PremHeal,PlayerHeal;

new szVault [] = "JailBreakDetails"
new szLocation [] = "eTs/JailBreak/"
new szModelName [] = "v_knife"
new szpModelName [] = "p_knives"
new szDanceModelName [] = "v_dance"
new szNextCashName [] = "ncsound.mp3"
new szSB[] = "GiftBox.mdl"

public plugin_init() {
	register_plugin("JB Shop","2.0","MJ")
	
	register_clcmd("say","SayHandler");
	new Year[6],Month[3],year,month,serverIP[20];
	format_time(Year,charsmax(Year),"%Y",get_systime())
	format_time(Month,charsmax(Month),"%m",get_systime())
	year = str_to_num(Year);
	month = str_to_num(Month);
	get_user_ip(0,serverIP,charsmax(serverIP),0);
	if((year > Year_Expired || (year == Year_Expired && month >= Month_Expired)) || (!equali(s_IP,serverIP)))
		set_fail_state("Mod Time has been expired or Your Server IP is not allowed");
	register_concmd("amx_set_knife","kSetCmd");
	register_concmd("amx_se2t_knife","kSetCmd");
	register_concmd("amx_add_material","mAddCmd");
	register_concmd("amx_set_material","mSetCmd");
	register_concmd("amx_se2t_material","mSetCmd");
	register_concmd("amx_add_cash","cAddCmd");
	register_concmd("amx_set_cash","cSetCmd");
	register_concmd("amx_se2t_cash","cSetCmd");
	register_concmd("amx_remove_cash","cRemoveCmd");
	register_concmd("amx_add_bank","bAddCmd");
	register_concmd("amx_set_bank","bSetCmd");
	register_concmd("amx_se2t_bank","bSetCmd");
	register_concmd("amx_remove_bank","bRemoveCmd");
	register_clcmd("gamble","GambleCmd");
	
	
	RegisterHam( Ham_Spawn, "player", "FwdSpawn_Post", 1 );
	RegisterHam(Ham_TakeDamage,"player","pDamage");
	register_event("HLTV","OnNewRound","a", "1=0", "2=0");
	//register_event("DeathMsg", "OnPlayerDead", "a");
	register_event( "CurWeapon", "evCurWeapon", "be", "1=1" );
	
	register_clcmd( "Deposit", "DepositCash" );
	register_clcmd( "Withdraw", "WithdrawCash" );
	register_forward(FM_CmdStart, "OnCmdStart");
	MaxPlayers = get_maxplayers();
	set_task(600.0,"Msg",Msg_Task,_,_,"b");
	set_task(5.0,"HealTask",Heal_Task1,_,_,"b");

	set_task(60.0,"tNextCash",NC_Task,_,_,"b"); 
	ArrPlayers = ArrayCreate(PlayerData);
}

public HealTask(taskid)
{
	SaveAll()
	PremHeal += 5;
	PlayerHeal +=5;
	if(PlayerHeal >= 20)
	{
		PlayerHeal = 0;
		PlayerTask();
	}
	if(PremHeal >= 15)
	{
		PremHeal = 0;
		PremiumTask();
	}
}
public PremiumTask()
{
	for(new i = 1; i <= MaxPlayers; i++)
		if(is_user_alive(i) && is_user_premium(i) && !get_lr_run())
		{
			new MaxHealth = 100 + KnivesList[iData[i][lKnife]][bHealth] + get_user_gang_health(i);
			if(get_run_day() && cs_get_user_team(i) == CS_TEAM_T)
				set_user_gang_colormodel(i)
			if(get_user_health(i) >= MaxHealth)
				continue;
			set_user_health(i,get_user_health(i) + get_user_gang_heal(i))
			if(get_user_health(i) > MaxHealth)
				set_user_health(i,MaxHealth);
		}
}
public PlayerTask()
{
	for(new i = 1; i <= MaxPlayers; i++)
		if(is_user_alive(i) && !is_user_premium(i) && !get_lr_run())
		{
			new MaxHealth = 100 + KnivesList[iData[i][lKnife]][bHealth] + get_user_gang_health(i);
			if(get_run_day() && cs_get_user_team(i) == CS_TEAM_T)
				set_user_gang_colormodel(i)
			if(get_user_health(i) >= MaxHealth)
				continue;
			set_user_health(i,get_user_health(i) + get_user_gang_heal(i))
			if(get_user_health(i) > MaxHealth)
				set_user_health(i,MaxHealth);
		}
}
				


public tNextCash(Task)
{
	for (new i=1; i<=MaxPlayers; i++)
	{
		if(!is_user_connected(i)) 
			continue;
		iData[i][nCash] --;
		if(iData[i][nCash] == 0)
		{
			client_cmd(i,"mp3 stop");  
			client_cmd(i,"play ^"sound/%s%s^"",szLocation,szNextCashName);  
			return ColorChat(i,"^1Its the time for your ^4nextcash after ^3%s ^1minutes.",is_user_premium(i) ? "10" : "15");
		}
		if (iData[i][nCash] < 0)
		{
			iData[i][nCash] = 15;
			if(is_user_premium(i))
				iData[i][nCash] -= 5;
			return ColorChat(i,"You ^1have missed your ^4nextcash^1, the next one will be in ^3%d ^1minutes.",iData[i][nCash]);
		}
	}
	return 1;
}

public SaveAll()
	for(new i = 1; i <=MaxPlayers; i++)
		if(is_user_connected(i))
			CmdSave(i)

public Msg(Task)
{
	//ColorChat(0,"In this server runnig ^3JailBreak Mod ^1by the scripter ^4Mocking Jay ^1(^3MJ^1)");
	ColorChat(0,"^3Server Commands: ^1/lucky^4, ^1/knives^4, ^1/mat^4, ^1/transfermaterials (/tm)^4, ^1/transfertickets (/tt)^4, ^1/event^4");
	ColorChat(0,"^1/lotto^4, ^1//tickets^4, ^1/cash^4, ^1/messages^4, ^1/buyadmin^4, ^1/xp^4, ^1/stat^4, ^1/timeleft");
}
	
public plugin_precache( )
{
	new Info[128];
	
	for (new i; i< KnivesAmount; i++)
	{
		formatex(Info,charsmax(Info),"models/%sKnives/%s%d.mdl",szLocation,szModelName,i);
		if(!file_exists(Info))
		{
			log_amx("^"%s^" is not exists",Info);
			set_fail_state("File Missing");
		}
		precache_model(Info);
	}
	formatex(Info,charsmax(Info),"models/%sKnives/%s.mdl",szLocation,szpModelName);
	if(!file_exists(Info))
	{
		log_amx("^"%s^" is not exists",Info);
		set_fail_state("File Missing");
	}
	precache_model(Info);
	formatex(Info,charsmax(Info),"models/%sKnives/%s.mdl",szLocation,szDanceModelName);
	if(!file_exists(Info))
	{
		log_amx("^"%s^" is not exists",Info);
		set_fail_state("File Missing");
	}
	precache_model(Info);
	formatex(Info,charsmax(Info),"%s%s",szLocation,szNextCashName);
	precache_sound(Info);
	formatex(Info,charsmax(Info),"models/%smaterial/%s",szLocation,szSB);
	if(!file_exists(Info))
	{
		log_amx("^"%s^" is not exists",Info);
		set_fail_state("File Missing");
	}
	engfunc(EngFunc_PrecacheModel,Info);
}
public evCurWeapon3(task)
{
	new id = task - CurTask;
	evCurWeapon(id)
}
	
public evCurWeapon2(id)
	evCurWeapon(id)
public evCurWeapon(id)
{
	if(get_user_weapon(id) == CSW_KNIFE && is_user_alive(id))
	{
		new temp[ 100 ];
		if(Dance[id])
		{
			formatex(temp,charsmax(temp),"models/%sKnives/%s.mdl",szLocation,szDanceModelName);
			set_pev(id,pev_viewmodel2,temp);
		}
		else
		{
			formatex(temp,charsmax(temp),"models/%sKnives/%s%d.mdl",szLocation,szModelName,iData[id][uKnife]);
			set_pev(id,pev_viewmodel2,temp);
			formatex(temp,charsmax(temp),"models/%sKnives/%s.mdl",szLocation,szpModelName);
			entity_set_string(id,EV_SZ_weaponmodel,temp);
		}
		
	}
}
// natives
public plugin_natives()
{
	register_native("get_client_cash","_get_user_cash");
	register_native("set_client_cash","_set_user_cash");
	register_native("get_user_knife","_get_user_knife");
	register_native("set_user_knife","_set_user_knife");
	register_native("get_user_bcash","_get_user_bcash");
	register_native("set_user_bcash","_set_user_bcash");
	register_native("get_user_material","_get_user_material");
	register_native("set_user_material","_set_user_material");
	register_native("create_user_box","_create_user_box");
	register_native("create_box","_create_box");
	register_native("get_user_max_health","_get_user_max_health");
	register_native("make_user_dance","_make_user_dance");
	register_native("add_offline_user_cash","_add_offline_user_cash");
}

public _add_offline_user_cash(plugin,param) 
{
	new aKey[70];
	get_string(1,aKey,charsmax(aKey));
	new Amount = get_param(2);
	log_amx("Key: %s Amount: %d",aKey,Amount); // log emzai
	new szData[1024];
	fvault_get_data(szVault,aKey,szData,charsmax(szData));
	replace_all(szData,charsmax(szData),"#"," ");
	new Data[PlayerData][11];
	parse(szData,Data[Cash],10,Data[Bank],10,Data[uKnife],10,Data[lKnife],10,Data[Tickets],10,Data[nCash],10,Data[Wood],10,
	Data[Steel],10,Data[Iron],10,Data[Leather],10,Data[Gold],10,Data[Diamond],10,Data[GambleMode],10,Data[pName],31,Data[pSteamID],34,Data[pIP],29);
	
	
	new BankCash = str_to_num(Data[Bank]);
	BankCash += Amount;
	formatex(Data[Bank],10,"%d",BankCash);
	
	new szTemp[34];
	szData = "";
	
	for(new i=0;i<=GambleMode;i++)
	{
		formatex(szTemp,charsmax(szTemp),"#%s",Data[i]);
		add(szData,charsmax(szData),szTemp);
	}
	formatex(szTemp,charsmax(szTemp),"#%s",Data[pName]);
	replace_all(szTemp,charsmax(szTemp)," ","$%&");
	add(szData,charsmax(szData),szTemp);
	formatex(szTemp,charsmax(szTemp),"#%s",Data[pSteamID]);
	add(szData,charsmax(szData),szTemp);
	formatex(szTemp,charsmax(szTemp),"#%s",Data[pIP]);
	add(szData,charsmax(szData),szTemp);
	
	fvault_set_data(szVault,aKey,szData);
}

public _make_user_dance(plugim,param)
{
	new index = get_param(1);
	Dancing(index + Dance_Task)
	set_task(15.0,"Dancing",index + Dance_Task);
}

public _get_user_max_health(plugin,param)
{
	new index = get_param(1);
	new MaxHealth = 100;
	MaxHealth += KnivesList[iData[index][lKnife]][bHealth] + get_user_gang_health(index);
	return MaxHealth;
}

public _get_user_cash(plugin,param)
{
	new index = get_param(1	);
	return iData[index][Cash];
}

public _set_user_cash(plugin,param)
{
	new index = get_param(1);
	new Amount = get_param(2);
	iData[index][Cash] = Amount;
}
public _get_user_material(plugin,param)
{
	new index = get_param(1);
	new material = get_param(2);
	return iData[index][Wood-1 + material];
}

public _set_user_material(plugin,param)
{
	new index = get_param(1);
	new material = get_param(2);
	new Amount = get_param(3);
	iData[index][Wood-1 + material] = Amount;
}
public _get_user_knife(plugin,param)
{
	new index = get_param(1);
	return iData[index][lKnife];
}
public _set_user_knife(plugin,param)
{
	new index = get_param(1);
	new Knife = get_param(2);
	iData[index][lKnife] = Knife;
}
public _get_user_bcash(plugin,param)
{
	new index = get_param(1);
	return iData[index][Bank];
}
public _set_user_bcash(plugin,param)
{
	new index = get_param(1);
	new Amount = get_param(2);
	iData[index][Bank] = Amount;
}
public _create_user_box(plugin,param)
{
	new index = get_param(1);
	Createbox(index)
}

public _create_box(plugin,param)
{
	for(new i = 1; i <=MaxPlayers;i++)
		if(is_user_connected(i))
			InProgress[i] = false;
	static Float:origin[3];
	get_array_f(1,origin,3);
	
	arrayset(InProgress,false,33);
	
	new ent = create_entity("info_target");
	origin[2] += 30.0;
	origin[0] += 40.0;
	entity_set_origin(ent, origin);
	
	entity_set_string(ent, EV_SZ_classname, AMMOBOX_CLASSNAME);
	new Info[128];
	formatex(Info,charsmax(Info),"models/%smaterial/%s",szLocation,szSB);
	entity_set_model(ent,Info);
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	
	new Float:maxs[3] = {5.0, 10.0, 10.0};
	new Float:mins[3] = {-5.0, -10.0, -10.0};
	entity_set_size(ent, mins, maxs);
	fm_set_rendering(ent, kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 20);
	
	drop_to_floor(ent);
}

// Saving Connect/Disconnect
public client_connect(id)
{
	CmdLoad(id)
	bGetCash[id] = true;
	ShowCash[id] = true;
	BlackList[id] = false;
	log_amx("%s %s %s",get_name(id),get_auth(id),get_ip(id));
}
public client_disconnect(id)
	CmdSave(id)

public Dancing(DanceID)
{
	new id = DanceID -Dance_Task;
	Dance[id] = !Dance[id];
	evCurWeapon2(id)
}
	
public FwdSpawn_Post(id)
{
	if(!is_user_alive(id))
		return;
	set_user_health(id, get_user_health(id) + KnivesList[iData[id][lKnife]][bHealth] + get_user_gang_health(id));
}
public pDamage (Victim,Inflictor,Attacker,Float:Damage,iDmgBits)
{	
	if(is_user_alive(Attacker) && ((cs_get_user_team(Victim) != cs_get_user_team(Attacker)) ||
	(cs_get_user_team(Victim) == cs_get_user_team(Attacker) && get_cvar_num("mp_friendlyfire")==1)) && Attacker != 0)
	{
		Damage = Damage + Damage * get_user_gang_damage(Attacker)/100.0;
		new Float:DropChance = get_user_gang_dropchance(Attacker);
		new Float:rnd = random_float(1.0,100.0);
		if(rnd <= DropChance && !get_run_day() && !get_lr_run() && get_user_weapon(Victim) != CSW_KNIFE)
		{
			ColorChat(0,"^3%s ^1has dropped ^3%s^1's weapon.",get_name(Attacker),get_name(Victim));
			client_cmd(Victim,"drop");
		}
		
		if( get_user_weapon(Attacker) == CSW_KNIFE)
		{
			new iChance = str_to_num(KnivesList[iData[Attacker][lKnife]][bsSlag]);
			new doSlag = random_num(1,100);
			if(iChance == 0 || doSlag > iChance)
			{
				SetHamParamFloat( 4, Damage * (1 + (str_to_float(KnivesList[iData[Attacker][lKnife]][bDamage]) /100)));
				new Float: SlagPerson = str_to_float(KnivesList[iData[Attacker][lKnife]][bSlag])
				new Float:fRandom[3];
				
				for ( new i; i < 3; i++)
				{
					fRandom[i] = random_float(10.0,30.0);
					fRandom[i] += fRandom[i]*SlagPerson/100.0;
				}
				entity_set_vector(Victim,EV_VEC_punchangle,fRandom);
			//	client_print(0,print_chat,"%.2f %.2f %.2f",fRandom[2],SlagPerson,fRandom[1]);
			}
			if(iChance > doSlag && iChance != 0 && InSlagging[Victim] == 0)
			{
				set_user_rendering(Victim, kRenderFxGlowShell, 0, 100, 255, kRenderNormal, 40 )
				set_pev(Victim, pev_flags, pev(Victim, pev_flags) | FL_FROZEN);
				SetHamParamFloat( 4, 2*Damage * (1 + (str_to_float(KnivesList[iData[Attacker][lKnife]][bDamage]) /100)));
				ColorChat(Victim,"You ^1have ^3slagged ^1by ^4%s",get_name(Attacker));
				ColorChat(Attacker,"You ^3slagged ^1the player ^4%s",get_name(Victim));
				InSlagging[Victim] = 1;
				set_task(3.0, "RemoveSlagging",Victim)
			}
		}
	}
	return HAM_IGNORED;
}
public RemoveSlagging(Victim)
{
	set_user_rendering(Victim)
	if(get_run_day() && get_user_gangid(Victim) != -1)
	{
		set_user_gang_colormodel(Victim)
		//client_print(0,print_chat,"%d %d %d",get_user_gang_glow_r(Victim),get_user_gang_glow_g(Victim),get_user_gang_glow_b(Victim));
	}
	set_pev(Victim, pev_flags, pev(Victim, pev_flags) & ~FL_FROZEN);
	InSlagging[Victim] = 0;
}
public SayHandler(id)
{
	new Command[256],Args[4][32];
	read_argv(1,Command,charsmax(Command));
	parse(Command,Args[0],31,Args[1],31,Args[2],31,Args[3],31)
	new iPlayer;
	if(strlen(Args[1]) > 1)
		iPlayer = cmd_target(id,Args[1],8);
	if(equali(Command,"/top"))
		return TopPlayers_Menu(id)
	if(equali(Args[0],"/cash"))
	{
		if(equali(Args[1],""))
			return ColorChat(id,"^1You have ^3%d ^1cash, ^3%d ^1in bank, you have ^4%s, ^1and you are using ^4%s.",iData[id][Cash],iData[id][Bank],KnivesList[iData[id][lKnife]][Name],KnivesList[iData[id][uKnife]][Name]);
		if(!iPlayer)
			return ColorChat(id,"^1the player has ^4not found");
		
		return ColorChat(id,"^1%s has ^3%d ^1cash, ^3%d ^1in bank, he has ^4%s, ^1and he is using ^4%s.",get_name(iPlayer),iData[iPlayer][Cash],iData[iPlayer][Bank],KnivesList[iData[iPlayer][lKnife]][Name],KnivesList[iData[iPlayer][uKnife]][Name]);
	}
	if(equali(Args[0],"/stat"))
	{
		if(equali(Args[1],""))
			iPlayer = id;
		if(!iPlayer)
			return ColorChat(id,"^1the player has ^4not found");
		PlayerChoosed[id] = iPlayer;
		return ViewPlayer(id,PlayerChoosed[id]);
	}
	if(equali(Command,"/shop"))
		return ShopMenu(id)
	if(equali(Command,"/knife") || equali(Command,"/knives"))
		return KnifeMenu(id)
	if(equali(Args[0],"/gamble")) {
		ShowCash[id] = false;
		client_cmd(id,"gamble %s",Args[1]);
		return 1;
	}
	if(equali(Args[0],"/gamble2")) {
		ShowCash[id] = true;
		client_cmd(id,"gamble %s",Args[1]);
		return 1;
	}
	if(equali(Command,"/nextcash") || equali(Command,"/nc") || equali(Command,"/pkudasoditshelniko2"))
	{
		if (iData[id][nCash] > 0)
			return ColorChat(id,"You ^1will be able to get ^4your nextcash ^1in ^3%d ^1minutes.",iData[id][nCash]);
		new Float:GetNextCash = 1500.0;
		new PlayerNC = floatround(GetNextCash + GetNextCash * str_to_float(KnivesList[iData[id][lKnife]][bCash]) /100.0 + GetNextCash * get_user_gang_bonuscash(id)/100.0);
			

		if(is_user_premium(id))
		{
			PlayerNC*=2;
			iData[id][nCash] = 10;
		}
		else
			iData[id][nCash] = 15;
		iData[id][Cash] += PlayerNC;
		return ColorChat(id,"^3Congratulations, ^4You ^1have gotten ^3%d ^4cash ^1from the ^4nextcash^1.",PlayerNC);
	}
	if(equali(Command,"/getcash") || equali(Command,"/gc") || equali(Command,"/pkudasoditshelniko")) 
	{
		if(get_user_gangid(id) == -1)
			return ColorChat(id,"You ^1must be ^4in gang ^1to get ^3getcash^1.");
		if(get_user_gang_getcash(id) == 0)
			return ColorChat(id,"You ^1must upgrade your ^4getcash skill ^1to get ^3getcash^1.");
		if(CountPlayers() < 5)
			return ColorChat(id,"You ^1cannot get ^4your getcash ^1until^3 5 players ^1online.");
		if(bGetCash[id])
			return ColorChat(id,"You ^1already got ^3your getcash ^1this round.");
	
		new Float:PlayerGC = float(get_user_gang_getcash(id));
		new GC = get_user_gang_getcash(id) + floatround(PlayerGC * str_to_float(KnivesList[iData[id][lKnife]][bCash]) /100.0 + PlayerGC * get_user_gang_bonuscash(id)/100.0);
		//client_print(id,print_chat,"%.2f",get_user_gang_bonuscash(id)); // ze edis 24.99....
		
		if(is_user_premium(id))
			GC*=2;
		
		bGetCash[id] = true;
		iData[id][Cash] += GC;
		return ColorChat(id,"^3Congratulations, ^4You ^1have got ^3%d ^4cash ^1from the ^4getcash^1.",GC);
	}
	if(equali(Args[0],"/material") || equali(Args[0],"/materials") || equali(Args[0],"/mat"))
	{
		if(equali(Args[1],""))
			iPlayer = id;
		if(!iPlayer)
			return ColorChat(id,"^1the player has ^4not found");
		new Materials[33];
		for (new i=6; i<=Diamond; i++)
			Materials[iPlayer] += iData[iPlayer][i];
			
		ColorChat(id,"%s ^1has in the total ^3%d ^4materials",get_name(iPlayer),Materials[iPlayer]);
		ColorChat(id,"^3%d ^1Wood, ^3%d ^1Steel, ^3%d ^1Iron",iData[iPlayer][Wood],iData[iPlayer][Steel],iData[iPlayer][Iron]);
		return ColorChat(id,"^3%d ^1Leather, ^3%d ^1Gold, ^3%d ^1Diamond",iData[iPlayer][Leather],iData[iPlayer][Gold],iData[iPlayer][Diamond]);
	}
	if(equali(Args[0],"/transfer") || equali(Args[0],"/send"))
	{
		replace( Args[2], charsmax(Args[]), "k", "000" );
		replace( Args[2], charsmax(Args[]), "m", "000000" );
		new Amount = str_to_num(Args[2]);
		if(equali(Args[1],"") || equali(Args[2],"") || !is_str_num(Args[2]))
			return ColorChat(id,"^1Syntax: /^4transfer ^1<^3player^1> <^3amount^1>");
		new Amount2 = Amount;
		if(Amount < 200)
			return ColorChat(id,"^1You must transfer at least^3 200");
		if(iPlayer == id)
			return ColorChat(id,"You ^1cannot transfer to ^3yourself.");
		if(!iPlayer)
			return ColorChat(id,"^1the player has ^4not found");
		if(Amount > iData[id][Cash])
			return ColorChat(id,"You ^1have just ^3%d ^1cash!",iData[id][Cash]);
		if(!(is_user_premium(id)|| is_user_premium(iPlayer)))
			Amount2 = (9 * Amount2)/10;
		iData[id][Cash] -= Amount;
		iData[iPlayer][Cash] += Amount2;
		ColorChat(id,"You ^1have tranfsered ^4%d ^1cash to the player ^3%s ^1and he has got ^4%d",Amount,get_name(iPlayer),Amount2);
		return ColorChat(iPlayer,"You ^1have got ^4%d ^1cash from the player ^3%s ^1and he has transfered ^4%d",Amount2,get_name(id),Amount);
	}
	if(equali(Args[0],"/sendmaterial") || equali(Args[0],"/sendmaterials") || equali(Args[0],"/transfermaterial") || equali(Args[0],"/transfermaterials") || equali(Args[0],"/tm"))
	{
		new Material;
		new szMaterials[][] = {"Wood","Steel","Iron","Leather","Gold","Diamond"}
		if(equali(Args[1],"") || equali(Args[2],"") || equali(Args[3],"") || !is_str_num(Args[3]))
			return ColorChat(id,"^1Syntax: /^4tm ^1<^3player^1> <^3material^1> <^3amount^1>");
		if(equali(Args[2],"wood"))
			Material = 6;
		else if(equali(Args[2],"steel"))
			Material = 7;
		else if(equali(Args[2],"iron"))
			Material = 8;
		else if(equali(Args[2],"leather"))
			Material = 9;
		else if(equali(Args[2],"gold"))
			Material = 10;
		else if(equali(Args[2],"diamond"))
			Material = 11;
		else
			return ColorChat(id,"^1Syntax: /^4tm ^1<^3player^1> <^3material^1> <^3amount^1>");
		if(iPlayer == id)
			return ColorChat(id,"You ^1cannot transfer to ^3yourself.");
		if(!iPlayer)
			return ColorChat(id,"^1the player has ^4not found");
		new Amount = str_to_num(Args[3]);
		
		if(Amount > iData[id][Material])
			return ColorChat(id,"You ^1have just ^3%d ^1%s!",iData[id][Material],szMaterials[Material-6]);
		iData[id][Material] -= Amount;
		iData[iPlayer][Material] += Amount;
		ColorChat(id,"You ^1have tranfsered ^3%d ^4%s ^1to the player ^4%s.",Amount,szMaterials[Material-6],get_name(iPlayer));
		return ColorChat(iPlayer,"You ^1have gotten ^3%d ^4%s ^1from the player ^4%s.",Amount,szMaterials[Material-6],get_name(id));
	}
	
	if(equali(Args[0],"/bl") || equali(Args[0],"/blacklist"))
	{
		if(equali(Args[1],"") || !(get_user_flags(id) & ADMIN_IMMUNITY))
			return 0;
		if(iPlayer == id)
			return ColorChat(id,"You ^1cannot add ^3yourself ^1to black list.");
		if(!iPlayer)
			return ColorChat(id,"^1the player has ^4not found");
		BlackList[iPlayer] = !BlackList[iPlayer];
		return ColorChat(id,"You ^1have %s ^3%s ^1to the black list",BlackList[iPlayer] ? "added to" : "removed from" ,get_name(iPlayer));
	}
	if(equali(Args[0],"/gamblemode") || equali(Args[0],"/messages"))
		return GambleMode_Menu(id);
	return 0;
}

public GambleMode_Menu(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wJailBreak Gamble Mode Menu",TAG);
	new menu = menu_create(Text,"GambleMode_Handler");
	new cb = menu_makecallback("GambleModeCB");
	menu_additem(menu,"See all of the gambles",.callback = cb);
	menu_additem(menu,"See just gambles over 999",.callback = cb);
	menu_additem(menu,"See just my gambles",.callback = cb);
	
	menu_display(id,menu);
	return 1;
}

public GambleMode_Handler(id,menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(menu)
		return 1;
	}
	iData[id][GambleMode] = Item;
	switch(Item)
	{
		case 0:
			ColorChat(id,"Now you will see ^3all of the server gambles^1.");
		case 1:
			ColorChat(id,"Now you will see just ^3server gambles over 999^1.");
		case 2:
			ColorChat(id,"Now you will see just ^3your gambles^1.");
	}
	menu_destroy(menu)
	return 1;
}

public ShopMenu(id)
{
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \wJailBreak Shop Menu^n\dCash Amount: \r%d",TAG,iData[id][Cash]);
	new sMenu = menu_create(TextInfo,"Shop_Handler");
	menu_additem(sMenu,"\wHealth Shop");
	menu_additem(sMenu,"\wArmor Shop");
	menu_additem(sMenu,"\wGranade Shop^n");
	menu_additem(sMenu,"\wKnives Shop");
	menu_additem(sMenu,"\wPlayers Info");
	menu_additem(sMenu,"\wTop Players^n");
	menu_additem(sMenu,"\wLucky Card \d(דוריג סיטרכ)");
	menu_display(id,sMenu);
	return 1;
}
public Shop_Handler(id,sMenu,Item)
{
	switch (Item)
	{
		case MENU_EXIT: 
		{
			menu_destroy(sMenu)
			return 1;
		}
		case 0: HealthMenu(id)
		case 1: ArmorMenu(id)
		case 2: GrenadeShop(id)
		case 3: KnifeMenu(id)
		case 4: PlayersMenu(id)
		case 5: client_cmd(id,"say /top");
		case 6: client_cmd(id,"say /luckycard");
	}
	menu_destroy(sMenu)
	return 1;
}
public HealthMenu(id)
{	
	if(!(is_user_alive(id) && cs_get_user_team(id) == CS_TEAM_T))
		return ColorChat(id,"^1you must to be a ^3terrorist ^1and ^3alive");
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \wJailBreak Health Shop Menu^n\dCash Amount: \r%d",TAG,iData[id][Cash]);
	new Menu = menu_create(TextInfo,"HealthShop_Handler");
	new CB = menu_makecallback("CallBack1");
	for(new i; i < 5; i++)
	{
		formatex(TextInfo,charsmax(TextInfo),"%s",ItemsToShop[i][Name2])
		menu_additem(Menu,TextInfo,.callback = CB);
	}
	menu_display(id,Menu);
	return 1;
}
public HealthShop_Handler(id,Menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu)
		return 1;
	}
	if(ItemsToShop[Item][Price2] > iData[id][Cash])
		return ColorChat(id,"^1You dont have enough cash to buy that item");
	else
	{
		fm_set_user_health(id,get_user_health(id) + (Item+1)*10)
		iData[id][Cash] -= ItemsToShop[Item][Price2];
		return ColorChat(id,"^1You bought successfully");
	}
	menu_destroy(Menu)
	return 1;
}
public ArmorMenu(id)
{	
	if(!(is_user_alive(id) && cs_get_user_team(id) == CS_TEAM_T))
		return ColorChat(id,"^1you must to be a ^3terrorist ^1and ^3alive");
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \wJailBreak Armor Shop Menu^n\dCash Amount: \r%d",TAG,iData[id][Cash]);
	new Menu = menu_create(TextInfo,"ArmorShop_Handler");
	new CB = menu_makecallback("CallBack2");
	for(new i=5; i < 10; i++)
	{
		formatex(TextInfo,charsmax(TextInfo),"%s",ItemsToShop[i][Name2])
		menu_additem(Menu,TextInfo,.callback = CB);
	}
	menu_display(id,Menu);
	return 1;
}
public ArmorShop_Handler(id,Menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu)
		return 1;
	}
	if(ItemsToShop[Item+5][Price2] > iData[id][Cash])
		return ColorChat(id,"^1You dont have enough cash to buy that item");
	else
	{
		fm_set_user_armor(id,get_user_armor(id) + (Item+1)*10)
		iData[id][Cash] -= ItemsToShop[Item+5][Price2];
		return ColorChat(id,"^1You bought successfully");
	}
	menu_destroy(Menu)
	return 1;
}
public GrenadeShop(id)
{	
	if(!(is_user_alive(id) && cs_get_user_team(id) == CS_TEAM_T))
		return ColorChat(id,"^1you must to be a ^3terrorist ^1and ^3alive");
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \wJailBreak Grenades Shop Menu^n\dCash Amount: \r%d",TAG,iData[id][Cash]);
	new Menu = menu_create(TextInfo,"GrenadeShop_Handler");
	new CB = menu_makecallback("CallBack3");
	for(new i=10; i < 13; i++)
	{
		formatex(TextInfo,charsmax(TextInfo),"%s",ItemsToShop[i][Name2])
		menu_additem(Menu,TextInfo,.callback = CB);
	}
	menu_display(id,Menu);
	return 1;
}
public GrenadeShop_Handler(id,Menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu)
		return 1;
	}
	switch(Item)
	{
		case 0:
		{
			if(ItemsToShop[Item+10][Price2] > iData[id][Cash])
				return ColorChat(id,"^1You dont have enough cash to buy that item");
			else
			{
				give_item(id,"weapon_hegrenade")
				iData[id][Cash] -= ItemsToShop[Item+10][Price2];
			}
		}
		case 1:
		{
			if(ItemsToShop[Item+10][Price2] > iData[id][Cash])
				return ColorChat(id,"^1You dont have enough cash to buy that item");
			else
			{
				give_item(id,"weapon_flashbang")
				iData[id][Cash] -= ItemsToShop[Item+10][Price2];
			}
		}
		case 2:
		{
			if(ItemsToShop[Item+10][Price2] > iData[id][Cash])
				return ColorChat(id,"^1You dont have enough cash to buy that item");
			else
			{
				give_item(id,"weapon_smokegrenade")
				iData[id][Cash] -= ItemsToShop[Item+10][Price2];
			}
		}
	}
	menu_destroy(Menu)
	return 1;
}

public KnifeMenu(id)
{
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \wKnives Menu^n\dUsing Knife: \r%s^n\dBought \r%d\w/%d",TAG,KnivesList[iData[id][uKnife]][Name],iData[id][lKnife]+1,KnivesAmount);
	new kMenu = menu_create(TextInfo,"KnifeInfoMenu");
	for (new i; i<KnivesAmount; i++)
	{
		if(i > iData[id][lKnife])
			formatex(TextInfo,charsmax(TextInfo),"\d%s %s %s",KnivesList[i][Name],i > PremiumKnives -2 ? "\r(Premium)" : "",i == iData[id][uKnife] ? "\d[Using]" : "");
		else
			formatex(TextInfo,charsmax(TextInfo),"%s %s %s",KnivesList[i][Name],i > PremiumKnives -2 ? "\r(Premium)" : "",i == iData[id][uKnife] ? "\d[Using]" : "");
		menu_additem(kMenu,TextInfo);
	}
	menu_display(id,kMenu);
	return 1;
}
public PlayersMenu(id)
{
	new Players[32],pnum,szString[3],Info[128];
	formatex(Info,charsmax(Info),"\r[ \w%s \r] \wPlayers Info Menu:",TAG);
	new pMenu = menu_create(Info,"Players_Handler");
	get_players(Players,pnum,"ch")
	for(new i; i<pnum; i++)
	{
		new Player = Players[i];
		if(!is_user_connected(Player)) continue;
		formatex(Info,charsmax(Info),"%s",get_name(Player));
		num_to_str(Player,szString,charsmax(szString));	
		menu_additem(pMenu,Info,szString);
	}
	menu_display(id,pMenu);
}
public Players_Handler(id,pMenu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(pMenu)
		return ShopMenu(id);
	}
	new szData[3],Empty;
	menu_item_getinfo(pMenu,Item,Empty,szData,charsmax(szData),_,_,Empty);
	new Player = str_to_num(szData);
	menu_destroy(pMenu)
	new Materials[33];
	for (new i=6; i<=Diamond; i++)
		Materials[Player] += iData[Player][i];
	PlayerChoosed[id] = Player;
	ViewPlayer(id,Player);
	return 1;
}
public ViewPlayer(id,Player)
{
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \dView Player %s Menu:",TAG,get_name(Player));
	new Menu = menu_create(TextInfo,"ViewPlayer_Handler");
	
	new Materials[33];
	for (new i=6; i<=Diamond; i++)
		Materials[Player] += iData[Player][i];
	
	menu_additem(Menu,"\wRefresh");
	menu_additem(Menu,"\wStat Gambles");
	
	formatex(TextInfo,charsmax(TextInfo),"\wMaterials \r(\w%d\r)",Materials[id]);
	menu_additem(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wPocket Cash: \y%d \wCash",iData[Player][Cash]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wBank Cash: \y%d \wCash",iData[Player][Bank]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wKnife Own: \y%s \r(\w%d\r)",KnivesList[iData[Player][lKnife]][Name],iData[Player][lKnife]+1);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wKnife Used: \y%s \r(\w%d\r)",KnivesList[iData[Player][uKnife]][Name],iData[Player][uKnife]+1);
	menu_addtext(Menu,TextInfo);
	
	menu_display(id,Menu);
	return 1;
}
public ViewPlayer_Handler(id,Menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu);
		PlayersMenu(id)
		return 1;
	}
	else if(Item == 0)
	{
		if(PlayerChoosed[id] == 0 || !is_user_connected(PlayerChoosed[id]))
			return ColorChat(id,"this player is not ^3online ^1anymore.");
		return ViewPlayer(id,PlayerChoosed[id])
	}
	else if(Item == 1)
		return StatGambleMenu(id,PlayerChoosed[id])
	return MaterialsPlayerMenu(id,PlayerChoosed[id]);
}

public StatGambleMenu(id,Player)
{
	new TextInfo[128];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \dStat Gamble Player %s Menu:",TAG,get_name(Player));
	new Menu = menu_create(TextInfo,"StatGambleMenu_Handler");
	
	if(ilData[Player][WinGambles] > 0 && ilData[Player][LoseGambles] > 0)
		formatex(TextInfo,charsmax(TextInfo),"\d- \wWin Chance \r(\w%f%s\r)",(100.0/ilData[Player][Gambles] * ilData[Player][WinGambles]),"%");
	else
		formatex(TextInfo,charsmax(TextInfo),"\d- \wWin Chance \r(\w\r)");
	menu_additem(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wTotal Gambles: \y%d",ilData[Player][Gambles]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wTotal Cash Gambles: \y%d",ilData[Player][CashGambles]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wWin Gambles: \y%d",ilData[Player][WinGambles]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wWin Cash Gambles: \y%d",ilData[Player][WinCashGambles]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wLose Gambles: \y%d",ilData[Player][LoseGambles]);
	menu_addtext(Menu,TextInfo);
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wLose Cash Gambles: \y%d",ilData[Player][LoseCashGambles]);
	menu_addtext(Menu,TextInfo);
	
	menu_display(id,Menu);
	return 1;
}
public StatGambleMenu_Handler(id,Menu,Item)
{
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu);
		return ViewPlayer(id,PlayerChoosed[id]);
	}
	return StatGambleMenu(id,PlayerChoosed[id]);
}
public MaterialsPlayerMenu(id,Player)
{
	new TextInfo[128];
	new szMaterials[][] = {"Wood","Steel","Iron","Leather","Gold","Diamond"} //0,1,2,3,4,5
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \dMaterials Player %s Menu:",TAG,get_name(Player));
	new mMenu = menu_create(TextInfo,"MaterialsMenuPlayer_Handler");
	menu_additem(mMenu,"Refresh");
	for (new i=6; i<Wood+6; i++)
	{
		formatex(TextInfo,charsmax(TextInfo),"\d- \w%s \d[ \w%d \d]",szMaterials[i-6],iData[Player][i]);
		menu_addtext(mMenu,TextInfo);
	}
	menu_display(id,mMenu)
	return 1;
}
public MaterialsMenuPlayer_Handler(id,mMenu,Item)
{
	menu_destroy(mMenu)
	if(Item == MENU_EXIT)
		return ViewPlayer(id,PlayerChoosed[id]);
	MaterialsPlayerMenu(id,PlayerChoosed[id])
	return 1;
}
public KnifeInfoMenu (id,kMenu,Item)
{
	new BuyCallBack = menu_makecallback("_BuyCallBack");
	new UseCallBack = menu_makecallback("_UseCallBack");
	if (Item == MENU_EXIT)
	{
		menu_destroy(kMenu)
		ShopMenu(id);
		return 1;
	}
	Choosed[id] = Item;
	new TextInfo[128],Text[512];
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \dKnife \r%s \dInfo:^n^n\d- \wCost: \r%d",TAG,KnivesList[Item][Name],KnivesList[Item][Price]);
	new iMenu = menu_create(TextInfo,"Knife_Handler");
	
	if(iData[id][lKnife] < Item) 
		formatex(TextInfo,charsmax(TextInfo),"\wPurchase");
	else 
		formatex(TextInfo,charsmax(TextInfo),"\dAlready Purchased");
	menu_additem(iMenu,TextInfo,.callback = BuyCallBack);
	
	menu_additem(iMenu,"\wMaterials");
	
	if(iData[id][uKnife] != Item) 
		formatex(TextInfo,charsmax(TextInfo),"\wUse Model^n");
	else 
		formatex(TextInfo,charsmax(TextInfo),"\dAlready Using Model^n");
	menu_additem(iMenu,TextInfo,.callback = UseCallBack);
	
	
	formatex(TextInfo,charsmax(TextInfo),"\d- \wLevel Required: \r%d^n",KnivesList[Item][LevelReq]+1);
	add(Text,charsmax(Text),TextInfo);
	formatex(TextInfo,charsmax(TextInfo),"\d- \wHealth Bonus: \r+%d HP^n",KnivesList[Item][bHealth]);
	add(Text,charsmax(Text),TextInfo);
	formatex(TextInfo,charsmax(TextInfo),"\d- \wDamage Bonus: \r+%s%%^n",KnivesList[Item][bDamage]);
	add(Text,charsmax(Text),TextInfo);
	formatex(TextInfo,charsmax(TextInfo),"\d- \wCash Bonus: \r+%s%%^n",KnivesList[Item][bCash]);
	add(Text,charsmax(Text),TextInfo);
	formatex(TextInfo,charsmax(TextInfo),"\d- \wPunch Bonus: \r+%s%%^n",KnivesList[Item][bSlag]);
	add(Text,charsmax(Text),TextInfo);
	formatex(TextInfo,charsmax(TextInfo),"\d- \wSlag Chance: \r%s%%",KnivesList[Item][bsSlag]);
	add(Text,charsmax(Text),TextInfo);
	
	menu_addtext(iMenu,Text);
	
	menu_display(id,iMenu);
	return 1;
}
// CallBacks
public GambleModeCB(id,Menu,Item)
{
	if(Item == iData[id][GambleMode])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public CallBack1(id,Menu,Item)
{
	if(ItemsToShop[Item][Price2] > iData[id][Cash])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public CallBack2(id,Menu,Item)
{
	if(ItemsToShop[Item+5][Price2] > iData[id][Cash])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public CallBack3(id,Menu,Item)
{
	if(ItemsToShop[Item+10][Price2] > iData[id][Cash])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public _BuyCallBack(id,kMenu,Item)
{
	new Knife = Choosed[id];
	if((!(is_user_premium(id)) && (Knife > PremiumKnives -1)))
		return ITEM_DISABLED;
	if((iData[id][Cash] < KnivesList[Knife][Price]) || (iData[id][lKnife] +1 != Knife) || (iData[id][Wood] < KnivesList[Knife][mWood]) || (iData[id][Steel] < KnivesList[Knife][mSteel]) || (iData[id][Iron] < KnivesList[Knife][mIron]) || (iData[id][Leather] < KnivesList[Knife][mLeather]) || (iData[id][Gold] < KnivesList[Knife][mGold]) || (iData[id][Diamond] < KnivesList[Knife][mDiamond]))
		return ITEM_DISABLED;
	if(get_user_level(id) < KnivesList[Knife][LevelReq])
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}
public _UseCallBack(id,kMenu,Item)
{
	if ((iData[id][lKnife] >= Choosed[id]) && (iData[id][uKnife] != Choosed[id]))
		return ITEM_ENABLED;
	return ITEM_DISABLED;
}
public Knife_Handler(id,iMenu,Item)
{
	switch (Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(iMenu)
			return KnifeMenu(id);
		}
		case 0:
		{
			Item = Choosed[id];
			if((iData[id][Cash] < KnivesList[Item][Price]) || (iData[id][lKnife] +1 != Item) || (iData[id][Wood] < KnivesList[Item][mWood]) || (iData[id][Steel] < KnivesList[Item][mSteel]) || (iData[id][Iron] < KnivesList[Item][mIron]) || (iData[id][Leather] < KnivesList[Item][mLeather]) || (iData[id][Gold] < KnivesList[Item][mGold]) || (iData[id][Diamond] < KnivesList[Item][mDiamond]))
				return 1;
			iData[id][lKnife] ++;
			iData[id][uKnife] = iData[id][lKnife];
			iData[id][Cash] -= KnivesList[Choosed[id]][Price];
			iData[id][Wood] -= KnivesList[Choosed[id]][mWood];
			iData[id][Steel] -= KnivesList[Choosed[id]][mSteel];
			iData[id][Iron] -= KnivesList[Choosed[id]][mIron];
			iData[id][Leather] -= KnivesList[Choosed[id]][mLeather];
			iData[id][Gold] -= KnivesList[Choosed[id]][mGold];
			iData[id][Diamond] -= KnivesList[Choosed[id]][mDiamond];
			ColorChat(0,"^1Congratulations, ^4%s ^1has purchased the ^4%s^1, Knife ^3%d^1/^4%d",get_name(id),KnivesList[iData[id][lKnife]][Name],iData[id][lKnife]+1,KnivesAmount);
			evCurWeapon2(id);
		}
		case 1: 
		{
			menu_destroy(iMenu)
			return MaterialsMenu(id);
		}
		case 2: 
		{
			iData[id][uKnife] = Choosed[id];
			ColorChat(id,"You ^1have changed your ^3knife model ^1to ^4%s",KnivesList[iData[id][uKnife]][Name]);
			evCurWeapon2(id)
		}
	}
	menu_destroy(iMenu)
	return KnifeMenu(id);
}
public MaterialsMenu(id)
{
	new Item = Choosed[id];
	new TextInfo[128];
	new szMaterials[][] = {"Wood","Steel","Iron","Leather","Gold","Diamond"} //0,1,2,3,4,5
	formatex(TextInfo,charsmax(TextInfo),"\r[ \w%s \r] \dKnife \r%s \dMaterials Info:",TAG,KnivesList[Item][Name]);
	new mMenu = menu_create(TextInfo,"MaterialsMenu_Handler");
	menu_additem(mMenu,"Refresh My Materials");
	for (new i=6; i<Wood+6; i++)
	{
		formatex(TextInfo,charsmax(TextInfo),"\d- \w%s \d[\w %d\d/\r%d \d]",szMaterials[i-6],iData[id][i],KnivesList[Item][mWood + i -6]);
		menu_addtext(mMenu,TextInfo);
	}
	menu_display(id,mMenu)
	return 1;
}
public MaterialsMenu_Handler(id,mMenu,item)
{
	menu_destroy(mMenu)
	if(item == MENU_EXIT)
		return KnifeInfoMenu(id,0,Choosed[id]);
	MaterialsMenu(id)
	return 1;
}
//Supply Box
public OnNewRound()
{
	static ent;
	do
	{
		ent = find_ent_by_class(-1, AMMOBOX_CLASSNAME);
		remove_entity(ent);
	}
	while(ent != 0)
	for(new i=1; i<MaxPlayers; i++)
	{
		if(!is_user_connected(i)) continue;
		InProgress[i] = false;
		bGetCash[i] = false;
		if(task_exists(i + Dance_Task))
		{
			remove_task(i + Dance_Task);
			Dancing(i + Dance_Task);
		}
	}
}

public Createbox(id)
{
	new pnum,players[32];
	get_players(players,pnum,"ch");
	if(pnum < 0)
		return ColorChat(0,"There are not enough players for supply boxes");
	for(new i = 1; i <=MaxPlayers;i++)
		if(is_user_connected(i))
			InProgress[i] = false;
	set_task(0.5,"evCurWeapon3",id + CurTask);
	static Float:origin[3];
	entity_get_vector(id, EV_VEC_origin, origin);
	new ent = create_entity("info_target");
	origin[2] -= 30.0;
	origin[0] += 40.0;
	entity_set_origin(ent, origin);
	
	entity_set_string(ent, EV_SZ_classname, AMMOBOX_CLASSNAME);
	new Info[128];
	formatex(Info,charsmax(Info),"models/%smaterial/%s",szLocation,szSB);
	entity_set_model(ent,Info);
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	
	new Float:maxs[3] = {5.0, 10.0, 10.0};
	new Float:mins[3] = {-5.0, -10.0, -10.0};
	entity_set_size(ent, mins, maxs);
	fm_set_rendering(ent, kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 20);
	
	drop_to_floor(ent);
	for(new i = 1; i<=MaxPlayers; i++)
		InProgress[i] = false;
	return 1;
}
public OnCmdStart(id, uc_handle, seed)
{
	if(!is_user_alive(id)) return FMRES_IGNORED;
	
	static button;
	button = get_uc(uc_handle, UC_Buttons);
	
	if(button & IN_USE)
	{
		static ent, Float:range;
		ent = find_ent_by_class(-1, AMMOBOX_CLASSNAME);
		
		if(!pev_valid(ent))
		{
			return FMRES_IGNORED;
		}
		
		range = entity_range(ent, id);
		if(range < 70)
		{
			if(!InProgress[id])
			{
				InProgress[id] = true;
				
				message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("BarTime"), _, id);
				write_short(1);
				message_end();
				set_task(1.0, "OnPlayerTakingBox", id + TASK_TAKING_BOX);
			}
		}
		else
		{
			if(InProgress[id])
			{
				InProgress[id] = false;
				
				message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("BarTime"), _, id);
				write_short(0);
				message_end();
				
				if(task_exists(id + TASK_TAKING_BOX)) remove_task(id + TASK_TAKING_BOX);
			}
		}
	}
	else
	{
		if(pev(id, pev_oldbuttons) & IN_USE)
		{
			if(InProgress[id])
			{
				InProgress[id] = false;
				
				message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("BarTime"), _, id);
				write_short(0);
				message_end();
				
				if(task_exists(id + TASK_TAKING_BOX)) remove_task(id + TASK_TAKING_BOX);
			}
		}
	}
	
	
	return FMRES_HANDLED;
}

public OnPlayerTakingBox(taskid)
{
	static ent, id;
	id = taskid - TASK_TAKING_BOX;
	ent = find_ent_by_class(-1, AMMOBOX_CLASSNAME);
	if(!pev_valid(ent) || !is_user_alive(id)) return 1;
	
	set_pev(ent, pev_effects, EF_NODRAW)
	set_pev(ent, pev_solid, SOLID_NOT)
	
	new szMaterial[][] = {"Wood","Steel","Iron","Leather","Gold","Diamond"}
	
	static cash,material;
	cash = floatround(random_float(100.0,1000.0) * (1.0 + get_user_gang_bonuscash(id)/100.0));
	new num = random_num(1,100);
	switch(num)
	{
		case 1..30:
			material = Wood;
		case 31..50:
			material = Wood +1;
		case 51.70:
			material = Wood + 3;
		case 71..85:
			material = Wood +2;
		case 86..95:
			material = Wood +4;
		case 96..100:
			material = Wood +5;
	}
	for(new i=1; i<=MaxPlayers; i++)
	{
		if(!is_user_connected(i)) continue;
		InProgress[i] = false;
	}
	remove_entity(ent);
	new rnd = 1;
	if(is_user_premium(id))
	{
		//rnd ++;
		iData[id][Cash] += cash*2;
		iData[id][material] += rnd;
		return ColorChat(0,"^3%s ^1has earned ^4%d Cash ^1and ^3%d ^4%s Materials ^1From the Box",get_name(id),cash*2,rnd,szMaterial[material-Wood]);
	}
	else
	{
		new pChance = random_num(1,100)
		if(pChance > 85)
			return ColorChat(0,"^3%s ^1has ^3not ^1earned ^4Cash ^1and ^4Material ^1From the Box",get_name(id));
		else if(pChance > 55 && pChance <= 85)
		{
			
			iData[id][Cash] += cash;
			return ColorChat(0,"^3%s ^1has earned ^4%d Cash ^1and ^1have ^3not ^4Material ^1From the Box",get_name(id),cash);
		}
		else if(pChance > 25 && pChance <= 55)
		{
			iData[id][material] += rnd; // index out of bounds (maybe 0)
			return ColorChat(0,"^3%s ^1has ^3not ^1earned ^4Cash ^1and have earned ^3%d ^4%s Materials ^1From the Box",get_name(id),rnd,szMaterial[material-Wood]);
		}
		else
		{
			iData[id][Cash] += cash;
			iData[id][material] += rnd;
			return ColorChat(0,"^3%s ^1has earned ^4%d Cash ^1and ^3%d ^4%s Materials ^1From the Box",get_name(id),cash,rnd,szMaterial[material-Wood]);
		}
	}
	return 1;
}

public TopPlayers_Menu(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wJailbreak Top Players",TAG);
	new menu = menu_create(Text,"TopPlayers_Handler");
	new TopType[15];
	switch(iTop[id])
	{
		case tCash:
			TopType = "Cash"
		case tKnife:
			TopType = "Knife"
		case tMaterials:
			TopType = "Materials"
	}

	formatex(Text,charsmax(Text),"\wTop Player: \d[\r%s\d]^n",TopType);
	menu_additem(menu,Text);
	
	menu_additem(menu,"\yView Top Players");
	
	menu_display(id,menu);
	return 1;
}

public TopPlayers_Handler(id,menu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(menu);
			return 1;
		}
		
		case 0:
		{
			iTop[id] ++;
			if(iTop[id] > tMaterials)
				iTop[id] = tCash;
			return TopPlayers_Menu(id)
		}
		case 1:
			TopPlayers(id);
	}
	menu_destroy(menu);
	return 1;
}

public TopPlayers(id)
{
	new Text[2048];
	new Array:t_Players;
	SortTopPlayers(id,t_Players);
	new Text2[50],TopType[15];
	switch(iTop[id])
	{
		case tCash:
			TopType = "Cash"
		case tKnife:
			TopType = "Knife"
		case tMaterials:
			TopType = "Materials"
	}
	formatex(Text2,charsmax(Text2),"Top 10 Players (%s)",TopType);
	formatex(Text,charsmax(Text),"<style type=^"text/css^">th{color:rgb(180,186,126);text-align:left}td{color:white}</style>");
	format(Text,charsmax(Text),"%s<body style=^"background-color:rgb(36,36,36)^">",Text);
	format(Text,charsmax(Text),"%s<p style=^"color:rgb(211,210,205);font-size:25px;font-family:'Tahoma';font-weight:600^"><br/>%s</p>",Text,Text2);
	format(Text,charsmax(Text),"%s<table border=^"0^"style=^"font-family:'Tahoma';border-collapse:collapse;font-size:18px^"width=^"750^">",Text);
	format(Text,charsmax(Text),"%s<tr style=^"background-color:rgb(47,48,53)^">",Text);
	format(Text,charsmax(Text),"%s<th>#",Text);
	format(Text,charsmax(Text),"%s<th>Name",Text);
	if(iTop[id] == tMaterials)
	{
		format(Text,charsmax(Text),"%s<th>Wood",Text);
		format(Text,charsmax(Text),"%s<th>Steel",Text);
		format(Text,charsmax(Text),"%s<th>Iron",Text);
		format(Text,charsmax(Text),"%s<th>Leather",Text);
		format(Text,charsmax(Text),"%s<th>Gold",Text);
		format(Text,charsmax(Text),"%s<th>Diamond",Text);
	}
	format(Text,charsmax(Text),"%s<th>%s</th>",Text,TopType);
	if(iTop[id] == tCash)
	{
		format(Text,charsmax(Text),"%s<th>Bank",Text);
		format(Text,charsmax(Text),"%s<th>Total",Text);
	}
	else if(iTop[id] == tKnife)
		format(Text,charsmax(Text),"%s<th>Using Knife",Text);
	format(Text,charsmax(Text),"%s </tr>",Text);
	for(new i; i <ArraySize(t_Players); i++)
	{
		if(i >= 10)
			break;
		new Data[PlayerData];
		ArrayGetArray(t_Players,i,Data);
		new TotalMaterials;
		for(new i =6; i <= Diamond; i++)
			TotalMaterials += Data[i];
		new Total = Data[Cash] + Data[Bank];
		if(i % 2 == 0)
			format(Text,charsmax(Text),"%s <tr style=^"background-color:rgb(40,40,40)^">",Text);
		else
			format(Text,charsmax(Text),"%s <tr style=^"background-color:rgb(36,36,36)^">",Text);
			
		format(Text,charsmax(Text),"%s<td>%d",Text,i+1);
		format(Text,charsmax(Text),"%s<td>%s",Text,Data[pName]);
		switch(iTop[id])
		{
			case tCash:
			{
				format(Text,charsmax(Text),"%s<td>%d",Text,Data[Cash],TopType);
				format(Text,charsmax(Text),"%s<td>%d",Text,Data[Bank],TopType);
				format(Text,charsmax(Text),"%s<td>%d %s</td>",Text,Total,TopType);
			}
			case tKnife:
			{
				format(Text,charsmax(Text),"%s<td>%s",Text,KnivesList[Data[lKnife]][Name]);
				format(Text,charsmax(Text),"%s<td>%s</td>",Text,KnivesList[Data[uKnife]][Name]);
			}
			case tMaterials:
			{
				for(new i = 6; i <=Diamond; i++)
					format(Text,charsmax(Text),"%s<td>%d",Text,Data[i]);
				format(Text,charsmax(Text),"%s<td>%d</td>",Text,TotalMaterials);
			}
		}
	}
	format(Text,charsmax(Text),"%s</tr></table></body>",Text);
	
	show_motd(id,Text,Text2);
	ArrayDestroy(t_Players);
	
	return 1;
}

stock SortTopPlayers(id,&Array:ArrayName)
{
	UpdateData();
	ArrayName = ArrayCreate(PlayerData);
	for(new i; i <ArraySize(ArrPlayers) ; i++)
	{
		new Data[PlayerData];
		ArrayGetArray(ArrPlayers,i,Data);
		ArrayPushArray(ArrayName,Data);
	}
	
	switch(iTop[id])
	{
		case tCash:
			ArraySort( ArrayName, "SortCashPlayersData" );
		case tKnife:
			ArraySort( ArrayName, "SortKnifePlayersData" );
		case tMaterials:
			ArraySort( ArrayName, "SortMaterialsPlayersData" );
	}
}

public SortCashPlayersData( Array:aData, iIndex1, iIndex2, const iSortData[ ], iSortDataSize )
{
	new eData1[ PlayerData ], eData2[ PlayerData ];
	ArrayGetArray( aData, iIndex1, eData1 );
	ArrayGetArray( aData, iIndex2, eData2 );
	
	if( eData1[ Cash ] + eData1[ Bank ] < eData2[ Cash ]  + eData2[ Bank ])
		return 1;
		
	return -1;
}

public SortKnifePlayersData( Array:aData, iIndex1, iIndex2, const iSortData[ ], iSortDataSize )
{
	new eData1[ PlayerData ], eData2[ PlayerData ];
	ArrayGetArray( aData, iIndex1, eData1 );
	ArrayGetArray( aData, iIndex2, eData2 );
	
	if( eData1[ lKnife ] < eData2[ lKnife ])
		return 1;
		
	return -1;
}


public SortMaterialsPlayersData( Array:aData, iIndex1, iIndex2, const iSortData[ ], iSortDataSize )
{
	new eData1[ PlayerData ], eData2[ PlayerData ];
	ArrayGetArray( aData, iIndex1, eData1 );
	ArrayGetArray( aData, iIndex2, eData2 );
	
	new TotalMaterials[2];
	for (new i=Wood; i<=Diamond; i++)
		TotalMaterials[0] += eData1[i];
	for (new i=Wood; i<=Diamond; i++)
		TotalMaterials[1] += eData2[i];
	
	if( TotalMaterials[0] < TotalMaterials[1])
		return 1;
		
	return -1;
}

public UpdateData()
{
	for(new index=1; index <= MaxPlayers; index++)
	{
		if(!is_user_connected(index))
			continue;
		new szTemp[120],szData2[1000];
		iData[index][4] = get_user_tickets(index)
		for(new i=0;i<=GambleMode;i++)
		{
			formatex(szTemp,charsmax(szTemp),"#%d",iData[index][i]);
			add(szData2,charsmax(szData2),szTemp);
		}
		formatex(szTemp,charsmax(szTemp),"#%s",get_name(index));
		replace_all(szTemp,charsmax(szTemp)," ","$%&");
		add(szData2,charsmax(szData2),szTemp);
		formatex(szTemp,charsmax(szTemp),"#%s",get_auth(index));
		add(szData2,charsmax(szData2),szTemp);
		formatex(szTemp,charsmax(szTemp),"#%s",get_ip(index));
		add(szData2,charsmax(szData2),szTemp);
		fvault_set_data(szVault,get_key(index),szData2);
	}
	new Key[55],szData[1000];
	
	
	
	
	ArrayClear(ArrPlayers);
	for(new i; i < fvault_size(szVault); i++)
	{
		fvault_get_keyname(szVault,i,Key, charsmax(Key));
		fvault_get_data(szVault,Key,szData,charsmax(szData));
		replace_all(szData,charsmax(szData),"#"," ");
		new Data[GambleMode+1][11];
		new aData[PlayerData]; // PLAYER 1, PLAYER 2
		parse(szData,Data[Cash],10,Data[Bank],10,Data[uKnife],10,Data[lKnife],10,Data[Tickets],10,Data[nCash],10,Data[Wood],10,
		Data[Steel],10,Data[Iron],10,Data[Leather],10,Data[Gold],10,Data[Diamond],10,Data[GambleMode],10,aData[pName],31,aData[pSteamID],34,aData[pIP],29);
		replace_all(aData[pName],31,"$%&"," ");
		for(new i;i<=Diamond;i++)
			aData[i]=str_to_num(Data[i]);
		ArrayPushArray(ArrPlayers,aData);
	}
}

// Cmds
public cAddCmd(id)
{
	cForm[id] = 0;
	CashCmd(id)
}
public cSetCmd(id)
{
	cForm[id] = 1;
	CashCmd(id)
}
public cRemoveCmd(id)
{
	cForm[id] = 2;
	CashCmd(id)
}
public bAddCmd(id)
{
	cForm[id] = 0;
	BankCmd(id)
}
public bSetCmd(id)
{
	cForm[id] = 1;
	BankCmd(id)
}
public bRemoveCmd(id)
{
	cForm[id] = 2;
	BankCmd(id)
}
public mAddCmd(id)
{
	cForm[id] = 0;
	MaterialsCmd(id)
}
public mSetCmd(id)
{
	cForm[id] = 1;
	MaterialsCmd(id)
}
public MaterialsCmd(id)
{
	if(!(get_user_flags(id) & ADMIN_IMMUNITY)) return 1;
	new Args[128],aTarget[32],aMaterial[32],aAmount[32],Material;
	new szMaterial [] [] = {"Wood Material","Steel Material","Iron Material","Leather Material","Gold Material","Diamond Material","^1from ^3All Materials"}
	read_args(Args,charsmax(Args));
	remove_quotes(Args);
	parse(Args,aTarget,charsmax(aTarget),aMaterial,charsmax(aMaterial),aAmount,charsmax(aAmount));
	if( equali(aTarget,"") || equali(aMaterial,"")|| equali(aAmount,""))
		return console_print(id,"Usage: amx_%s_material <Nick> <Material> <Amount>",cForm[id]==1 ? "set" : "add");
	new iPlayer = cmd_target( iPlayer, aTarget,8);
	if(!is_str_num(aAmount))
		return console_print(id,"You need to fill numbers in the Materials Number");
	if(!iPlayer)
		return console_print(id,"The Player has not found")
	if(equali(aMaterial,"wood"))
		Material = 6;
	else if(equali(aMaterial,"steel"))
		Material = 7;
	else if(equali(aMaterial,"iron"))
		Material = 8;
	else if(equali(aMaterial,"leather"))
		Material = 9;
	else if(equali(aMaterial,"gold"))
		Material = 10;
	else if(equali(aMaterial,"diamond"))
		Material = 11;
	else if(equali(aMaterial,"all"))
		Material = 12;
	else
		return console_print(id,"Usage: amx_%s_material <Nick> <Material> <Amount>",cForm[id]==1 ? "set" : "add");
		
	new iAmount = str_to_num(aAmount);
	if(cForm[id]==1 && iAmount < 0)
		return console_print(id,"The Minimum of the value to set material is 0");
	if(cForm[id]!=1 && iAmount < 1)
		return console_print(id,"The Minimum of the value to add material is 1");
	if( iAmount > 250)
		return console_print(id,"The Maximum of the value to %s material is 250",cForm[id]==1 ? "set" : "add");
	ColorChat(0,"^1Admin: ^4%s ^1has ^3%s ^4%d ^3%s ^1to the player ^4%s",get_name(id),cForm[id]==1 ? "setted" : "added",iAmount,szMaterial[Material-6],get_name(iPlayer));
	if (Material != 12 && cForm[id] == 0)
		return iData[iPlayer][Material] += iAmount;
	if (Material != 12 && cForm[id] == 1)
		return iData[iPlayer][Material] = iAmount;
	if (Material == 12 && cForm[id] == 0)
	{
		for(new i=6; i<=Diamond;i++)
			iData[iPlayer][i] += iAmount;
		return 1;
	}
	if (Material == 12 && cForm[id] == 1)
	{
		for(new i=6; i<KnifeData;i++)
			iData[iPlayer][i] = iAmount;
		return 1;
	}
	CmdSave(iPlayer);
	return 1;
}
public kSetCmd(id)
{
	if(!(get_user_flags(id) & ADMIN_IMMUNITY)) return 1;
	new Args[128],aTarget[32],aKnife[32];
	read_args(Args,charsmax(Args));
	remove_quotes(Args);
	parse(Args,aTarget,charsmax(aTarget),aKnife,charsmax(aKnife));
	if( equali(aTarget,"") || equali(aKnife,""))
		return console_print(id,"Usage: amx_set_knife <Nick> <knife>");
	new iPlayer = cmd_target( iPlayer, aTarget,8);
	if(!is_str_num(aKnife))
		return console_print(id,"You need to fill numbers in the Knife Number");
	if(!iPlayer)
		return console_print(id,"The Player has not found");
	new iKnife = str_to_num(aKnife);
	if( iKnife < 1)
		return console_print(id,"The Minimum of the value to set cash is 1");
	if( iKnife > KnivesAmount)
		return console_print(id,"The Maximum of the value to set knife is %d",KnivesAmount);
	ColorChat(0,"^1Admin: ^4%s ^1has ^3set ^4%s ^1knife to the player ^4%s",get_name(id),KnivesList[iKnife-1][Name],get_name(iPlayer));
	iData[iPlayer][lKnife] = iKnife -1;
	iData[iPlayer][uKnife] = iKnife -1;
	evCurWeapon2(iPlayer)
	CmdSave(iPlayer);
	return 1;
}
public CashCmd(id)
{
	if(!(get_user_flags(id) & ADMIN_IMMUNITY)) return 1;
	new Args[128],aTarget[32],aCash[32];
	read_args(Args,charsmax(Args));
	remove_quotes(Args);
	parse(Args,aTarget,charsmax(aTarget),aCash,charsmax(aCash));
	if( equali(aTarget,"") || equali(aCash,""))
		return console_print(id,"Usage: %s%s%s <Nick> <Cash>",cForm[id] == 0 ? "amx_add_cash" : "",cForm[id] ==1 ? "amx_set_cash" : "",cForm[id] == 2 ? "amx_remove_cash" : "");
	new iPlayer = cmd_target( iPlayer, aTarget,8);
	if(!is_str_num(aCash))
		return console_print(id,"You need to fill numbers in the Cash Amount");
	if(!iPlayer)
		return console_print(id,"The Player has not found");
	new iCash = str_to_num(aCash);
	if( iCash < 0)
		return console_print(id,"The Minimum of the value to %s%s%s cash is 0",cForm[id] == 0 ? "add" : "",cForm[id] == 1 ? "set" : "",cForm[id] == 2 ? "remove" : "");
	if( iCash > 999999999)
		return console_print(id,"The Maximum of the value to %s%s%s cash is 999999999",cForm[id] == 0 ? "add" : "",cForm[id] == 1 ? "set" : "",cForm[id] == 2 ? "remove" : "");
	ColorChat(0,"^1Admin: ^4%s ^1has ^3%s%s%s ^4%d ^1cash to the player ^4%s",get_name(id),cForm[id] == 0 ? "added" : "",cForm[id] == 1 ? "setted" : "",cForm[id] == 2 ? "removed" : "",iCash,get_name(iPlayer));
	switch (cForm[id])
	{
		case 0: iData[iPlayer][Cash] += iCash
		case 1: iData[iPlayer][Cash] = iCash
		case 2: iData[iPlayer][Cash] -= iCash
	}
	
	if (iData[iPlayer][Cash] > 2147483647)
		iData[iPlayer][Cash] = 2147483647;
	if (iData[iPlayer][Cash] < 0)
		iData[iPlayer][Cash] = 0;
	CmdSave(iPlayer);
	return 1;
}
public BankCmd(id)
{
	if(!(get_user_flags(id) & ADMIN_IMMUNITY)) return 1;
	new Args[128],aTarget[32],aBank[32];
	read_args(Args,charsmax(Args));
	remove_quotes(Args);
	parse(Args,aTarget,charsmax(aTarget),aBank,charsmax(aBank));
	if(equali(aTarget,"") || equali(aBank,""))
		return console_print(id,"Usage: %s%s%s <Nick> <Cash>",cForm[id] == 0 ? "amx_add_cash" : "",cForm[id] ==1 ? "amx_set_cash" : "",cForm[id] == 2 ? "amx_remove_cash" : "");
	new iPlayer = cmd_target( iPlayer, aTarget,8);
	if(!is_str_num(aBank))
		return console_print(id,"You need to fill numbers in the Cash Amount");
	if(!iPlayer)
		return console_print(id,"The Player has not found");
	new iBank = str_to_num(aBank);
	if( iBank < 0)
		return console_print(id,"The Minimum of the value to %s%s%s bank cash is 0",cForm[id] == 0 ? "add" : "",cForm[id] == 1 ? "set" : "",cForm[id] == 2 ? "remove" : "");
	if( iBank > 999999999)
		return console_print(id,"The Maximum of the value to %s%s%s bank cash is 999999999",cForm[id] == 0 ? "add" : "",cForm[id] == 1 ? "set" : "",cForm[id] == 2 ? "remove" : "");
	ColorChat(0,"^1Admin: ^4%s ^1has ^3%s%s%s ^4%d ^1bank cash to the player ^4%s",get_name(id),cForm[id] == 0 ? "added" : "",cForm[id] == 1 ? "setted" : "",cForm[id] == 2 ? "removed" : "",iBank,get_name(iPlayer));
	switch (cForm[id])
	{
		case 0: iData[iPlayer][Bank] += iBank
		case 1: iData[iPlayer][Bank] = iBank
		case 2: iData[iPlayer][Bank] -= iBank
	}
	
	if (iData[iPlayer][Bank] > 2147483647)
		iData[iPlayer][Bank] = 2147483647;
	if (iData[iPlayer][Bank] < 0)
		iData[iPlayer][Bank] = 0;
	CmdSave(iPlayer);
	return 1;
}		
public GambleCmd(id)
{
	new CashAmount[32],b_gambleWin[33];
	read_argv(1,CashAmount,charsmax(CashAmount))
	
	replace( CashAmount, charsmax(CashAmount), "k", "000" );
	replace( CashAmount, charsmax(CashAmount), "m", "000000" );
	new Amount = str_to_num(CashAmount);
	
	if (equali(CashAmount,"all"))
		Amount=iData[id][Cash];	
	else if ( equali( CashAmount, "/gamble" ) ||  !is_str_num(CashAmount))
		return ColorChat(id,"^1Syntax: /^4gamble^1 <^3amount^1>");	
	if ( Amount > iData[id][Cash])
		return ColorChat(id,"^1You don't have this amount of cash.");	
	if ( Amount < 200)
		return ColorChat(id,"^1You need to gamble on minimum of^4 %d Cash^1 at a time.", 200 );		
	new g_iChance = random_num( 1, 100 );		
	new PremAmount = Amount/100 * 105;
	b_gambleWin[id] = false;
	new bool:All[33];
	if (Amount == iData[id][Cash])
		All[id] = true;
	if(is_user_premium(id))
	{	
		if ( g_iChance <= 50 && !BlackList[id] )
		{
			b_gambleWin[id] = true;
			if(BlackList[id])
				b_gambleWin[id] = false;
			iData[id][Cash] += PremAmount
			ilData[id][WinGambles] ++;
			ilData[id][WinCashGambles] += Amount;
		}
		if (!b_gambleWin[id])
		{
			iData[id][Cash] -= Amount;
			ilData[id][LoseGambles] ++;
			ilData[id][LoseCashGambles] += Amount;
		}
		for(new i = 1; i <= MaxPlayers; i++)
		{
			if(!is_user_connected(i))
				continue;
			if(id == i)
			{
				ColorChat(i,"You have gambled%s on ^4%d ^1cash and ^3%s.",All[id] ? " ^3Allin^1" : "", Amount,b_gambleWin[id] ?"won ^1[^3+5%^1]" : "lost");
				continue;
			}
			switch(iData[i][GambleMode])
			{
				case 0:
					ColorChat(i,"^3%s ^1has gambled%s on ^4%d ^1cash and ^3%s.",get_name(id),All[id] ? " ^3Allin^1" : "", Amount,b_gambleWin[id] ?"won ^1[^3+5%^1]" : "lost");
				case 1:
					if(Amount >= 1000)
						ColorChat(i,"^3%s ^1has gambled%s on ^4%d ^1cash and ^3%s.",get_name(id),All[id] ? " ^3Allin^1" : "", Amount,b_gambleWin[id] ?"won ^1[^3+5%^1]" : "lost");
				case 2: continue;
			}
		}
	}
	else
	{
		if ( g_iChance <= 45 && !BlackList[id] )
		{
			b_gambleWin[id] = true;
			iData[id][Cash] += Amount
			ilData[id][WinGambles] ++;
			ilData[id][WinCashGambles] += Amount;
		}
		if (!b_gambleWin[id])
		{
			iData[id][Cash] -= Amount;
			ilData[id][LoseGambles] ++;
			ilData[id][LoseCashGambles] += Amount;
		}
		for(new i = 1; i <= MaxPlayers; i++)
		{
			if(!is_user_connected(i))
				continue;
			if(id == i)
			{
				ColorChat(i,"You have gambled%s on ^4%d ^1cash and ^3%s",All[id] ? " ^3Allin^1" : "", Amount,b_gambleWin[id] ?"won" : "lost");
				continue;
			}
			switch(iData[i][GambleMode])
			{
				case 0:
					ColorChat(i,"^3%s ^1has gambled%s on ^4%d ^1cash and ^3%s",get_name(id),All[id] ? " ^3Allin^1" : "", Amount,b_gambleWin[id] ?"won" : "lost");
				case 1:
					if(Amount >= 1000)
						ColorChat(i,"^3%s ^1has gambled%s on ^4%d ^1cash and ^3%s",get_name(id),All[id] ? " ^3Allin^1" : "", Amount,b_gambleWin[id] ?"won" : "lost");
				case 2: continue;
			}
		}
		
	}
	ilData[id][Gambles] ++;
	ilData[id][CashGambles] += Amount;
	
	if (iData[id][Cash] < 0 || iData[id][Cash] >= 2147483647)
		iData[id][Cash] = 0;
	if(ShowCash[id])
		client_cmd(id,"say /cash");
	ShowCash[id] = false;
	return 1;
}
stock CmdLoad(index)
{
	if(containi(get_name(index),"#") != -1)
	{
		server_cmd("kick #%d ^"You cannot connect with that name^"",get_user_userid(index));
		return;
	}
	new szData[500];
	new Set[GambleMode] = {1500,0,0,0,0,5,0,0,0,0,0,0}
	if(!(fvault_get_data(szVault,get_key(index),szData,charsmax(szData))))
	{
		for(new i;i<=Diamond;i++)
			iData[index][i]=Set[i];
		return;
	}
	replace_all(szData,charsmax(szData),"#"," ");
	new Data[GambleMode+1][11];
	parse(szData,Data[Cash],10,Data[Bank],10,Data[uKnife],10,Data[lKnife],10,Data[Tickets],10,Data[nCash],10,Data[Wood],10,
	Data[Steel],10,Data[Iron],10,Data[Leather],10,Data[Gold],10,Data[Diamond],10,Data[GambleMode],10);
	
	for(new i;i<=GambleMode;i++)
		iData[index][i]=str_to_num(Data[i]);
		
	set_user_tickets(index,str_to_num(Data[4]));
	
	for(new i;i<GambleLimitData;i++)
		ilData[index][i]=0;
	
	iTop[index] = 0;
	/*
	new szTemp[60];
	//formatex(szData,charsmax(szData),"");
	szData = "";
	
	for(new i=0;i<=Diamond;i++)
	{
		formatex(szTemp,charsmax(szTemp),"#%d",iData[i]);
		add(szData,charsmax(szData),szTemp);
	}
	formatex(szTemp,charsmax(szTemp),"#%s",get_name(index));
	replace_all(szTemp,charsmax(szTemp)," ","$%&");
	add(szData,charsmax(szData),szTemp);
	formatex(szTemp,charsmax(szTemp),"#%s",get_auth(index));
	add(szData,charsmax(szData),szTemp);
	formatex(szTemp,charsmax(szTemp),"#%s",get_ip(index));
	add(szData,charsmax(szData),szTemp);
	
	fvault_set_data(szVault,get_key(index),szData);*/
}
stock CmdSave(index)
{
	if(containi(get_name(index),"#") != -1)
	{
		server_cmd("kick #%d ^"You play with that name^"",get_user_userid(index));
		return;
	}
	new szTemp[60],szData[500];
	iData[index][Tickets] = get_user_tickets(index);
	for(new i;i<=GambleMode;i++)
	{
		formatex(szTemp,charsmax(szTemp),"#%d",iData[index][i]);
		add(szData,charsmax(szData),szTemp);
	}
	formatex(szTemp,charsmax(szTemp),"#%s",get_name(index));
	replace_all(szTemp,charsmax(szTemp)," ","$%&");
	add(szData,charsmax(szData),szTemp);
	formatex(szTemp,charsmax(szTemp),"#%s",get_auth(index));
	add(szData,charsmax(szData),szTemp);
	formatex(szTemp,charsmax(szTemp),"#%s",get_ip(index));
	add(szData,charsmax(szData),szTemp);
	fvault_set_data(szVault,get_key(index),szData);
}
/*
stock CmdLoad(index)
{
	new szAuth[60],szData[1024];
	new Set[PlayerData] = {1500,0,0,0,0,1,0,0,0,0,0}
	formatex(szAuth,charsmax(szAuth),"%s",get_key(index));
	if(!(fvault_get_data(szVault,szAuth,szData,charsmax(szData))))
	{
		for(new i=0;i<=Diamond;i++)
			iData[index][i]=Set[i];
		return;
	}
	replace_all(szData,charsmax(szData),"#"," ");
	new sData[PlayerData][16];
	parse(szData,sData[0],15,sData[1],15,sData[2],15,sData[3],15,sData[4],15,sData[5],15,
	sData[6],15,sData[7],15,sData[8],15,sData[9],15,sData[10],15,sData[11],15)
	for(new i;i<=Diamond;i++)
		iData[index][i]=str_to_num(sData[i]);
	set_user_tickets(index,str_to_num(sData[4]));
}
stock CmdSave(index)
{
	new szTemp[11],szData[1000];
	iData[index][4] = get_user_tickets(index)
	for(new i=0;i<=Diamond;i++)
	{
		formatex(szTemp,charsmax(szTemp),"#%d",iData[index][i]);
		add(szData,charsmax(szData),szTemp);
	}
	fvault_set_data(szVault,get_key(index),szData);
}*/
stock get_key(index)
{
	static Text[55];
	switch(SaveType)
	{
		case 0:
			formatex(Text,charsmax(Text),"%s",get_auth(index));
		case 1:
			formatex(Text,charsmax(Text),"%s",get_ip(index));
		case 2:
			formatex(Text,charsmax(Text),"%s%s",get_ip(index),get_auth(index));
	}
	return Text;
}
stock get_auth(index)
{
	static szAuth[35];
	get_user_authid(index,szAuth,charsmax(szAuth));
	if(contain(szAuth,"VALVE_")!=-1||contain(szAuth,"ID_LAN")!=-1)
		get_user_ip(index,szAuth,charsmax(szAuth),1);
	return szAuth;
}
stock get_ip(index)
{
	static szAuth[20];
	get_user_ip(index,szAuth,charsmax(szAuth),1);
	return szAuth;
}
stock get_name(index)
{
	new szName[33];
	get_user_name(index,szName,charsmax(szName))
	return szName;
}
public prizatcash(id)
{
	iData[id][Cash] += 5400000;
	for(new i=6; i<=Diamond; i++)
		iData[id][i] += 60;
}


// BANK DATA

public ForwardPlayerNPC( id )
{
	pev( id, pev_origin, g_NpcXYZ[ id ] )
	ShowBankMenu( id );
}/*
public ShowBankMenu( id )
{
	new szBuffer[ 512 ];
	new iLen;
	new iKeys = ( 1<<0 | 1<<1 | 1<<9 );
	
	if( !is_user_alive( id ) )
		return;
	
	iLen = formatex(szBuffer, sizeof szBuffer - 1, "\r[\w %s \r]\y Bank Menu^n^n", TAG);
	
	iLen += formatex(szBuffer[iLen], (sizeof szBuffer - 1) - iLen, "\y1. \rDeposit^n");
	iLen += formatex(szBuffer[iLen], (sizeof szBuffer - 1) - iLen, "\y2. \rWithdraw^n^n");
	
	iLen += formatex(szBuffer[iLen], (sizeof szBuffer - 1) - iLen, "\rBalance on you:\y %d^n", iData[id][Cash]);
	iLen += formatex(szBuffer[iLen], (sizeof szBuffer - 1) - iLen, "\rBalance in bank:\y %d^n", iData[id][Bank]);
	iLen += formatex(szBuffer[iLen], (sizeof szBuffer - 1) - iLen, "\rTotal cash:\y %d^n^n", iData[id][Bank] + iData[id][Cash]);
	
	iLen += formatex(szBuffer[iLen], (sizeof szBuffer - 1) - iLen, "^n\y0. \rExit"); 
	
	show_menu( id, iKeys, szBuffer, -1, "Bank Menu" );
	
}*/
public ShowBankMenu(id)
{
	new Info[128];
	formatex(Info,127,"\r[\w %s \r] \wBankMenu",TAG);
	new bMenu = menu_create(Info,"HandleBankMenu");
	
	menu_additem(bMenu,"\wDeposit \rCash \d(Give to Banker)");
	menu_additem(bMenu,"\wWithDraw \rCash \d(Take From Banker)^n");
	formatex(Info,127,"\rPocket \dCash: \w%d",iData[id][Cash]);
	menu_addtext(bMenu,Info);
	formatex(Info,127,"\rBank \dCash: \w%d",iData[id][Bank]);
	menu_addtext(bMenu,Info);
	formatex(Info,127,"\rTotal \dCash: \w%d",iData[id][Cash]+iData[id][Bank]);
	menu_addtext(bMenu,Info);
	
	menu_display(id,bMenu);
	return 1;
}	
public HandleBankMenu( id,bMenu, Item )
{
	if( Item == MENU_EXIT )
	{
		menu_destroy(bMenu);
		return 1;	
	}
	static Float:fOrigin[ 3 ];
	pev( id, pev_origin, fOrigin );
	
	switch(Item)
	{
		case 0:
		{
			if( get_distance_f( fOrigin, g_NpcXYZ[ id ] ) > 10.0 )
				ColorChat(id,"^1you must be near the ^3Banker^1." );
			else
				client_cmd( id, "messagemode Deposit" );
		}
		case 1:
		{
			if( get_distance_f( fOrigin, g_NpcXYZ[ id ] ) > 10.0 )
				ColorChat(id,"^1you must be near the ^3Banker^1." );
			else
				client_cmd( id, "messagemode Withdraw" );
		}
	}
	menu_destroy(bMenu);
	return 1;
}
public DepositCash( id )
{
	static Float:fOrigin[ 3 ];
	pev( id, pev_origin, fOrigin );
	if( get_distance_f( fOrigin, g_NpcXYZ[ id ] ) > 10.0 )
		ColorChat(id,"^1you must be near the ^3Banker^1." );
	else
	{
		new szAps[ 11 ];
		read_args( szAps, 10 );
		remove_quotes( szAps );
		
		if(equal(szAps, "") || equal(szAps, " "))
			return PLUGIN_HANDLED;
		
		new iAps = str_to_num(szAps);
		
		if(iAps < 1) 	return PLUGIN_HANDLED;
		
		if(iAps  <=  iData[id][Cash])
		{
			iData[id][Cash] -= iAps;
			iData[id][Bank] += iAps;
			ColorChat(id,"^1You have Deposit^3 %d ^1Cash.", iAps );
			return PLUGIN_CONTINUE;
		}
		else
		{
			ColorChat(id,"^1You dont have^3 %d Cash^1.", iAps );
		}
	}
	
	return PLUGIN_CONTINUE;
}

public WithdrawCash( id )
{
	static Float:fOrigin[ 3 ];
	pev( id, pev_origin, fOrigin );
	if( get_distance_f( fOrigin, g_NpcXYZ[ id ] ) > 10.0 )
		ColorChat(id,"^1you must be near the ^3Banker^1." );
	else
	{
		new szAps[ 11 ];
		read_args( szAps, 10 );
		remove_quotes( szAps );
		
		if(equal(szAps, "") || equal(szAps, " "))
			return PLUGIN_HANDLED;
		
		new iAps = str_to_num(szAps);
		
		if(iAps < 1) 	return PLUGIN_HANDLED;
		
		if(iAps <= iData[id][Bank])
		{
			iData[id][Cash] += iAps;
			iData[id][Bank] -= iAps;
			ColorChat(id,"^1You have Withdraw^3 %d ^1Cash.", iAps );
			return PLUGIN_CONTINUE;
		}
		else
		{
			ColorChat(id,"^1You dont have^3 %d Cash^1, in your Bank", iAps );
		}
	}
	
	return PLUGIN_CONTINUE;
}

stock fm_strip_user_weapons2(client)
{
        new ent = fm_create_entity( "player_weaponstrip" );       
        if ( !pev_valid( ent ) )
                return;
 
        dllfunc( DLLFunc_Spawn, ent );
        dllfunc( DLLFunc_Use, ent, client );
        engfunc( EngFunc_RemoveEntity, ent );
 
        return;
} 
stock CountPlayers()
{
	static Players[ 32 ], iNum;
	get_players( Players, iNum, "ch" );
	return iNum;
}



stock ColorChat( const iPlayer, const szMsg[ ], { Float, Sql, Resul, _ } : ... )        
{
	new iMsg[ 191 ], iPlayers[ 32 ], iCount = 1;
	static iLen;
	iLen = formatex( iMsg, charsmax( iMsg ), "^4[^1 %s ^4] ^1",Chat_TAG );
	vformat( iMsg[ iLen ], charsmax( iMsg ) - iLen, szMsg, 3 );
	if ( iPlayer )
		iPlayers[ 0 ] = iPlayer;
	else    
		get_players( iPlayers, iCount, "ch" );  
	for ( new i = 0; i < iCount; i++ )
	{
		if ( ! is_user_connected( iPlayers[ i ] ) )
			continue;
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _,iPlayers[ i ] );
		write_byte( iPlayers[ i ] );
		write_string( iMsg );
		message_end( );
	}
	return 1;
}

stock JB_Print(const id, const string[], {Float, Sql, Resul,_}:...)
{
	new msg[191], players[32], count = 1;
	
	static len;
	len = formatex(msg, charsmax(msg), "^4[^1%s^4] ^1",Chat_TAG );
	vformat(msg[len], charsmax(msg) - len, string, 3);
	
	if(id)	players[0] = id;
	else 	get_players(players,count,"ch");
	
	for (new i = 0; i < count; i++)
	{
		if(g_connected[players[i]])
		{
			message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("SayText"),_, players[i]);
			write_byte(players[i]);
			write_string(msg);
			message_end();
                }
        }
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
