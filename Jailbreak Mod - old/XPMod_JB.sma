/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fvault>
#include <fun>
#include <cstrike>
#include <fakemeta_util>
#include <fakemeta>

#define Levels_List 45
#define TAG "eTs"
#define Chat_TAG "eTs"
#define s_IP "31.168.169.42:40800"

#define Year_Expired 2018
#define Month_Expired 1
#define Block_Task 1042

//2native get_user_boost_xp(index)
native is_user_premium(index);
native get_lr_run();


enum _: PlayerData
{
	Level,
	XP,
}

enum _: Events
{
	EventXP2,
	EventXP3
}

new EventName[Events][30] = {"Event x2 XP","Event x3 XP"};

new szVault [] = "JB_XP_Players_"

new Levels[Levels_List +1] =
{
	0,	// Start - Level 1
	5,	// Up To Lv2
	12, 	// Up To Lv3
	21, 	// Up To Lv4
	32, 	// Up To Lv5
	45,	// Up To Lv6
	60,	// Up To Lv7
	77,	// Up To Lv8
	96,	// Up To Lv9
	117,	// Up To Lv10
	140,	// Up To Lv11
	165,	// Up To Lv12
	192,	// Up To Lv13
	221,	// Up To Lv14
	252,	// Up To Lv15
	285,	// Up To Lv16
	320,	// Up To Lv17
	357,	// Up To Lv18
	396,	// Up To Lv19
	437,	// Up To Lv20
	480,	// Up To Lv21
	525,	// Up To Lv22
	572,	// Up To Lv23
	621,	// Up To Lv24
	672,	// Up To Lv25
	725,	// Up To Lv26
	780,	// Up To Lv27
	807,	// Up To Lv28
	866,	// Up To Lv29
	927,	// Up To Lv30
	990,	// Up To Lv31
	1055,	// Up To Lv32
	1112,	// Up To Lv33
	1191,	// Up To Lv34
	1262,	// Up To Lv35
	1335,	// Up To Lv36
	1410,	// Up To Lv37
	1487,	// Up To Lv39
	1566,	// Up To Lv39
	1647,	// Up To Lv40
	1730,	// Up To Lv41
	1815,	// Up To Lv42
	1902,	// Up To Lv43
	1991,	// Up To Lv44
	2082,	// Up To Lv45
	2147483647,	// MAX
}

new iData[33][PlayerData],NumberKill[33],XPKill[33],bool:EventRun,EventList,bool:BlockKill;//,iHudMessage;

public plugin_init() {
	
	new Year[6],Month[3],year,month,serverIP[20];
	format_time(Year,charsmax(Year),"%Y",get_systime())
	format_time(Month,charsmax(Month),"%m",get_systime())
	year = str_to_num(Year);
	month = str_to_num(Month);
	get_user_ip(0,serverIP,charsmax(serverIP),0);
	if((year > Year_Expired || (year == Year_Expired && month >= Month_Expired)) || (!equali(s_IP,serverIP)))
		set_fail_state("Mod Time has been expired or Your Server IP is not allowed");
	register_plugin("JailBreak XP Mod","1.1","MJ")
	
	//iHudMessage=CreateHudSyncObj();
	
	register_event("DeathMsg", "PlayerKill", "a");
	
	register_concmd("amx_set_level","LevelCmd");
	register_clcmd("say","SayHandle");
	
	register_event("HLTV","RoundStart","a", "1=0", "2=0");
}

public plugin_natives()
{
	register_native("get_user_level","_get_user_level")
	register_native("get_user_xp","_get_user_xp")
	register_native("set_user_xp","_set_user_xp")
}

public _get_user_level(plugin,param)
{
	new index = get_param(1);
	return iData[index][Level];
}
public _get_user_xp(plugin,param)
{
	new index = get_param(1);
	return iData[index][XP];
}
public _set_user_xp(plugin,param)
{
	new index = get_param(1);
	new Amount = get_param(2);
	iData[index][XP] = Amount;
	CheckLevelUP(index);
}
public RoundStart()
	if(EventRun)
		ColorChat(0,"^3%s ^1is running this round.",EventName[EventList]);

public SayHandle(id)
{
	new Cmd[192],Arg1[32],Arg2[32];
	read_argv(1,Cmd,charsmax(Cmd))
	parse(Cmd,Arg1,31,Arg2,31);
	new iPlayer = cmd_target(id,Arg2,8);
		
	if(equali(Arg1,"/level") || equali(Arg1,"/xp"))
	{
		if(equali(Arg2,""))
			iPlayer = id;
		if(!iPlayer)
			return ColorChat(id,"^1 The Target was not found");
		
		/*new kills;
		while(kills*XPKill[iPlayer] + iData[iPlayer][XP] < Levels[iData[iPlayer][Level]+1])
		{
			kills ++;
		}*/
		
		ColorChat(id,"^4%s ^1Info:",get_name(iPlayer))
		ColorChat(id,"^1[^3XP:^1 %d/%d][^3Level:^1 %d]",iData[iPlayer][XP],Levels[iData[iPlayer][Level]+1],iData[iPlayer][Level]+1)
		//ColorChat(id,"^1[^3Kills To Level UP:^1 %d]",kills);//(Levels[iData[iPlayer][Level]+1] - iData[iPlayer][XP])/XPKill[iPlayer])
		return 1;
	}
	if(equali(Arg1,"/events"))
	{
		if(get_user_flags(id) & ADMIN_IMMUNITY)
			EventsMenu(id)
		return 1;
	}
	return 0;
}
/*
public ShowInfo(id)
{
	if (XPKill[id] == 0)
		XPKill[id] = 500;
	
	new Kills = (Levels[iData[id][Level]+1] - iData[id][XP])/XPKill[id];
	if (Kills == 0)
		Kills ++;
	
	set_hudmessage(0, 170, 255, 0.02, 0.25,0, 6.0, 0.5,0,0,3)
	ShowSyncHudMsg(id, iHudMessage,"[XP: %d/%d][Level: %d]^n[Kills to LevelUP: %d]^n[Health: %d]",iData[id][XP],Levels[iData[id][Level]+1],iData[id][Level]+1,Kills,get_user_health(id));
	if(EventRun)
		ShowSyncHudMsg(id, iHudMessage,"[XP: %d/%d][Level: %d]^n[Kills to LevelUP: %d]^n[Health: %d]^n[Event Running: %s]",iData[id][XP],Levels[iData[id][Level]+1],iData[id][Level]+1,get_user_health(id),Kills,EventName[EventList]);
	set_task(0.5,"ShowInfo",id);
}*/

public EventsMenu(id)
{
	new Text[128];
	formatex(Text,charsmax(Text),"\r[ \w%s \r] \wEvents Menu",TAG);
	new eMenu = menu_create(Text,"EventHandler");
	
	new cb = menu_makecallback("CallBackEvent");
	
	formatex(Text,charsmax(Text),"\wEvent Mode \d[\r%s\d]",EventName[EventList]);
	menu_additem(eMenu,Text,.callback = cb);
	formatex(Text,charsmax(Text),"\wEvent Running \d[\r%s\d]",EventRun ? "Enable" : "Disable");
	menu_additem(eMenu,Text);
	
	menu_display(id,eMenu);
	return 1;
}

public CallBackEvent(id,eMenu,Item)
{
	if(EventRun)
		return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public EventHandler(id,eMenu,Item)
{
	switch(Item)
	{
		case MENU_EXIT:
		{
			menu_destroy(eMenu)
			return 1;
		}
		case 0:
		{
			EventList ++;
			if(EventList >= Events)
				EventList = 0;
		}
		case 1:
		{
			if(EventRun)
				EventRun = false;
			else
				EventRun = true;
			server_cmd("sv_restart 1");
		}
	}
	return EventsMenu(id)
}
	
public PlayerKill()
{
	if(BlockKill)
		return;
	new id = read_data(1);
	new killed = read_data(2);
	NumberKill[killed] = 0;
	XPKill[killed] = 0;
	if(killed == id || id == 0 || cs_get_user_team(id) == cs_get_user_team(killed) || cs_get_user_team(id) == CS_TEAM_CT)
		return;
	NumberKill[id] ++;
	new Kills = NumberKill[id];
	
	new r = random_num(1,255);
	new g = random_num(1,255);
	new b = random_num(1,255);
	
	new Kill[30]
	
	if(Kills == 1)
	{	
		XPKill[id] = 1;
		formatex(Kill,charsmax(Kill),"One Kill");
	}	
	else if(Kills == 2)
	{
		XPKill[id] = 2;
		formatex(Kill,charsmax(Kill),"Double Kill");
	}	
	else if(Kills == 3)
	{
		XPKill[id] = 3;
		formatex(Kill,charsmax(Kill),"Triple Kill");
	}
	else if(Kills >= 4)
	{
		XPKill[id] = 4;
		formatex(Kill,charsmax(Kill),"Mega Kill");
	}
	if(is_user_premium(id))
		XPKill[id] *= 2;
		
	
	if(EventRun && EventList == EventXP2)
		XPKill[id] *= 2
	
	if(EventRun && EventList == EventXP3)
		XPKill[id] *= 3
	
	//2XPKill[id] += get_user_boost_xp(id);
	
	
	//MSG KILL CT
	new Text[128];
	formatex(Text,charsmax(Text),"and has gotten ^4%d ^1XP for ^4%s",XPKill[id],Kill);	
	new pnumber,players[32];
	get_players(players,pnumber,"ch");
	if(!get_lr_run())
	{
		ColorChat(0,"^3%s ^1has killed the guard ^3%s^1 %s",get_name(id),get_name(killed),pnumber < 5 ? "" : Text );
		if(pnumber < 5)
			ColorChat(0,"^3%s ^1cannot get ^4XP^1, there are not ^3enough players ^1to get XP",get_name(id));
		else
		{
			iData[id][XP] += XPKill[id];
			CheckLevelUP(id)
			set_hudmessage(r,g,b, 0.50, 0.20,1, 6.0,2.0, 0.0, 0.0, 3)
			show_hudmessage(id, "%s +%d XP!",Kill,XPKill[id]);
		}
	}
	BlockKill = true;
	set_task(0.2,"AntiBlock",Block_Task);
	CmdSave(id);
}
public AntiBlock(Task)
	BlockKill = false;
stock CheckLevelUP(id)
{	
	if(iData[id][XP] >= Levels[iData[id][Level]+1])
	{
		iData[id][Level] ++;
		ColorChat(0,"^3%s ^1has Leveled Up to the Level^4 %d^1!",get_name(id),iData[id][Level]+1)
		CheckLevelUP(id)
	}
}
public LevelCmd(id)
{
	if(!(get_user_flags(id) & ADMIN_IMMUNITY)) return 1;
	new Args[128],aTarget[32],aLevel[32];
	read_args(Args,charsmax(Args));
	remove_quotes(Args);
	parse(Args,aTarget,charsmax(aTarget),aLevel,charsmax(aLevel));
	if( equali(aTarget,"") || equali(aLevel,""))
		return console_print(id,"Usage: amx_set_level <Nick> <Level>");
	new iPlayer = cmd_target( iPlayer, aTarget,8);
	if(!is_str_num(aLevel))
		return console_print(id,"You need to fill numbers in the Level Amount");
	if(!iPlayer)
		return console_print(id,"The Player has not found");
	new iLevel = str_to_num(aLevel);
	if( iLevel < 1)
		return console_print(id,"The Minimum of the value to set level is 1");
	if( iLevel > Levels_List)
		return console_print(id,"The Maximum of the value to set level is %d",Levels_List);
	ColorChat(0,"^1Admin: ^4%s ^1has ^3setted ^4%d ^1level to the player ^4%s",get_name(id),iLevel,get_name(iPlayer));
	iData[iPlayer][Level] = iLevel-1;
	iData[iPlayer][XP] = Levels[iLevel-1];
	CmdSave(iPlayer);
	return 1;
}

public plugin_cfg()  
{  
    register_message(get_user_msgid("StatusIcon"), "Message_StatusIcon"); 
} 

public Message_StatusIcon(iMsgId, iMsgDest, id)  
{  
    static szIcon[8];  
    get_msg_arg_string(2, szIcon, charsmax(szIcon));  
    if( equal(szIcon, "buyzone") ) 
    {  
        if( get_msg_arg_int(1) )  
        {  
            set_pdata_int(id, 235, get_pdata_int(id, 235) & ~(1<<0)); 
            return PLUGIN_HANDLED;  
        }  
    }  
      
    return PLUGIN_CONTINUE;  
}

public FwdCmdStart(plr, uc_handle, seed) 
{ 
    static clip, ammo; 
    if( !is_user_alive(plr) 
    || get_user_weapon(plr, clip, ammo) != CSW_C4 ) 
    { 
        return FMRES_IGNORED; 
    } 
     
    new buttons = get_uc(uc_handle, UC_Buttons); 
    if( buttons&IN_ATTACK ) 
    { 
        buttons &= ~IN_ATTACK; 
        set_uc(uc_handle, UC_Buttons, buttons); 
         
        return FMRES_SUPERCEDE; 
    } 
     
    return FMRES_IGNORED; 
}  

//Saving & Loading
public client_connect(id)
{
	CmdLoad(id)
	XPKill[id] = 2;
	if(is_user_premium(id))
		XPKill[id] *= 2;
}
	
public client_disconnect(id)
	CmdSave(id)

stock CmdLoad(index)
{
	new szAuth[60],szData[1024];
	new Set[PlayerData] = {0,0}
	formatex(szAuth,charsmax(szAuth),"%s",GetAuth(index));
	if(!(fvault_get_data(szVault,szAuth,szData,charsmax(szData))))
	{
		for(new i=0;i<PlayerData;i++)
			iData[index][i]=Set[i];
		return;
	}
	replace_all(szData,charsmax(szData),"#"," ");
	new sData[PlayerData][8];
	parse(szData,sData[0],7,sData[1],7)
	for(new i;i<PlayerData;i++)
		iData[index][i]=str_to_num(sData[i]);
	log_amx(szData);
}

stock CmdSave(index)
{
	new szTemp[11],szData[1000];
	for(new i=0;i<PlayerData;i++)
	{
		formatex(szTemp,charsmax(szTemp),"#%d",iData[index][i]);
		add(szData,charsmax(szData),szTemp);
	}
	log_amx(szData);
	fvault_set_data(szVault,GetAuth(index),szData);
}

stock GetAuth(index)
{
	static szAuth[60];
	get_user_authid(index,szAuth,charsmax(szAuth));
	if(contain(szAuth,"VALVE_")!=-1||contain(szAuth,"ID_LAN")!=-1)
	get_user_ip(index,szAuth,charsmax(szAuth),1);
	return szAuth;
}

stock get_name(index)
{
	new szName[33];
	get_user_name(index,szName,charsmax(szName))
	return szName;
}



stock ColorChat( const iPlayer, const szMsg[ ], { Float, Sql, Resul, _ } : ... )        
{
	new iMsg[ 191 ], iPlayers[ 32 ], iCount = 1;
	static iLen;
	iLen = formatex( iMsg, charsmax( iMsg ), "^4[^1 %s ^4] ^1",Chat_TAG );
	vformat( iMsg[ iLen ], charsmax( iMsg ) - iLen, szMsg, 3 );
	if ( iPlayer )
		iPlayers[ 0 ] = iPlayer;
	else    
		get_players( iPlayers, iCount, "ch" );  
	for ( new i = 0; i < iCount; i++ )
	{
		if ( ! is_user_connected( iPlayers[ i ] ) )
			continue;
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _,iPlayers[ i ] );
		write_byte( iPlayers[ i ] );
		write_string( iMsg );
		message_end( );
	}
	return 1;
}
