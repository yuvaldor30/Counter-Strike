/* Plugin generated by AMXX-Studio */

#include "amxmodx.inc"
#include "fvault.inc"
#include "hitandrun.inc"

#define PLUGIN "Skills System"
#define VERSION "1.0"
#define AUTHOR "MJ"

#define PREFIX "Skills System"

#define ONE_UPGRADE_SKILL "One Upgrade"
#define ONE_UPGRADED_SKILL "Upgraded"

#define ONE_UPGRADE_TYPE_SKILL "Non-Upgradeable"
#define UPGRADE_TYPE_SKILL "Upgradeable"

#define UPGRADED_MAX_SKILL "Fully Upgraded"

#define MAX_LEVEL 10

#pragma semicolon 1

enum _: SKILLS
{
	SKILL_BULLETS, 
	SKILL_SPEED,
	SKILL_CASH, 
	SKILL_EXPERIENCE,
	SKILL_USP,
	SKILL_SHOTGUN,
	SKILL_HEGRENADE,
	SKILL_FLASHBANG,
	SKILL_SMOKEGRENADE
};

enum _: eSkillData
{
	sd_szName[20],
	sd_szBonus[20],
	sd_szSummary[128],
	sd_iLevels,
	sd_iStat[MAX_LEVEL + 1],
	sd_iRequiredRebirth[MAX_LEVEL + 1],
	sd_iPrice[MAX_LEVEL + 1]
}

new const g_aSkills[SKILLS][eSkillData] =
{
	{
		"Bonus Bullets",
		"Bullet",
		"Upgardes the \ramount of bullets \yof your scout ^nthat you will get at the start of the round",
		10,
		{0	,2	,4	,5	,6	,7	,8	,9	,10	,11	,12},
		{0	,0	,0	,0	,1	,2	,2	,3	,4	,5	,6},
		{0	,6	,14	,26	,30	,35	,44	,50	,55	,60	,65}
	},
	{
		"Bonus Speed",
		"Units",
		"Upgrades your \rmaximum movement speed\y",
		10,
		{0	,500	,1000	,1500	,2000	,2500	,3000	,3500	,4000	,4500	,5000},
		{0	,0	,0	,0	,1	,2	,2	,3	,4	,5	,6},
		{0	,6	,14	,26	,30	,35	,44	,50	,55	,60	,65}
	},
	{
		"Cash Multiply",
		"Cash",
		"Upgrade the \rmultiply cash \yof getcash, ^nnextcash and supply box cash",
		10,
		{0,	250	,500	,750	,1000	,1250	,1500	,1750	,2000	,2250	,2500},
		{0	,0	,0	,0	,1	,2	,2	,3	,4	,5	,6},
		{0	,6	,14	,26	,30	,35	,44	,50	,55	,60	,65}
	},
	{
		"Experience Multiply",
		"Experience",
		"Upgrade the \rmultiply experience \yof ^nkilling teammate, winning round or event",
		10,
		{0,	250	,500	,750	,1000	,1250	,1500	,1750	,2000	,2250	,2500},
		{0	,0	,0	,0	,1	,2	,2	,3	,4	,5	,6},
		{0	,6	,14	,26	,30	,35	,44	,50	,55	,60	,65}
	},
	{
		"USP Chance",
		"Chance",
		"Add chance to \rget the pistol usp ^n\yat the start of the round",
		3,
		{0	,1000	,1500	,2000	,0,0,0,0,0,0,0},
		{0	,2	,3	,4	,0,0,0,0,0,0,0},
		{0	,10	,20	,40	,0,0,0,0,0,0,0}
	},
	{
		"Shotgun Chance",
		"Chance",
		"Add chance to \rget the gun shotgun ^n\yat the start of the round",
		3,
		{0	,1000	,1500	,2000	,0,0,0,0,0,0,0},
		{0	,2	,3	,4	,0,0,0,0,0,0,0},
		{0	,40	,20	,40	,0,0,0,0,0,0,0}
	},
	{
		"Bonus Hegrenade",
		"Hegrenade",
		"Upgardes the \ramount of hegrenades ^n\ythat you will get at the start of the round",
		1,
		{0	,1	,0,0,0,0,0,0,0,0,0},
		{0	,2	,0,0,0,0,0,0,0,0,0},
		{0	,25	,0,0,0,0,0,0,0,0,0}
	},
	{
		"Bonus Flashbang",
		"Flashbang",
		"Upgardes the \ramount of flashbangs ^n\ythat you will get at the start of the round",
		1,
		{0	,1	,0,0,0,0,0,0,0,0,0},
		{0	,1	,0,0,0,0,0,0,0,0,0},
		{0	,15	,0,0,0,0,0,0,0,0,0}
	},
	{
		"Bonus Smoke",
		"Smoke",
		"Upgardes the \ramount of smoke grenades ^n\ythat you will get at the start of the round",
		1,
		{0	,1	,0,0,0,0,0,0,0,0,0},
		{0	,2	,0,0,0,0,0,0,0,0,0},
		{0	,25	,0,0,0,0,0,0,0,0,0}
	}
};

enum _: ePlayerData
{
	pd_iSkillPoints,
	pd_iSkillLevel[SKILLS],
}
	

enum _: eOldMenu
{
	om_szMenu[20],
	om_szHandler[30]
}

enum _: OLD_MENUS
{
	OLDMENU_SKILLSMAIN,
	OLDMENU_VIEWSKILL,
	OLDMENU_MAINMANAGEDATA,
	OLDMENU_MANAGEDATA,
	OLDMENU_MANAGESKILLSDATA
}

new g_szOldMenus[OLD_MENUS][eOldMenu] =
{
	{"Skills_Main","handler_SkillsMain"},
	{"View_Skill","handler_ViewSkill"},
	{"Main_Manage_Data","handler_ManageDataMain"},
	{"ManageData","handler_ManageData"},
	{"Manage_Skills_Data","handler_ManageSkillsData"}
};

enum _: MODES
{
	MODE_ONLINE,
	MODE_OFFLINE
}

enum _: TYPES
{
	TYPE_CASH,
	TYPE_KNIFE
}

enum _: eManageData
{
	md_szKey[25],
	md_iModeData,
	md_iEditType
};


new g_iData[MAX_PLAYERS + 1][ePlayerData];

new g_aManageData[MAX_PLAYERS + 1][eManageData];

new g_iTargetData[MAX_PLAYERS + 1][ePlayerData];

new g_iViewed[MAX_PLAYERS + 1];

new const g_szFileVault[] = "SkillsData";

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	for(new i; i < OLD_MENUS; i++)
		register_menucmd(register_menuid(g_szOldMenus[i][om_szMenu]),1023,g_szOldMenus[i][om_szHandler]);
	
	register_clcmd("say","cmd_SayHandler");
	
	register_clcmd("skills_managedata_key","cmd_KeyDataHandler");
	register_clcmd("skills_managedata_data","cmd_DataHandler");
}

public plugin_natives()
{	
	register_native("skill_GetUserData","cmd_GetUserData");
	register_native("skill_SetUserData","cmd_SetUserData");
	register_native("skill_GetUserStatData","cmd_GetUserStatData");
	register_native("skill_GetUserFloatStatData","cmd_GetUserFloatStatData");
}

public cmd_GetUserData(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2);
	
	return g_iData[iIndex][iData];
}

public cmd_SetUserData(const iParams,const iPluginID)
{
	new iRequiredParams = 3;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2);
	new iAmount = get_param(3);
	
	g_iData[iIndex][iData] = iAmount;
	
	return 1;
}

public cmd_GetUserStatData(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2);
	
	return g_aSkills[iData][sd_iStat][g_iData[iIndex][pd_iSkillLevel][iData]];
}

public Float:cmd_GetUserFloatStatData(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0.0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2);
	
	if(iData == SKILLS_DATA_SKILL_SPEED || iData == SKILLS_DATA_SKILL_USP || iData == SKILLS_DATA_SHOTGUN)
		return float(g_aSkills[iData][sd_iStat][g_iData[iIndex][pd_iSkillLevel][iData]]) / 100.0;
	
	return float(g_aSkills[iData][sd_iStat][g_iData[iIndex][pd_iSkillLevel][iData]]) / 10000.0;
}


public client_authorized(iIndex)
{
	arrayset(g_iData[iIndex],0,sizeof g_iData[]);

	cmd_LoadData(iIndex);
}

public client_disconnected(iIndex)
{
	cmd_SaveData(iIndex);
}

public cmd_SayHandler(const iIndex)
{
	new szMessage[192];
	
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	if(szMessage[0] ==  '/')
	{
		new szArgument[MAX_NAME_LENGTH];
		argbreak(szMessage,szArgument,charsmax(szArgument),szMessage,charsmax(szMessage));
		
		if(equali(szArgument[1],"points") || equali(szArgument[1],"skillpoints") || equali(szArgument[1],"sp"))
		{
			
			new iTarget = iIndex;
			
			if(szMessage[0] != EOS)
			{
				new iPlayer[2];
		
				iPlayer[0] = find_player("bl",szMessage);
				iPlayer[1] = find_player("blj",szMessage);
				
				if(iPlayer[0] != iPlayer[1])
				{
					client_print_color(iIndex,print_team_default,"^4[%s] ^1There are more than ^41 ^1player with that name.",PREFIX);
					
					return PLUGIN_HANDLED;
				}
				
				else if(iPlayer[0] == iPlayer[1] && !iPlayer[0])
				{
					client_print_color(iIndex,print_team_default,"^4[%s] ^1The target ^3%s ^1cannot be found.",PREFIX,szMessage);
					
					return PLUGIN_HANDLED;
				}
					
				iTarget = iPlayer[0];
			}
			
			if(iTarget == iIndex)
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have ^4%i ^1skill point%s.", PREFIX, g_iData[iTarget][pd_iSkillPoints], g_iData[iTarget][pd_iSkillPoints] == 1 ? "" : "s");
			}
			
			else
			{
				new szName[MAX_NAME_LENGTH];
				get_user_name(iTarget,szName,charsmax(szName));
				
				client_print_color(iIndex,print_team_default,"^4[%s] ^3%s ^1has ^4%i ^1skill point%s.", PREFIX,szName , g_iData[iTarget][pd_iSkillPoints], g_iData[iTarget][pd_iSkillPoints] == 1 ? "" : "s");
			}
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"skill") || equali(szArgument[1],"skills"))
		{
			menu_SkillsMain(iIndex);
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"manageskills"))
		{
			menu_ManageDataMain(iIndex);
			
			return PLUGIN_HANDLED;
		}
		
		return PLUGIN_CONTINUE;
	}
	
	return PLUGIN_CONTINUE;
}


public cmd_KeyDataHandler(const iIndex)
{	
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	new szTemp[16];
	
	if(fvault_get_data(g_szFileVault,szMessage,szTemp,charsmax(szTemp)))
	{
		copy(g_aManageData[iIndex][md_szKey],charsmax(g_aManageData[][md_szKey]),szMessage);
		
		g_aManageData[iIndex][md_iModeData] = MODE_OFFLINE;
		
		new iPlayer = find_player("c",g_aManageData[iIndex][md_szKey]);
		
		if(iPlayer)
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1The key ^4%s ^1is already connected as ^3%s^1.",PREFIX,g_aManageData[iIndex][md_szKey],get_key_name(g_aManageData[iIndex][md_szKey]));
			g_aManageData[iIndex][md_iModeData] = MODE_ONLINE;
		}
		
		cmd_LoadTargetData(iIndex,szMessage);
		menu_ManageData(iIndex);
	}
	else
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have enter unknown key.",PREFIX);
		client_cmd(iIndex,"messagemode skills_managedata_key");
	}
}

public cmd_DataHandler(const iIndex)
{
	new szData[ePlayerData][32],i;
	
	copy(szData[i],charsmax(szData[]),"Skill Points");
	
	for(i = 1; i < ePlayerData; i++)
		formatex(szData[i],charsmax(szData[]),"%s",g_aSkills[i -  1][sd_szName]);
		
	
	new iMax[ePlayerData] = {2147483647,...};
	
	for(i = 1; i < ePlayerData; i++)
		iMax[i] = g_aSkills[i - 1][sd_iLevels];
	
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	new iValue = str_to_num(szMessage);
	
	if(is_str_num(szMessage) && iValue <= iMax[g_aManageData[iIndex][md_iEditType]] && iValue >= 0)
	{
		g_iTargetData[iIndex][g_aManageData[iIndex][md_iEditType]] = iValue;
		
		if(g_aManageData[iIndex][md_iEditType] > pd_iSkillPoints)
			menu_ManageSkillsData(iIndex);
		
		else
			menu_ManageData(iIndex);
			
		client_print_color(iIndex,print_team_default,"^4[%s] ^3%s ^1data has been successfuly updated to ^4%d^1.",PREFIX,szData[g_aManageData[iIndex][md_iEditType]],iValue);
	}
	else
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid number.",PREFIX);
		client_cmd(iIndex,"messagemode skills_managedata_data");
	}
}


public menu_SkillsMain(const iIndex)
{
	new szText[512],iLen,szTemp[32],iKeys;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wSkills List Menu^nYou have \r%d \yskill points^n\dChoose a skill you would like to view:^n^n",PREFIX,g_iData[iIndex][pd_iSkillPoints]);
	
	for(new i; i < SKILLS; i++)
	{
		if(g_aSkills[i][sd_iLevels] == 1)
			formatex(szTemp,charsmax(szTemp),"\y[\r%s\y]", g_iData[iIndex][pd_iSkillLevel][i] == g_aSkills[i][sd_iLevels] ? ONE_UPGRADED_SKILL : ONE_UPGRADE_SKILL);
		else if(g_iData[iIndex][pd_iSkillLevel][i] < g_aSkills[i][sd_iLevels])
			formatex(szTemp,charsmax(szTemp),"\y[\r%d\d/\r%d\y]",g_iData[iIndex][pd_iSkillLevel][i] ,g_aSkills[i][sd_iLevels]);
		else
			formatex(szTemp,charsmax(szTemp),"\y[\r%s\y]",UPGRADED_MAX_SKILL);
		
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r%d. \w%s %s^n", i+1,g_aSkills[i][sd_szName] , szTemp);
		
		iKeys |= (1 << i);
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wExit \ySkills List Menu");
	
	iKeys |= (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_SKILLSMAIN][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_SkillsMain(const iIndex, const iKey)
{
	switch((iKey + 1) % 10)
	{
		case 1..SKILLS+1:
		{
			g_iViewed[iIndex] = iKey;
			menu_ViewSkill(iIndex);
		}
	}
	
	return PLUGIN_HANDLED;
}

public menu_ViewSkill(const iIndex)
{
	new szText[512],iLen,szTemp[128],iKeys,bool:bCallback;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wView \y%s\w's Skill Menu^n^n",PREFIX,g_aSkills[g_iViewed[iIndex]][sd_szName]);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wSkill Summary: \y%s\d.^n",g_aSkills[g_iViewed[iIndex]][sd_szSummary]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\d- \wSkill Type: \y%s\d.^n",g_aSkills[g_iViewed[iIndex]][sd_iLevels] == 1 ? ONE_UPGRADE_TYPE_SKILL : UPGRADE_TYPE_SKILL);
	
	if(g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] < g_aSkills[g_iViewed[iIndex]][sd_iLevels])
	{
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\yRequired to purchase:^n");
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wRebirths: \r%d Rebirth%s\d.^n",g_aSkills[g_iViewed[iIndex]][sd_iRequiredRebirth][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1],g_aSkills[g_iViewed[iIndex]][sd_iRequiredRebirth][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1] == 1 ? "" : "s");
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wPrice: \r%d Skill Points\d.^n",g_aSkills[g_iViewed[iIndex]][sd_iPrice][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1]);
	}
	
	if(g_iViewed[iIndex] == SKILL_CASH || g_iViewed[iIndex] == SKILL_EXPERIENCE)
		formatex(szTemp,charsmax(szTemp),"+%.2f%% %s",float(g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]]) / 100.0,g_aSkills[g_iViewed[iIndex]][sd_szBonus]);
		
	else if (g_iViewed[iIndex] == SKILL_USP || g_iViewed[iIndex] == SKILL_SHOTGUN)
		formatex(szTemp,charsmax(szTemp),"%.1f%% %s",float(g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]]) / 100.0,g_aSkills[g_iViewed[iIndex]][sd_szBonus]);	
		
	else if (g_iViewed[iIndex] == SKILL_SPEED)
		formatex(szTemp,charsmax(szTemp),"+%.2f %s",float(g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]]) / 100.0,g_aSkills[g_iViewed[iIndex]][sd_szBonus]);
		
	else
		formatex(szTemp,charsmax(szTemp),"+%i %s%s",g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]],g_aSkills[g_iViewed[iIndex]][sd_szBonus],g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]] == 1 ? "" : "s");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\d- \wCurrent Stat: \y%s\d.^n",szTemp);
	
	if(g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] < g_aSkills[g_iViewed[iIndex]][sd_iLevels])
	{
		if(g_iViewed[iIndex] == SKILL_CASH || g_iViewed[iIndex] == SKILL_EXPERIENCE)
			formatex(szTemp,charsmax(szTemp),"+%.2f%% %s",float(g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1]) / 100.0,g_aSkills[g_iViewed[iIndex]][sd_szBonus]);
			
		else if (g_iViewed[iIndex] == SKILL_USP || g_iViewed[iIndex] == SKILL_SHOTGUN)
			formatex(szTemp,charsmax(szTemp),"%.1f%% %s",float(g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1]) / 100.0,g_aSkills[g_iViewed[iIndex]][sd_szBonus]);	
			
		else if (g_iViewed[iIndex] == SKILL_SPEED)
			formatex(szTemp,charsmax(szTemp),"+%.2f %s",float(g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1]) / 100.0,g_aSkills[g_iViewed[iIndex]][sd_szBonus]);
			
		else
			formatex(szTemp,charsmax(szTemp),"+%d %s%s",g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1],g_aSkills[g_iViewed[iIndex]][sd_szBonus],g_aSkills[g_iViewed[iIndex]][sd_iStat][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1] == 1 ? "" : "s");
		
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wNext Stat: \y%s\d.^n",szTemp);
	}
	
	if(g_aSkills[g_iViewed[iIndex]][sd_iLevels] == 1 && g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] >= g_aSkills[g_iViewed[iIndex]][sd_iLevels])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot upgrade that skill due to: \rYou have already upgraded that skill\d.");
		
	else if(g_aSkills[g_iViewed[iIndex]][sd_iLevels] > 1 && g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] >= g_aSkills[g_iViewed[iIndex]][sd_iLevels])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot upgrade that skill due to: \rYou have already reached max upgrades at that skill\d.");
		
	else if(g_iData[iIndex][pd_iSkillPoints] < g_aSkills[g_iViewed[iIndex]][sd_iPrice][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot upgrade that skill due to: \rYou cannot ugprade that skill due to: \rYou don't have enough skill points\d.");
		
	else if(exp_GetUserData(iIndex,EXPERIENCE_DATA_REBIRTH) < g_aSkills[g_iViewed[iIndex]][sd_iRequiredRebirth][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] + 1])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot ugprade that skill due to: \rYou don't have enough rebirths\d.");
	
	else
	{
		iKeys |= (1 << 0);
		bCallback = true;
		formatex(szTemp,charsmax(szTemp),"\wUpgrade that skill\d.");
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\%c1. %s^n",bCallback ? 'r' : 'd',szTemp);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \ySkills List Menu");
	
	iKeys |=  (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_VIEWSKILL][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ViewSkill(const iIndex, const iKey)
{
	switch((iKey + 1) % 10)
	{
		case 0:
		{
			menu_SkillsMain(iIndex);
		}
		
		case 1:
		{
			if(g_aSkills[g_iViewed[iIndex]][sd_iLevels] == 1 && g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] >= g_aSkills[g_iViewed[iIndex]][sd_iLevels])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have already upgraded that skill.",PREFIX);
				
			else if(g_aSkills[g_iViewed[iIndex]][sd_iLevels] > 1 && g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] >= g_aSkills[g_iViewed[iIndex]][sd_iLevels])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have already reached max upgrades at that skill.",PREFIX);
				
			else if(g_iData[iIndex][pd_iSkillPoints] < g_aSkills[g_iViewed[iIndex]][sd_iPrice][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot ugprade that skill due to you don't have ^4enough skill points^1.",PREFIX);
				
			else if(exp_GetUserData(iIndex,EXPERIENCE_DATA_REBIRTH) < g_aSkills[g_iViewed[iIndex]][sd_iRequiredRebirth][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot ugprade that skill due to you don't have ^4enough rebirths^1.",PREFIX);
			
			else
			{
				g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]] ++;
				
				g_iData[iIndex][pd_iSkillPoints] -= g_aSkills[g_iViewed[iIndex]][sd_iPrice][g_iData[iIndex][pd_iSkillLevel][g_iViewed[iIndex]]];
				
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have sueccessfully upgraded ^3%s ^1skill.",PREFIX,g_aSkills[g_iViewed[iIndex]][sd_szName]);
				
				cmd_SaveData(iIndex);
				
				menu_ViewSkill(iIndex);
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

public menu_ManageDataMain(const iIndex)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	new szText[512],iLen;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wManage Data Main Menu^n\dChoose your favorite option:^n^n",PREFIX);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r1. \yOnline \wPlayers Data^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r2. \dOffline \wPlayers Data^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r3. \rKey \wData^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r4. \dReset Server Data^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wExit \yManage Data Main Menu");
	
	new iKeys = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_MAINMANAGEDATA][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ManageDataMain(const iIndex, const iKey)
{
	switch((iKey + 1) % 10)
	{
		case 1..2:
		{
			g_aManageData[iIndex][md_iModeData] = iKey;
			menu_ManageTarget(iIndex);
		}
		
		case 3:
		{
			client_cmd(iIndex,"messagemode skills_managedata_key");
		}
		
		case 4:
		{
			fvault_clear(g_szFileVault);
			
			new szName[MAX_NAME_LENGTH];
			get_user_name(iIndex,szName,charsmax(szName));
			
			for(new i = 1; i <= MAX_PLAYERS; i++)
			{
				if(!is_user_connected(i))
					continue;
					
				arrayset(g_iData[i],0,sizeof g_iData[]);
					
				if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have successfully reset ^4skills data^1's server",PREFIX);
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has reset ^4skills data^1's server",szName,PREFIX);
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

public menu_ManageTarget(const iIndex)
{
	new szText[128],i,szKey[25];
	
	formatex(szText,charsmax(szText),"\r[ \w%s \r] \wManage Data \y%s Mode \wPlayers Menu^n\dChoose a player to edit data:",PREFIX, g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Offline" : "Online");
	new iMenu = menu_create(szText,"handler_ManageTarget");
	
	if(g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE)
	{
		new iSize = fvault_size(g_szFileVault);
		
		new iPlayer;
		
		for(i = 0; i < iSize; i++)
		{
			fvault_get_keyname(g_szFileVault,i,szKey,charsmax(szKey));
			
			iPlayer = find_player("c",szKey);
			
			if(!iPlayer)
				menu_additem(iMenu,get_key_name(szKey),szKey);
		}
	}
	
	else
	{
		new iNum,players[MAX_PLAYERS],szName[MAX_NAME_LENGTH];
		
		get_players(players,iNum,"ch");
		
		for(i = 0; i < iNum; i++)
		{	
			get_user_name(players[i],szName,charsmax(szName));
			get_user_authid(players[i],szKey,charsmax(szKey));
			
			menu_additem(iMenu,szName,szKey);
		}
	}
	
	if(menu_items(iMenu))
	{
		menu_setprop(iMenu,MPROP_EXITNAME,"Back to \yManage Data Main Menu");

		menu_display(iIndex,iMenu);
	}
	
	else
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1There are no players data at ^3%s mode^1.",PREFIX,g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "offline" : "online");
		menu_ManageDataMain(iIndex);
	}
}

public handler_ManageTarget(const iIndex, const iMenu, const iItem)
{
	if(iItem == MENU_EXIT)
	{
		menu_destroy(iMenu);
		menu_ManageDataMain(iIndex);
		
		return PLUGIN_HANDLED;
	}
	
	new szKey[25],_shit;
	
	menu_item_getinfo(iMenu,iItem,_shit,szKey,charsmax(szKey),_,_,_shit);
	menu_destroy(iMenu);
	
	copy(g_aManageData[iIndex][md_szKey],charsmax(g_aManageData[][md_szKey]),szKey);
	
	cmd_LoadTargetData(iIndex,szKey);
	menu_ManageData(iIndex);
	
	return PLUGIN_HANDLED;
}


public menu_ManageData(const iIndex)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	new szData[32];
	
	if(!fvault_get_data(g_szFileVault,g_aManageData[iIndex][md_szKey],szData,charsmax(szData)))
	{
		menu_ManageTarget(iIndex);
		
		return PLUGIN_HANDLED;
	}
	
	new szText[512],iLen,szTemp[64],iLen2;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wManage \y%s \wData Menu^n\dEdit data as you want:^n^n",PREFIX,g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTarget Key: \y%s^n",g_aManageData[iIndex][md_szKey]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTarget Name: \y%s^n",get_key_name(g_aManageData[iIndex][md_szKey]));
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r1. \wSkills Points Data: \r%d Points^n",g_iTargetData[iIndex][pd_iSkillPoints]);
	
	for(new i = 1; i < ePlayerData; i++)
		iLen2 += formatex(szTemp[iLen2],charsmax(szTemp) - iLen2,"%s%d",i == 1 ? "\r" : "\y, \r",g_iTargetData[iIndex][i]);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r2. \wSkills Levels Data: \d[%s\d]^n",szTemp);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r6. \wChange Target \d(\r%s\d)^n",g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");

	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r7. \dDelete \wData^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r9. \ySave \wData^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \y%s Mode Players Menu",g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");

	new iKeys = (1 << 0) | (1 << 1) | (1 << 5) | (1 << 6) | (1 << 8) | (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_MANAGEDATA][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ManageData(const iIndex, const iKey)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	switch((iKey + 1) % 10)
	{
		case 0:
		{
			menu_ManageTarget(iIndex);
		}
		
		case 1:
		{
			g_aManageData[iIndex][md_iEditType] = iKey;
			client_cmd(iIndex,"messagemode skills_managedata_data");
		}
		
		case 2:
		{
			menu_ManageSkillsData(iIndex);
		}
		
		case 6:
		{
			menu_ManageTarget(iIndex);
		}
		
		case 7:
		{
			new iTarget = find_player("c",g_aManageData[iIndex][md_szKey]);
			
			if(iTarget)
			{
				arrayset(g_iData[iTarget],0,sizeof g_iData[]);
				cmd_SaveData(iTarget);
				
				client_print_color(iTarget,print_team_default,"^4[%s] ^1Your ^4skills data ^1has been delete.",PREFIX);
			}
			
			else
			{		
				fvault_remove_key(g_szFileVault,g_aManageData[iIndex][md_szKey]);
			}
			
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have succesfully deleted ^3%s^1's ^4skills data^1.",PREFIX,get_key_name(g_aManageData[iIndex][md_szKey]));
		}
		
		case 9:
		{
			new iTarget = find_player("c",g_aManageData[iIndex][md_szKey]);
			
			if(iTarget)
			{
				for(new i; i < ePlayerData; i++)
					g_iData[iTarget][i] = g_iTargetData[iIndex][i];
				
				cmd_SaveData(iTarget);
				
				cmd_PrintData(iTarget,iTarget);
				client_print_color(iTarget,print_team_default,"^4[%s] ^1Your ^4skills data ^1has been edited, check your data at console.",PREFIX);
			}
			
			else
			{
				new szData[16],iLen;
				
				for(new i; i < ePlayerData; i++)
					iLen += formatex(szData[iLen],charsmax(szData) - iLen,"#%i",g_iTargetData[iIndex][i]);
					
				fvault_set_data(g_szFileVault,g_aManageData[iIndex][md_szKey],szData);
			}
			
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have succesfully edited ^3%s^1's ^4skills data^1.",PREFIX,get_key_name(g_aManageData[iIndex][md_szKey]));
		}
	}
	
	return PLUGIN_HANDLED;
}

public menu_ManageSkillsData(const iIndex)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	new szData[32],iKeys;
	
	if(!fvault_get_data(g_szFileVault,g_aManageData[iIndex][md_szKey],szData,charsmax(szData)))
	{
		menu_ManageTarget(iIndex);
		
		return PLUGIN_HANDLED;
	}
	
	new szText[512],iLen;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wManage \y%s \wData Menu^n\dEdit skills data as you want:^n^n",PREFIX,g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");
	
	
	for(new i = 1; i < ePlayerData; i++)
	{
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r%i. \w%s Skill Level: \y%d^n",i,g_aSkills[i - 1][sd_szName], g_iTargetData[iIndex][i]);
		
		iKeys |= (1 << i - 1);
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \yManage Data Menu");

	iKeys |= (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_MANAGESKILLSDATA][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ManageSkillsData(const iIndex, const iKey)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	switch((iKey + 1) % 10)
	{
		case 0:
		{
			menu_ManageData(iIndex);
		}
		
		case 1..SKILLS+1:
		{
			g_aManageData[iIndex][md_iEditType] = iKey + 1;
			client_cmd(iIndex,"messagemode skills_managedata_data");
		}
	}
	
	return PLUGIN_HANDLED;
		
}

public fwd_PlayerLeveledUP(const iIndex, const iLevel)
{
	g_iData[iIndex][pd_iSkillPoints] += POINTS_EACH_LEVEL;
	
	client_print_color(iIndex,print_team_default,"^4[%s] ^1You have got ^4%d ^1skill points for your new level.",PREFIX,POINTS_EACH_LEVEL);
}

stock cmd_PrintData(const iIndex, const iPlayerData)
{
	static szKey[25],szName[MAX_NAME_LENGTH],i;
	
	get_user_name(iPlayerData,szName,charsmax(szName));
	get_user_name(iPlayerData,szKey,charsmax(szKey));
	
	console_print(iIndex,"******** Your experience data has been edited recently ********");
	console_print(iIndex,"Player Name: %s",szName);
	console_print(iIndex,"Player Key: %s",szKey);
	
	console_print(iIndex,"Skill Points Data: %d.",g_iData[iPlayerData][pd_iSkillPoints]);
	
	for(i = 1; i < ePlayerData; i++)
		console_print(iIndex,"%s Skill Data: %d.",g_aSkills[i - 1][sd_szName],g_iData[iPlayerData][i]);
	
	console_print(iIndex,"******** DONE ********");
}


stock cmd_LoadTargetData(const iIndex,const szKey[])
{
	static szData[32];
	
	if(fvault_get_data(g_szFileVault,szKey,szData,charsmax(szData)))
	{
		replace_all(szData,charsmax(szData),"#"," ");
		trim(szData);
		
		static szTemp[16];
		
		static i,iPlayer;
		
		iPlayer = find_player("c",szKey);
		
		if(iPlayer)		
			for(i = 0; i < ePlayerData; i++)
			{
				argbreak(szData,szTemp,charsmax(szTemp),szData,charsmax(szData));
				
				g_iTargetData[iIndex][i] = g_iData[iPlayer][i];
			}
		else
			for(i = 0; i < ePlayerData; i++)
			{
				argbreak(szData,szTemp,charsmax(szTemp),szData,charsmax(szData));
				
				g_iTargetData[iIndex][i] = str_to_num(szTemp);
			}
	}
	
	client_print_color(iIndex,print_team_default,"^4[%s] ^3%s^1's ^4skills data ^1has been successfully loaded.",PREFIX,get_key_name(szKey));
}

stock cmd_LoadData(const iIndex)
{
	new szData[32],szKey[25];
	get_user_authid(iIndex,szKey,charsmax(szKey));
	
	if(fvault_get_data(g_szFileVault,szKey,szData,charsmax(szData)))
	{
		replace_all(szData,charsmax(szData),"#"," ");
		trim(szData);
		
		new szTemp[8],iTemp;
		
		for(new i; i < ePlayerData; i++)
		{
			argbreak(szData,szTemp,charsmax(szTemp),szData,charsmax(szData));
			iTemp = str_to_num(szTemp);
			
			g_iData[iIndex][i] = iTemp;
		}
	}
}	

stock cmd_SaveData(const iIndex)
{
	static szKey[25];
	get_user_authid(iIndex,szKey,charsmax(szKey));
	
	new szData[32],iLen;
	
	for(new i; i < ePlayerData; i++)
		iLen += formatex(szData[iLen],charsmax(szData) - iLen,"#%i",g_iData[iIndex][i]);
	
	fvault_set_data(g_szFileVault,szKey,szData);
}
