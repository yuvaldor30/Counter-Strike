/* Plugin generated by AMXX-Studio */

#include "amxmodx.inc"
#include "hamsandwich.inc"
#include "fun.inc"
#include "fvault.inc"
#include "engine.inc"
#include "hitandrun.inc"

#define PLUGIN "Shop System"
#define VERSION "Never-Tested"
#define AUTHOR "MJ"

#define PREFIX "Shop System"

#define MIN_TRANSFER_AMOUNT 200
#define TRANSFER_TAX 10

#define MIN_GAMBLE_AMOUNT 200
#define GAMBLE_CHANCE 45

#define AMOUNT_OF_NEXTCASH 1500
#define AMOUNT_OF_GETCASH 300

#pragma semicolon 1

new const g_iTax[] =
{
	TRANSFER_TAX,
	TRANSFER_TAX - 2,
	TRANSFER_TAX - 4,
	TRANSFER_TAX - 7
};

new const g_iWinChance[] =
{
	GAMBLE_CHANCE,
	GAMBLE_CHANCE + 2,
	GAMBLE_CHANCE + 4,
	GAMBLE_CHANCE + 5
};

new const g_iBonusCash[] =
{
	0,
	2,
	4,
	5
};

new const g_iMultiplyCash[] =
{
	0,
	20,
	40,
	50
};

new const g_iNextCash[] =
{
	15,
	13,
	11,
	10
};

new const g_iSpeed[] =
{
	0,
	1500,
	3000,
	6000
};

enum _: ePlayerData
{
	pd_iCash,
	pd_iKnife,
	pd_iUsedKnife,
	pd_iNextCash
}

enum _: eKnifeData
{
	kd_szName[20],
	kd_iPrice,
	kd_iRebirthRequired,
	kd_iBullets,
	kd_iBonusSpeed,
	kd_iMultiplyCash,
	kd_iMultiplyExperience,
	kd_iHegrenades,
	kd_iFlashbangs,
	kd_iSmokeGrenades,
	bool:kd_bWorldModel
}

new const g_aKnives[][eKnifeData] =
{
	{"Knife Default",0,0,0,0,0,0,0,0,0,false},
	{"Knife #1",0,0,2,1200,2000,1500,0,1,0,true},
	{"Knife #2",0,0,3,3000,4000,3000,1,1,1,true}
};

enum _: eOldMenu
{
	om_szMenu[20],
	om_szHandler[30]
}

enum _: OLD_MENUS
{
	OLDMENU_SHOP,
	OLDMENU_VIEWKNIFE,
	OLDMENU_VIEWSTATS,
	OLDMENU_MAINMANAGEDATA,
	OLDMENU_MANAGEDATA,
	OLDMENU_SERVERMANAGESDATA
}

new const g_szOldMenus[OLD_MENUS][eOldMenu] =
{
	{"Shop_Main","handler_ShopMain"},
	{"View_Knife","handler_ViewKnife"},
	{"View_Stats","handler_KnifeViewStats"},
	{"Main_Manage_Data","handler_ManageDataMain"},
	{"ManageData","handler_ManageData"},
	{"ServerManagesData","handler_ServerManagesData"},
};

enum _: eServerManageData
{
	smd_szName[35],
	smd_szCommand[20]
}

new const g_szServerManagesData[][eServerManageData] =
{
	{"\wManage \yConnetions \wPremisions","/manageconnections"},
	{"\wManage \yShop \wData","/manageshop"},
	{"\wManage \yExperience \wData","/managexp"},
	{"\wManage \ySkills \wData","/manageskills"}
};

enum _: MODES
{
	MODE_ONLINE,
	MODE_OFFLINE
}

enum _: TYPES
{
	TYPE_CASH,
	TYPE_KNIFE
}

enum _: eManageData
{
	md_szKey[25],
	md_iModeData,
	md_iEditType
};

new const g_szFileVault[] = "KnifeData";

new const g_szModelLocation[] = "models/iPlay/hnr/Knives";
new const g_szNextCashSound[] = "iPlay/hnr/nextcash.mp3";

new const g_szViewModelFormat[] = 	"v_knife";
new const g_szWorldModelFormat[] = 	"p_knife";

new const g_szModelEnd[] = "mdl";

new const g_szEntityClassname[] = "nextcash_thinker";

new g_iEntity;

new g_iData[MAX_PLAYERS + 1][ePlayerData];

new g_iViewed[MAX_PLAYERS + 1];

new g_aManageData[MAX_PLAYERS + 1][eManageData];
new g_iTargetData[MAX_PLAYERS + 1][ePlayerData];

new bool:g_bGetCash[MAX_PLAYERS + 1];

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	for(new i; i < OLD_MENUS; i++)
		register_menucmd(register_menuid(g_szOldMenus[i][om_szMenu]),1023,g_szOldMenus[i][om_szHandler]);
		
	RegisterHam(Ham_Item_Deploy,"weapon_knife","fwd_DeployKnife",1);
	
	g_iEntity = create_entity(g_szEntityClassname);
	entity_set_string(g_iEntity,EV_SZ_classname,g_szEntityClassname);
	entity_set_float(g_iEntity,EV_FL_nextthink,halflife_time() + 60.0);
	
	register_think(g_szEntityClassname,"think_Entity");
	
	register_event("HLTV","event_OnNewRound","a","1=0","2=0");
	
	register_clcmd("say","cmd_SayHandler");
	register_clcmd("gamble","cmd_GambleHandler");
	register_clcmd("shop_managedata_key","cmd_KeyDataHandler");
	register_clcmd("shop_managedata_data","cmd_DataHandler");
}

public plugin_natives()
{	
	register_native("shop_GetUserData","cmd_GetUserData");
	register_native("shop_SetUserData","cmd_SetUserData");
	register_native("shop_GetUserStatData","cmd_GetUserStatData");
	register_native("shop_GetUserFloatStatData","cmd_GetUserFloatStatData");
	
}

public cmd_GetUserData(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2);
	
	return g_iData[iIndex][iData];
}

public cmd_SetUserData(const iParams,const iPluginID)
{
	new iRequiredParams = 3;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2);
	new iAmount = get_param(3);
	
	g_iData[iIndex][iData] = iAmount;
	
	return 1;
}


public cmd_GetUserStatData(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2) + kd_iBullets;
	
	return g_aKnives[g_iData[iIndex][pd_iKnife]][iData];
}

public Float:cmd_GetUserFloatStatData(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0.0;
	}
	
	new iIndex = get_param(1);
	new iData = get_param(2) + kd_iBullets;
	
	if(iData == kd_iMultiplyCash)
		return float(g_aKnives[g_iData[iIndex][pd_iKnife]][iData]) / 10000.0 + float(g_iMultiplyCash[get_user_premium(iIndex)]) / 100.0;
		
		
	if(iData == kd_iMultiplyExperience)
		return float(g_aKnives[g_iData[iIndex][pd_iKnife]][iData]) / 10000.0;
		
	if(iData == kd_iBonusSpeed)
		return float(g_aKnives[g_iData[iIndex][pd_iKnife]][iData]) / 100.0 + float(g_iSpeed[get_user_premium(iIndex)]) / 100.0;
		
		
	return float(g_aKnives[g_iData[iIndex][pd_iKnife]][iData]) / 100.0;
}

public plugin_precache()
{
	new szAdress[128];
	
	new i;
	
	for(i = 0; i < sizeof g_aKnives; i++)
	{
		formatex(szAdress,charsmax(szAdress),"%s/%s%i.%s",g_szModelLocation,g_szViewModelFormat,i,g_szModelEnd);
			
		if(file_exists(szAdress))
			precache_model(szAdress);
			
		else
			set_fail_state("[%s] File cannot be found. (%s)",PLUGIN,szAdress);
		
		if(g_aKnives[i][kd_bWorldModel])
		{
			formatex(szAdress,charsmax(szAdress),"%s/%s%i.%s",g_szModelLocation,g_szWorldModelFormat,i,g_szModelEnd);
			
			if(file_exists(szAdress))
				precache_model(szAdress);
				
			else
				set_fail_state("[%s] File cannot be found. (%s)",PLUGIN,szAdress);
		}
	}
	
	//formatex(szAdress,charsmax(szAdress),"sound/%s",g_szNextCashSound);
	
	//if(!file_exists(szAdress))
		//set_fail_state("[%s] File cannot be found. (%s)",PLUGIN,szAdress);
		
	//replace(szAdress,charsmax(szAdress),"sound/","");
	//precache_sound(szAdress);
}

public event_OnNewRound()
{
	arrayset(g_bGetCash,true,sizeof g_bGetCash);
}

public client_authorized(iIndex)
{
	arrayset(g_iData[iIndex],0,sizeof g_iData[]);
	
	g_bGetCash[iIndex] = false;
	g_iData[iIndex][pd_iNextCash] = g_iNextCash[get_user_premium(iIndex)];

	cmd_LoadData(iIndex);
}

public client_disconnected(iIndex)
{
	cmd_SaveData(iIndex);
}

public cmd_SayHandler(const iIndex)
{
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	if(szMessage[0] == '/')
	{
		new szArgument[32];
		argbreak(szMessage,szArgument,charsmax(szArgument),szMessage,charsmax(szMessage));
		
		if(equali(szArgument[1],"shop"))
		{
			menu_ShopMain(iIndex);
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"managedata") || equali(szArgument[1],"md"))
		{
			menu_ServerManagesData(iIndex);
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"knife") || equali(szArgument[1],"knives"))
		{
			menu_KnivesMain(iIndex);
			
			return PLUGIN_HANDLED;
		}
			
		if(equali(szArgument[1],"gamble"))
		{
			cmd_Gamble(iIndex,szMessage);
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"send") || equali(szArgument[1],"transfer"))
		{
			cmd_Transfer(iIndex,szMessage);
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"cash"))
		{
			
			new iTarget = iIndex;
			
			if(szMessage[0] != EOS)
			{
				new iPlayer[2];
		
				iPlayer[0] = find_player("bl",szMessage);
				iPlayer[1] = find_player("blj",szMessage);
				
				if(iPlayer[0] != iPlayer[1])
				{
					client_print_color(iIndex,print_team_default,"^4[%s] ^1There are more than ^41 ^1player with that name.",PREFIX);
					
					return PLUGIN_HANDLED;
				}
				
				else if(iPlayer[0] == iPlayer[1] && !iPlayer[0])
				{
					client_print_color(iIndex,print_team_default,"^4[%s] ^1The target ^3%s ^1cannot be found.",PREFIX,szMessage);
					
					return PLUGIN_HANDLED;
				}
					
				iTarget = iPlayer[0];
			}
				
			if(iTarget == iIndex)
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have ^4%d ^1cash, you are using ^3%s ^1(^4%d^1) knife and you own ^3%s ^1(^4%d^1) knife.", PREFIX, g_iData[iTarget][pd_iCash]
				, g_aKnives[g_iData[iTarget][pd_iUsedKnife]][kd_szName],g_iData[iTarget][pd_iUsedKnife], g_aKnives[g_iData[iTarget][pd_iKnife]][kd_szName],g_iData[iTarget][pd_iKnife]);
			}
			
			else
			{
				new szName[MAX_NAME_LENGTH];
				get_user_name(iTarget,szName,charsmax(szName));
				
				client_print_color(iIndex,print_team_default,"^4[%s] ^3%s ^1has ^4%d ^1cash, he is using ^3%s ^1(^4%d^1) knife and he owns ^3%s ^1(^4%d^1) knife.", PREFIX,szName, g_iData[iTarget][pd_iCash]
				, g_aKnives[g_iData[iTarget][pd_iUsedKnife]][kd_szName],g_iData[iTarget][pd_iUsedKnife], g_aKnives[g_iData[iTarget][pd_iKnife]][kd_szName],g_iData[iTarget][pd_iKnife]);
			}
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"getcash") || equali(szArgument[1],"gc"))
		{
			if(g_bGetCash[iIndex])
			{
				new iAmount = stat_MultiplyCash(iIndex, AMOUNT_OF_GETCASH);
				
				g_iData[iIndex][pd_iCash] += iAmount;
				
				g_bGetCash[iIndex] = false;
				
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have successfully got ^4%d ^1cash from the ^3getcash^1.",PREFIX,iAmount);
			}
			else
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have already got ^3getcash^1 this round.",PREFIX);
			}
			
			return PLUGIN_HANDLED;
		}
		
		if(equali(szArgument[1],"nextcash") || equali(szArgument[1],"nc"))
		{
			if(!g_iData[iIndex][pd_iNextCash])
			{
				new iAmount = stat_MultiplyCash(iIndex, AMOUNT_OF_NEXTCASH);
				
				g_iData[iIndex][pd_iCash] += iAmount;
				
				g_iData[iIndex][pd_iNextCash] = g_iNextCash[get_user_premium(iIndex)];
			
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have successfully got ^4%d ^1cash from the ^3nextcash^1.",PREFIX,iAmount);
			}
			else
			{
				client_print_color(iIndex,print_team_default,"^4[%s] ^1Your ^3nextcash ^1will be arrived in ^4%d ^1minute%s.",PREFIX, g_iData[iIndex][pd_iNextCash], g_iData[iIndex][pd_iNextCash] == 1 ? "" : "s");
			}
			
			return PLUGIN_HANDLED;
			
		}
		
		if(equali(szArgument[1],"manageshop"))
		{
			menu_ManageDataMain(iIndex);
			
			return PLUGIN_HANDLED;
		}
	
	}
	return PLUGIN_CONTINUE;
}

public cmd_GambleHandler(const iIndex)
{	
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	cmd_Gamble(iIndex,szMessage);
}

public cmd_KeyDataHandler(const iIndex)
{	
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	new szTemp[16];
	
	if(fvault_get_data(g_szFileVault,szMessage,szTemp,charsmax(szTemp)))
	{
		copy(g_aManageData[iIndex][md_szKey],charsmax(g_aManageData[][md_szKey]),szMessage);
		
		g_aManageData[iIndex][md_iModeData] = MODE_OFFLINE;
		
		new iPlayer = find_player("c",g_aManageData[iIndex][md_szKey]);
		
		if(iPlayer)
		{
			client_print_color(iIndex,print_team_default,"^4[%s] ^1The key ^4%s ^1is already connected as ^3%s^1.",PREFIX,g_aManageData[iIndex][md_szKey],get_key_name(g_aManageData[iIndex][md_szKey]));
			g_aManageData[iIndex][md_iModeData] = MODE_ONLINE;
		}
		
		cmd_LoadTargetData(iIndex,szMessage);
		menu_ManageData(iIndex);
	}
	else
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have enter unknown key.",PREFIX);
		client_cmd(iIndex,"messagemode shop_managedata_key");
	}
}

public cmd_DataHandler(const iIndex)
{
	new const szData[ePlayerData][] = {"Cash", "Use Knife", "Own Knife","Next Cash"};
	new iMax[ePlayerData] = {2147483647, sizeof g_aKnives - 1, sizeof g_aKnives - 1,...};
	
	iMax[pd_iNextCash] = g_iNextCash[get_user_premium(iIndex)];
	
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	new iValue = str_to_num(szMessage);
	
	if(is_str_num(szMessage) && iValue <= iMax[g_aManageData[iIndex][md_iEditType]] && iValue >= 0)
	{
		g_iTargetData[iIndex][g_aManageData[iIndex][md_iEditType]] = iValue;
		
		menu_ManageData(iIndex);
		
		client_print_color(iIndex,print_team_default,"^4[%s] ^3%s ^1data has been successfuly updated to ^4%d^1.",PREFIX,szData[g_aManageData[iIndex][md_iEditType]],iValue);
	}
	else
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have entered invalid number.",PREFIX);
		client_cmd(iIndex,"messagemode shop_managedata_data");
	}

}

public menu_ShopMain(const iIndex)
{
	new szText[512],iLen;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wShop Main Menu^n^n",PREFIX);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r1. \wKnives Shop^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r2. \wScouts Shop^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r3. \wUpgrade Skills^n");
	
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\%c4. \wManage Data^n",get_user_access(iIndex) >= ServerManager ? 'r' : 'd');
	
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wExit \yShop Main Menu");
	
	new iKeys = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 9);
	
	if(get_user_access(iIndex) >= ServerManager)
		iKeys |= (1 << 3);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_SHOP][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ShopMain(const iIndex, const iKey)
{
	switch((iKey + 1) % 10)
	{
		case 1:
		{
			menu_KnivesMain(iIndex);
		}
		
		case 2:
		{
			client_cmd(iIndex,"say /scouts");
		}
		
		case 3:
		{
			client_cmd(iIndex,"say /skills");
		}
		
		case 4:
		{
			client_cmd(iIndex,"say /managedata");
		}
	}
	
	return PLUGIN_HANDLED;
}


public menu_ServerManagesData(const iIndex)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	new szText[512],iLen,iKeys;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wServer Manages Daat Main Menu^n^n",PREFIX);
	
	for(new i; i < sizeof g_szServerManagesData; i++)
	{
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r%i. \w%s^n",i+1, g_szServerManagesData[i][smd_szName]);
		iKeys |= (1 << i);
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \yShop Main Menu");
	
	iKeys |= (1 << 9);
	
	if(get_user_access(iIndex) >= ServerManager)
		iKeys |= (1 << 3);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_SERVERMANAGESDATA][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ServerManagesData(const iIndex, const iKey)
{
	if(iKey == 9)
		menu_ShopMain(iIndex);
	else
		client_cmd(iIndex,"say %s",g_szServerManagesData[iKey][smd_szCommand]);
	
	return PLUGIN_HANDLED;
}


public menu_KnivesMain(const iIndex)
{
	new szText[128],szTemp[60];
	
	formatex(szText,charsmax(szText),"\r[ \w%s \r] \wKnives List Menu^n\dChoose a knife you would like to view:",PREFIX);
	new iMenu = menu_create(szText,"handler_KnivesMain");
	
	for(new i; i < sizeof g_aKnives; i++)
	{
		if(g_iData[iIndex][pd_iUsedKnife] == i)
			formatex(szTemp,charsmax(szTemp),"\d- \yUsing");
		
		//else if(g_iData[iIndex][pd_iKnife] + 1 == i)
		//	formatex(szTemp,charsmax(szTemp),"\w(\r%i Cash \d- \r%i Rebirth%s\w)", g_aKnives[i][kd_iPrice],g_aKnives[i][kd_iRebirthRequired], g_aKnives[i][kd_iRebirthRequired] > 1 ? "s" : "");
		
		else
			formatex(szTemp,charsmax(szTemp),"");
		
		formatex(szText,charsmax(szText),"\%c%s %s",g_iData[iIndex][pd_iKnife] >= i ? 'w' : 'd', g_aKnives[i][kd_szName], szTemp);
		
		menu_additem(iMenu,szText);
	}
	
	menu_setprop(iMenu,MPROP_EXITNAME,"Back to \yShop Main Menu");
	
	menu_display(iIndex,iMenu);
	
	return PLUGIN_HANDLED;
}

public handler_KnivesMain(const iIndex, const iMenu, const iItem)
{
	menu_destroy(iMenu);
	
	if(iItem == MENU_EXIT)
	{
		menu_ShopMain(iIndex);
	}
	
	else
	{
		g_iViewed[iIndex] = iItem;
		menu_ViewKnife(iIndex);
	}
	
	return PLUGIN_HANDLED;
}

public menu_ViewKnife(const iIndex)
{
	new szText[512],iLen,szTemp[128],bool: bCallback,iKeys;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wView Knife Menu^n\wYou are viewing \y%s\w's knife:^n^n",PREFIX,g_aKnives[g_iViewed[iIndex]][kd_szName]);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\yRequired to purchase:^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wRebirths: \r%d Rebirth%s\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iRebirthRequired],g_aKnives[g_iViewed[iIndex]][kd_iRebirthRequired] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wPrice: \r%d Cash\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iPrice]);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r1. \wView knife stats^n");
	
	
	if(g_iData[iIndex][pd_iKnife] + 1 > g_iViewed[iIndex])
		formatex(szTemp,charsmax(szTemp),"\dYou have already purchased this knife.");
		
	else if(g_iData[iIndex][pd_iKnife] + 1 < g_iViewed[iIndex])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot purchase that knife due to: \rYou have not purchased \y%s\r knife yet\d.",g_aKnives[g_iViewed[iIndex] - 1][kd_szName]);
		
	else if(g_iData[iIndex][pd_iCash] < g_aKnives[g_iViewed[iIndex]][kd_iPrice])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot purchase that knife due to: \rYou don't have enough cash\d.");
		
	else if(exp_GetUserData(iIndex,EXPERIENCE_DATA_REBIRTH) < g_aKnives[g_iViewed[iIndex]][kd_iRebirthRequired])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot purchase that knife due to: \rYou don't have enough rebirths\d.");
	
	else
	{
		iKeys |= (1 << 1);
		bCallback = true;
		formatex(szTemp,charsmax(szTemp),"\wPurchase that knife\d.");
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\%c2. %s^n",bCallback ? 'r' : 'd',szTemp);
	
	bCallback = false;
	
	if(g_iData[iIndex][pd_iUsedKnife] == g_iViewed[iIndex])
		formatex(szTemp,charsmax(szTemp),"\dYou are already using this knife.");
		
	else if(g_iData[iIndex][pd_iKnife] < g_iViewed[iIndex])
		formatex(szTemp,charsmax(szTemp),"\dYou cannot use that knife due to: \rYou have not purchased that knife yet\d.");
		
	else
	{
		iKeys |= (1 << 2);
		bCallback = true;
		formatex(szTemp,charsmax(szTemp),"\wUse that knife\d.");
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\%c3. %s^n",bCallback ? 'r' : 'd',szTemp);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \yKnives List Menu");
	
	iKeys |= (1 << 0) | (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_VIEWKNIFE][om_szMenu]);
}

public handler_ViewKnife(const iIndex, const iKey)
{
	switch((iKey +1) % 10)
	{
		case 0:
		{
			menu_KnivesMain(iIndex);
		}
		
		case 1:
		{
			menu_KnifeViewStats(iIndex);
		}
		
		case 2:
		{
			if(g_iData[iIndex][pd_iKnife] + 1 > g_iViewed[iIndex])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have already purchased this knife.",PREFIX);
				
			else if(g_iData[iIndex][pd_iKnife] + 1 < g_iViewed[iIndex])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot purchase that knife due to you have not purchased ^3%s ^1knife yet.",PREFIX,g_aKnives[g_iViewed[iIndex] - 1][kd_szName]);
				
			else if(g_iData[iIndex][pd_iCash] < g_aKnives[g_iViewed[iIndex]][kd_iPrice])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot purchase that knife due to you don't have ^4enough cash^1.",PREFIX);
				
			else if(exp_GetUserData(iIndex,EXPERIENCE_DATA_REBIRTH) < g_aKnives[g_iViewed[iIndex]][kd_iRebirthRequired])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot purchase that knife due to you don't have ^4enough rebirths^1.",PREFIX);
				
			else
			{
				g_iData[iIndex][pd_iKnife] ++;
				g_iData[iIndex][pd_iUsedKnife] = g_iData[iIndex][pd_iKnife];
				
				if(get_user_weapon(iIndex) == CSW_KNIFE)
					cmd_SetUserModel(iIndex);
				
				g_iData[iIndex][pd_iCash] -= g_aKnives[g_iViewed[iIndex]][kd_iPrice];
				
				cmd_SaveData(iIndex);
				
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have sueccessfully purchased the knife ^3%s^1.",PREFIX,g_aKnives[g_iData[iIndex][pd_iKnife]][kd_szName]);
			}
		}
		
		
		case 3:
		{
			if(g_iData[iIndex][pd_iUsedKnife] == g_iViewed[iIndex])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You are already using this knife.",PREFIX);
				
			else if(g_iData[iIndex][pd_iKnife] < g_iViewed[iIndex])
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot use that knife due to you have not purchased that knife yet.",PREFIX);
				
			else
			{
				g_iData[iIndex][pd_iUsedKnife] = g_iViewed[iIndex];
				
				if(get_user_weapon(iIndex) == CSW_KNIFE)
					cmd_SetUserModel(iIndex);
				
				client_print_color(iIndex,print_team_default,"^4[%s] ^1You have sueccessfully set your knife model to ^3%s^1.",PREFIX,g_aKnives[g_iData[iIndex][pd_iUsedKnife]][kd_szName]);
			}
		}
	}
	
	return PLUGIN_HANDLED;
}


public menu_KnifeViewStats(const iIndex)
{
	new szText[512],iLen;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wView Knife Stats Menu^n\wYou are viewing \y%s\w's stats:^n^n",PREFIX,g_aKnives[g_iViewed[iIndex]][kd_szName]);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\yKnife stats:^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Bullets: \y+\r%i Bullet%s\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iBullets],g_aKnives[g_iViewed[iIndex]][kd_iBullets] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Hegrenades: \y+\r%i Hegrenade%s\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iHegrenades],g_aKnives[g_iViewed[iIndex]][kd_iHegrenades] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Flashbangs: \y+\r%i Flashbang%s\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iFlashbangs],g_aKnives[g_iViewed[iIndex]][kd_iFlashbangs] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Smokegrenades: \y+\r%i Smokegrenade%s\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iSmokeGrenades],g_aKnives[g_iViewed[iIndex]][kd_iSmokeGrenades] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Bullets: \y+\r%i Bullets\d.^n",g_aKnives[g_iViewed[iIndex]][kd_iBullets]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Speed: \y+\r%.1f Units\d.^n",float(g_aKnives[g_iViewed[iIndex]][kd_iBonusSpeed]) / 100.0);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Multiply Cash: \r%.2f\y%%\d.^n",float(g_aKnives[g_iViewed[iIndex]][kd_iMultiplyCash]) / 100.0);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wBonus Multiply Experience: \r%.2f\y%%\d.^n",float(g_aKnives[g_iViewed[iIndex]][kd_iMultiplyExperience]) / 100.0);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\wThe knife model \y%s \wworld model\d.^n",g_aKnives[g_iViewed[iIndex]][kd_bWorldModel] ? "has" : "doesn't have");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \yView Knife Menu");
	
	new iKeys = (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_VIEWSTATS][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_KnifeViewStats(const iIndex, const iKey)
{
	if(!((iKey + 1) % 10))
		menu_ViewKnife(iIndex);
	
	return PLUGIN_HANDLED;
}


public menu_ManageDataMain(const iIndex)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	new szText[512],iLen;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wManage Data Main Menu^n\dChoose your favorite option:^n^n",PREFIX);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r1. \yOnline \wPlayers Data^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r2. \dOffline \wPlayers Data^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r3. \rKey \wData^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r4. \dReset Server Data^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wExit \yManage Data Main Menu");
	
	new iKeys = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_MAINMANAGEDATA][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ManageDataMain(const iIndex, const iKey)
{
	switch((iKey + 1) % 10)
	{
		case 1..2:
		{
			g_aManageData[iIndex][md_iModeData] = iKey;
			menu_ManageTarget(iIndex);
		}
		
		case 3:
		{
			client_cmd(iIndex,"messagemode shop_managedata_key");
		}
		
		case 4:
		{
			fvault_clear(g_szFileVault);
			
			new szName[MAX_NAME_LENGTH];
			get_user_name(iIndex,szName,charsmax(szName));
			
			for(new i = 1; i <= MAX_PLAYERS; i++)
			{
				if(!is_user_connected(i))
					continue;
					
				arrayset(g_iData[i],0,sizeof g_iData[]);
					
				if(i == iIndex)
					client_print_color(i,print_team_default,"^4[%s] ^1You have successfully reset ^4shop data^1's server",PREFIX);
				else
					client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has reset ^4shop data^1's server",szName,PREFIX);
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

public menu_ManageTarget(const iIndex)
{
	new szText[128],i,szKey[25];
	
	formatex(szText,charsmax(szText),"\r[ \w%s \r] \wManage Data \y%s Mode \wPlayers Menu^n\dChoose a player to edit data:",PREFIX, g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Offline" : "Online");
	new iMenu = menu_create(szText,"handler_ManageTarget");
	
	if(g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE)
	{
		new iSize = fvault_size(g_szFileVault);
		
		new iPlayer;
		
		for(i = 0; i < iSize; i++)
		{
			fvault_get_keyname(g_szFileVault,i,szKey,charsmax(szKey));
			
			iPlayer = find_player("c",szKey);
			
			if(!iPlayer)
				menu_additem(iMenu,get_key_name(szKey),szKey);
		}
	}
	
	else
	{
		new iNum,players[MAX_PLAYERS],szName[MAX_NAME_LENGTH];
		
		get_players(players,iNum,"ch");
		
		for(i = 0; i < iNum; i++)
		{	
			get_user_name(players[i],szName,charsmax(szName));
			get_user_authid(players[i],szKey,charsmax(szKey));
			
			menu_additem(iMenu,szName,szKey);
		}
	}
	
	if(menu_items(iMenu))
	{
		menu_setprop(iMenu,MPROP_EXITNAME,"Back to \yManage Data Main Menu");

		menu_display(iIndex,iMenu);
	}
	
	else
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1There are no players data at ^3%s mode^1.",PREFIX,g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "offline" : "online");
		menu_ManageDataMain(iIndex);
	}
}

public handler_ManageTarget(const iIndex, const iMenu, const iItem)
{
	if(iItem == MENU_EXIT)
	{
		menu_destroy(iMenu);
		menu_ManageDataMain(iIndex);
		
		return PLUGIN_HANDLED;
	}
	
	new szKey[25],_shit;
	
	menu_item_getinfo(iMenu,iItem,_shit,szKey,charsmax(szKey),_,_,_shit);
	menu_destroy(iMenu);
	
	copy(g_aManageData[iIndex][md_szKey],charsmax(g_aManageData[][md_szKey]),szKey);
	
	cmd_LoadTargetData(iIndex,szKey);
	menu_ManageData(iIndex);
	
	return PLUGIN_HANDLED;
}


public menu_ManageData(const iIndex)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	new szData[32];
	
	if(!fvault_get_data(g_szFileVault,g_aManageData[iIndex][md_szKey],szData,charsmax(szData)))
	{
		menu_ManageTarget(iIndex);
		
		return PLUGIN_HANDLED;
	}
	
	new szText[512],iLen;
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wManage \y%s \wData Menu^n\dEdit data as you want:^n^n",PREFIX,g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTarget Key: \y%s^n",g_aManageData[iIndex][md_szKey]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTarget Name: \y%s^n",get_key_name(g_aManageData[iIndex][md_szKey]));
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r1. \wCash Data: \r%d Cash^n",g_iTargetData[iIndex][pd_iCash]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r2. \wOwn Knife Data: \r%s \d(\y%d\d)^n",g_aKnives[g_iTargetData[iIndex][pd_iKnife]][kd_szName],g_iTargetData[iIndex][pd_iKnife]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r3. \wUse Knife Data: \r%s \d(\y%d\d)^n",g_aKnives[g_iTargetData[iIndex][pd_iUsedKnife]][kd_szName],g_iTargetData[iIndex][pd_iUsedKnife]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r4. \wNextCash Data: \r%d Minute%s^n",g_iTargetData[iIndex][pd_iNextCash],g_iTargetData[iIndex][pd_iNextCash] == 1 ? "" : "s");
	
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r6. \wChange Target \d(\r%s\d)^n",g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");

	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r7. \dDelete \wData^n");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r9. \ySave \wData^n");
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wBack to \y%s Mode Players Menu",g_aManageData[iIndex][md_iModeData] == MODE_OFFLINE ? "Key" : "Player");

	new iKeys = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 5) | (1 << 6) | (1 << 8) | (1 << 9);
	
	show_menu(iIndex, iKeys, szText, -1, g_szOldMenus[OLDMENU_MANAGEDATA][om_szMenu]);
	
	return PLUGIN_HANDLED;
}

public handler_ManageData(const iIndex, const iKey)
{
	if(get_user_access(iIndex) < ServerManager)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have no access to this command.",PREFIX);
		
		return PLUGIN_HANDLED;
	}
	
	switch((iKey + 1) % 10)
	{
		case 0:
		{
			menu_ManageTarget(iIndex);
		}
		
		case 1..3:
		{
			g_aManageData[iIndex][md_iEditType] = iKey;
			client_cmd(iIndex,"messagemode shop_managedata_data");
		}
		
		case 6:
		{
			menu_ManageTarget(iIndex);
		}
		
		case 7:
		{
			new iTarget = find_player("c",g_aManageData[iIndex][md_szKey]);
			
			if(iTarget)
			{
				arrayset(g_iData[iTarget],0,sizeof g_iData[]);
				cmd_SaveData(iTarget);
				
				client_print_color(iTarget,print_team_default,"^4[%s] ^1Your ^4shop data ^1has been delete.",PREFIX);
			}
			
			else
			{		
				fvault_remove_key(g_szFileVault,g_aManageData[iIndex][md_szKey]);
			}
			
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have succesfully deleted ^3%s^1's ^4shop data^1.",PREFIX,get_key_name(g_aManageData[iIndex][md_szKey]));
		}
		
		case 9:
		{
			new iTarget = find_player("c",g_aManageData[iIndex][md_szKey]);
			
			if(iTarget)
			{
				for(new i; i < ePlayerData; i++)
					g_iData[iTarget][i] = g_iTargetData[iIndex][i];
				
				cmd_SaveData(iTarget);
				
				cmd_PrintData(iTarget,iTarget);
				client_print_color(iTarget,print_team_default,"^4[%s] ^1Your ^4shop data ^1has been edited, check your data at console.",PREFIX);
			}
			
			else
			{
				new szData[16],iLen;
				
				for(new i; i < ePlayerData; i++)
					iLen += formatex(szData[iLen],charsmax(szData) - iLen,"#%i",g_iTargetData[iIndex][i]);
					
				fvault_set_data(g_szFileVault,g_aManageData[iIndex][md_szKey],szData);
			}
			
			client_print_color(iIndex,print_team_default,"^4[%s] ^1You have succesfully edited ^3%s^1's ^4shop data^1.",PREFIX,get_key_name(g_aManageData[iIndex][md_szKey]));
		}
	}
	
	return PLUGIN_HANDLED;
}

public fwd_DeployKnife(iEntity)
{
	static iIndex;
	
	iIndex = get_pdata_cbase(iEntity, 41, 4);	
	
	cmd_SetUserModel(iIndex);
	
	return HAM_SUPERCEDE;
}

public think_Entity(const iEntity)
{
	if(iEntity == g_iEntity)
	{
		static i;
		
		for(i = 1; i < MaxClients; i++)
		{
			if(!is_user_connected(i))
				continue;
				
			g_iData[i][pd_iNextCash] --;
			
			if(g_iData[i][pd_iNextCash] == 0)
			{
				if(music_SoundEnabled(i,SOUND_NEXTCASH))
					client_cmd(i,"mp3 play ^"sound/%s^"", g_szNextCashSound);
					
				client_print_color(i,print_team_default,"^4[%s] ^1Your ^3next cash ^1time has been arrived, write ^4/nextcash ^1to get the reward.",PREFIX);
			}
			
			else if(g_iData[i][pd_iNextCash] < 0)
			{
				client_print_color(i,print_team_default,"^4[%s] ^1You have missed your ^3next cash ^1time, the next one will be arrived in ^4%d ^1minutes.",PREFIX,g_iNextCash[get_user_premium(i)]);
				g_iData[i][pd_iNextCash] = g_iNextCash[get_user_premium(i)];
			}
		}
		
		entity_set_float(g_iEntity,EV_FL_nextthink,halflife_time() + 60.0);
	}
}

stock cmd_Gamble(const iIndex, szMessage[])
{	
	new szAmount[32];
	copy(szAmount,charsmax(szAmount),szMessage);
	
	if(szAmount[0] == EOS)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1Syntax: ^3/gamble ^4<^1Amount^4>",PREFIX);
		
		return;
	}
	
	replace(szAmount,charsmax(szAmount),"k","000");
	replace(szAmount,charsmax(szAmount),"m","000000");
	
	new iAmount = str_to_num(szAmount);
	
	if(equali(szAmount,"all") || equali(szAmount,"allin"))
		iAmount = g_iData[iIndex][pd_iCash];
	
	if(!iAmount)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1Syntax: ^3/gamble ^4<^1Amount^4>",PREFIX);
		
		return;
	}
	
	if(iAmount < MIN_GAMBLE_AMOUNT)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have to gamble at least ^4%d ^1cash.",PREFIX,MIN_TRANSFER_AMOUNT);
		
		return;
	}
	
	if(iAmount > g_iData[iIndex][pd_iCash])
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have just ^4%d ^1cash.",PREFIX,g_iData[iIndex][pd_iCash]);
		
		return;
	}
	
	new iPremiumLevel = get_user_premium(iIndex);
	
	new bool:bWon;
	
	if(random_num(1,100) <= g_iWinChance[iPremiumLevel])
		bWon = true;
	
	if(bWon)
		g_iData[iIndex][pd_iCash] += iAmount + iAmount * g_iBonusCash[iPremiumLevel] / 100;
	else
		g_iData[iIndex][pd_iCash] -= iAmount;
	
	new szName[MAX_NAME_LENGTH];
	get_user_name(iIndex,szName,charsmax(szName));
	
	for(new i = 1; i <= MaxClients; i++)
	{
		if(!is_user_connected(i))
			continue;
			
		if(i == iIndex)
			client_print_color(i,print_team_default,"^4[%s] ^1You have gambled%s on ^4%d ^1and ^3%s^1.",PREFIX,g_iData[iIndex][pd_iCash] == iAmount ? " ^4allin^1" : "",iAmount,bWon ? "won" : "lost");
		else
			client_print_color(i,print_team_default,"^4[%s] ^3%s ^1has gambled%s on ^4%d ^1and ^3%s^1.",PREFIX,szName,g_iData[iIndex][pd_iCash] == iAmount ? " ^4allin^1" : "",iAmount,bWon ? "won" : "lost");
	}
}

stock cmd_Transfer(const iIndex, szMessage[])
{			
	if(szMessage[0] == EOS)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1Syntax: ^3/transfer ^4<^1Name^4> ^4<^1Amount^4>",PREFIX);
		
		return;
	}
	
	new szAmount[16],szTarget[MAX_NAME_LENGTH];
	argbreak(szMessage,szTarget,charsmax(szTarget),szAmount,charsmax(szAmount));
	
	replace(szAmount,charsmax(szAmount),"k","000");
	replace(szAmount,charsmax(szAmount),"m","000000");
	
	new iAmount = str_to_num(szAmount);
	
	if(equali(szAmount,"all") || equali(szAmount,"allin"))
		iAmount = g_iData[iIndex][pd_iCash];
	
	if(szTarget[0] == EOS || !iAmount)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1Syntax: ^3/transfer ^4<^1Name^4> ^4<^1Amount^4>",PREFIX);
		
		return;
	}
	
	if(iAmount < MIN_TRANSFER_AMOUNT)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have to transfer at least ^4%d ^1cash.",PREFIX,MIN_TRANSFER_AMOUNT);
		
		return;
	}
	
	if(iAmount > g_iData[iIndex][pd_iCash])
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You have just ^4%d ^1cash.",PREFIX,g_iData[iIndex][pd_iCash]);
		
		return;
	}
	
	new iPlayer[2];

	iPlayer[0] = find_player("bl",szTarget);
	iPlayer[1] = find_player("blj",szTarget);
	
	if(iPlayer[0] != iPlayer[1])
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1There are more than^4 1 ^1player with that name.",PREFIX);
		
		return;
	}
	
	if(iPlayer[0] == iPlayer[1] && !iPlayer[0])
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1The target ^3%s ^1cannot be found.",PREFIX,szTarget);
		
		return;
	}
		
	new iTarget = iPlayer[0];

	if(iTarget == iIndex)
	{
		client_print_color(iIndex,print_team_default,"^4[%s] ^1You cannot transfer cash to yourself.",PREFIX);
		
		return;
	}
	
	new szName[MAX_NAME_LENGTH];
	get_user_name(iIndex,szName,charsmax(szName));
	
	new szTargetName[MAX_NAME_LENGTH];
	get_user_name(iTarget,szTargetName,charsmax(szTargetName));
	
	new iRecieved = iAmount * (100 - g_iTax[get_user_premium(iIndex)]) / 100;
	
	g_iData[iIndex][pd_iCash] -= iAmount;
	g_iData[iTarget][pd_iCash] += iRecieved;
	
	client_print_color(iIndex,print_team_default,"^4[%s] ^1You have successfully transfered ^4%d ^1cash to ^3%s^1.",PREFIX,iAmount,szTarget);
	client_print_color(iTarget,print_team_default,"^4[%s] ^3%s ^1has transfered you ^4%d ^1cash.",PREFIX,szName,iRecieved);
}

stock cmd_SetUserModel(const iIndex)
{
	if(is_user_alive(iIndex))
	{
		if(g_iData[iIndex][pd_iUsedKnife] > g_iData[iIndex][pd_iKnife])
			g_iData[iIndex][pd_iUsedKnife] = g_iData[iIndex][pd_iKnife];
		
		static szModel[128];
		
		formatex(szModel,charsmax(szModel),"%s/%s%d.%s",g_szModelLocation,g_szViewModelFormat,g_iData[iIndex][pd_iUsedKnife],g_szModelEnd);
		entity_set_string(iIndex,EV_SZ_viewmodel,szModel);
		
		if(g_aKnives[g_iData[iIndex][pd_iUsedKnife]][kd_bWorldModel])
		{
			formatex(szModel,charsmax(szModel),"%s/%s%d.%s",g_szModelLocation,g_szWorldModelFormat,g_iData[iIndex][pd_iUsedKnife],g_szModelEnd);
			entity_set_string(iIndex,EV_SZ_weaponmodel,szModel);
		}
	}
}

stock cmd_PrintData(const iIndex, const iPlayerData)
{
	static const szData[ePlayerData][] = {"Cash","Own Knife","Use Knife","NextCash"};
	
	static szKey[25],szName[MAX_NAME_LENGTH];
	
	get_user_name(iPlayerData,szName,charsmax(szName));
	get_user_name(iPlayerData,szKey,charsmax(szKey));
	
	console_print(iIndex,"******** Your shop data has been edited recently ********");
	console_print(iIndex,"Player Name: %s",szName);
	console_print(iIndex,"Player Key: %s",szKey);
	
	
	console_print(iIndex,"%s Data: %d.",szData[0],g_iData[iPlayerData][0]);
	console_print(iIndex,"%s Data: %s (%d).",szData[pd_iKnife],g_aKnives[g_iData[iPlayerData][pd_iKnife]][kd_szName],g_iData[iPlayerData][pd_iKnife]);
	console_print(iIndex,"%s Data: %s (%d).",szData[pd_iUsedKnife],g_aKnives[g_iData[iPlayerData][pd_iUsedKnife]][kd_szName],g_iData[iPlayerData][pd_iUsedKnife]);
	console_print(iIndex,"%s Data: %d Minute%s.",szData[pd_iNextCash],g_iData[iPlayerData][pd_iNextCash],g_iData[iPlayerData][pd_iNextCash] == 1 ? "" : "s");
	
	console_print(iIndex,"******** DONE ********");
}

stock cmd_LoadTargetData(const iIndex,const szKey[])
{
	static szData[32];
	
	if(fvault_get_data(g_szFileVault,szKey,szData,charsmax(szData)))
	{
		replace_all(szData,charsmax(szData),"#"," ");
		trim(szData);
		
		static szTemp[16];
		
		static i,iPlayer;
		
		iPlayer = find_player("c",szKey);
		
		if(iPlayer)		
			for(i = 0; i < ePlayerData; i++)
			{
				argbreak(szData,szTemp,charsmax(szTemp),szData,charsmax(szData));
				
				g_iTargetData[iIndex][i] = g_iData[iPlayer][i];
			}
		else
			for(i = 0; i < ePlayerData; i++)
			{
				argbreak(szData,szTemp,charsmax(szTemp),szData,charsmax(szData));
				
				g_iTargetData[iIndex][i] = str_to_num(szTemp);
			}
	}
	
	client_print_color(iIndex,print_team_default,"^4[%s] ^3%s^1's ^4shop data ^1has been successfully loaded.",PREFIX,get_key_name(szKey));
}

stock cmd_LoadData(const iIndex)
{
	static szData[32], szKey[25];
	get_user_authid(iIndex,szKey,charsmax(szKey));
	
	if(fvault_get_data(g_szFileVault,szKey,szData,charsmax(szData)))
	{
		replace_all(szData,charsmax(szData),"#"," ");
		trim(szData);
		
		static szTemp[16];
		
		for(new i; i < ePlayerData; i++)
		{
			argbreak(szData,szTemp,charsmax(szTemp),szData,charsmax(szData));
			
			g_iData[iIndex][i] = str_to_num(szTemp);
		}
	}
}

stock cmd_SaveData(const iIndex)
{
	static szKey[25];
	get_user_authid(iIndex,szKey,charsmax(szKey));
	
	new szData[32],iLen;
	
	for(new i; i < ePlayerData; i++)
		iLen += formatex(szData[iLen],charsmax(szData) - iLen,"#%i",g_iData[iIndex][i]);
		
	fvault_set_data(g_szFileVault,szKey,szData);
}
