/* Plugin generated by AMXX-Studio */

#include "amxmodx.inc"
#include "hamsandwich.inc"
#include "fun.inc"
#include "cstrike.inc"
#include "hitandrun.inc"
#include "oldmenus.inc"

#define PLUGIN "Stats System"
#define VERSION "Never-Tested"
#define AUTHOR "MJ"

#define PREFIX "Stats System"

#pragma semicolon 1

enum _:ePlayerData
{
	pd_iBonusBullets,
	Float:pd_fBonusSpeed,
	Float:pd_fCashMultiply, 
	Float:pd_fExperienceMultiply,
	Float:pd_fUspChance,
	Float:pd_fShotgunChance,
	pd_iBonusHegrenades,
	pd_iBonusFlashbangs,
	pd_iBonusSmokeGrenades
}

new g_iData[MAX_PLAYERS + 1][ePlayerData];

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	RegisterHam(Ham_Spawn,"player","fwd_Spawn",1);
	RegisterHam(Ham_CS_Player_ResetMaxSpeed,"player","fwd_ResetMaxSpeed",1);
	
	register_clcmd("say","cmd_SayHandler");
}

public plugin_natives()
{
	register_native("stat_MultiplyCash","cmd_GetMultiplyCash");
	register_native("stat_MultiplyExperience","cmd_GetMultiplyExperience");
}

public cmd_GetMultiplyCash(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iCash = get_param(2);
	
	cmd_UpdateData(iIndex,pd_fCashMultiply);
	
	return floatround(g_iData[iIndex][pd_fCashMultiply] * float(iCash));
}

public cmd_GetMultiplyExperience(const iParams,const iPluginID)
{
	new iRequiredParams = 2;
	
	if(iParams < iRequiredParams)
	{
		log_error(AMX_ERR_NATIVE,"[%s] cannot find enought parameters. %i/%i",PLUGIN ,iParams, iRequiredParams);
		return 0;
	}
	
	new iIndex = get_param(1);
	new iExperience = get_param(2);
	
	cmd_UpdateData(iIndex,pd_fExperienceMultiply);
	
	return floatround(g_iData[iIndex][pd_fExperienceMultiply] * float(iExperience));
}


public cmd_SayHandler(const iIndex)
{
	new szMessage[192];
	read_args(szMessage,charsmax(szMessage));
	remove_quotes(szMessage);
	
	if(szMessage[0] == '/')
	{
		new szArgument[32];
		argbreak(szMessage,szArgument,charsmax(szArgument),szMessage,charsmax(szMessage));
		
		if(equali(szArgument[1],"stat") || equali(szArgument[1],"stats"))
		{
			
			new iTarget = iIndex;
			
			if(szMessage[0] != EOS)
			{
				new iPlayer[2];
		
				iPlayer[0] = find_player("bl",szMessage);
				iPlayer[1] = find_player("blj",szMessage);
				
				if(iPlayer[0] != iPlayer[1])
				{
					client_print_color(iIndex,print_team_default,"^4[%s] ^1There are more than ^41 ^1player with that name.",PREFIX);
					
					return PLUGIN_HANDLED;
				}
				
				else if(iPlayer[0] == iPlayer[1] && !iPlayer[0])
				{
					client_print_color(iIndex,print_team_default,"^4[%s] ^1The target ^3%s ^1cannot be found.",PREFIX,szMessage);
					
					return PLUGIN_HANDLED;
				}
				
				iTarget = iPlayer[0];
			}
			
			for(new i; i < ePlayerData; i++)
				cmd_UpdateData(iTarget,i);
			
			menu_ViewStats(iIndex,iTarget);
			
			return PLUGIN_HANDLED;
		}
		
		return PLUGIN_CONTINUE;
	}


	return PLUGIN_CONTINUE;
}

public menu_ViewStats(const iIndex, const iPlayer)
{
	new szText[512],iLen;
	
	if(iIndex == iPlayer)
	{
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wPlayer Stats Menu^n\wYou are viewing \yyour \wstats:^n^n",PREFIX);
	}
	
	else
	{
		static szName[MAX_NAME_LENGTH];
		get_user_name(iPlayer,szName,charsmax(szName));
	
		iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\r[ \w%s \r] \wPlayer Stats Menu^n\wYou are viewing \y%s\w's stats:^n^n",PREFIX,szName);
	}
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTotal Bullets: \r%d Bullet%s\d.^n",g_iData[iPlayer][pd_iBonusBullets], g_iData[iPlayer][pd_iBonusBullets] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTotal Hegrenades: \r%d Hegrenade%s\d.^n",g_iData[iPlayer][pd_iBonusHegrenades], g_iData[iPlayer][pd_iBonusHegrenades] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTotal Flashbangs: \r%d Flashbang%s\d.^n",g_iData[iPlayer][pd_iBonusFlashbangs], g_iData[iPlayer][pd_iBonusFlashbangs] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTotal Smokegrenades: \r%d Smokegrenade%s\d.^n",g_iData[iPlayer][pd_iBonusSmokeGrenades], g_iData[iPlayer][pd_iBonusSmokeGrenades] == 1 ? "" : "s");
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wUSP Chance: \r%.1f \y%%\d.^n",g_iData[iPlayer][pd_fUspChance]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wShotgun Chance: \r%.1f \y%%\d.^n",g_iData[iPlayer][pd_fShotgunChance]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wTotal Movement Speed: \r%.1f Units\d.^n",g_iData[iPlayer][pd_fBonusSpeed]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wCash Multiply: \yx \r%.4f\d.^n",g_iData[iPlayer][pd_fCashMultiply]);
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"\d- \wExperience Multiply: \yx \r%.4f\d.^n",g_iData[iPlayer][pd_fExperienceMultiply]);
	
	iLen += formatex(szText[iLen],charsmax(szText) - iLen,"^n\r0. \wExit \yPlayer Stats Menu");
	
	new iKeys = (1 << 9);
	
	display_menu(iIndex,iKeys,szText,"handler_ViewStats");
	
	return PLUGIN_HANDLED;
}

public handler_ViewStats(const iIndex, const iKey)
{
	return PLUGIN_HANDLED;
}

public fwd_Spawn(const iIndex)
{
	if(is_user_alive(iIndex))
		strip_user_weapons(iIndex);
}

public fwd_GameStarted()
{
	static iIndex,i;
	
	for(iIndex = 1; iIndex <= MaxClients; iIndex++)
	{
		if(!is_user_alive(iIndex))
			continue;
			
		for(i = 0; i < ePlayerData; i++)
			cmd_UpdateData(iIndex,i);
		
		give_item(iIndex,"weapon_knife");
		
		give_item(iIndex,"weapon_scout");
		set_user_ammo(iIndex,"weapon_scout",AMOUNT_OF_SCOUT_AMMO);
		cs_set_user_bpammo(iIndex,CSW_SCOUT,g_iData[iIndex][pd_iBonusBullets] - AMOUNT_OF_SCOUT_AMMO);
		
		if(random_float(0.0,100.0) <= g_iData[iIndex][pd_fUspChance])
		{
			give_item(iIndex,"weapon_usp");
			set_user_ammo(iIndex,"weapon_usp",3);
			cs_set_user_bpammo(iIndex,CSW_USP,0);
		}
		
		if(random_float(0.0,100.0) <= g_iData[iIndex][pd_fShotgunChance])
		{
			give_item(iIndex,"weapon_m3");
			set_user_ammo(iIndex,"weapon_m3",3);
			cs_set_user_bpammo(iIndex,CSW_M3,0);
		}
		
		give_item(iIndex,"weapon_hegrenade");
		cs_set_user_bpammo(iIndex,CSW_HEGRENADE,g_iData[iIndex][pd_iBonusHegrenades]);
		
		give_item(iIndex,"weapon_flashbang");
		cs_set_user_bpammo(iIndex,CSW_FLASHBANG,g_iData[iIndex][pd_iBonusFlashbangs]);
		
		give_item(iIndex,"weapon_smokegrenade");
		cs_set_user_bpammo(iIndex,CSW_SMOKEGRENADE,g_iData[iIndex][pd_iBonusSmokeGrenades]);
	}
}

public fwd_ResetMaxSpeed(const iIndex)
{
	if(is_user_alive(iIndex))
	{
		cmd_UpdateData(iIndex,pd_fBonusSpeed);
	
		set_user_maxspeed(iIndex, g_iData[iIndex][pd_fBonusSpeed]);
	}
}


stock cmd_UpdateData(const iIndex,const iStat)
{
	switch(iStat)
	{
		case pd_iBonusBullets:
		{
			g_iData[iIndex][iStat] = AMOUNT_OF_SCOUT_AMMO + AMOUNT_OF_SCOUT_BPAMMO + shop_GetUserStatData(iIndex,SHOP_KNIFE_DATA_BULLETS) + skill_GetUserStatData(iIndex,SKILLS_DATA_SKILL_BULLETS);
		}
		
		case pd_fBonusSpeed:
		{
			g_iData[iIndex][pd_fBonusSpeed] = 250.0 + shop_GetUserFloatStatData(iIndex,SHOP_KNIFE_DATA_SPEED) + skill_GetUserFloatStatData(iIndex,SKILLS_DATA_SKILL_SPEED);
		}
		
		case pd_fCashMultiply:
		{
			g_iData[iIndex][pd_fCashMultiply] = 1.0 + shop_GetUserFloatStatData(iIndex,SHOP_KNIFE_DATA_CASH) + skill_GetUserFloatStatData(iIndex,SKILLS_DATA_SKILL_CASH);
		}
		
		
		case pd_fExperienceMultiply:
		{
			g_iData[iIndex][pd_fExperienceMultiply] = 1.0 + shop_GetUserFloatStatData(iIndex,SHOP_KNIFE_DATA_EXPERIENCE) + skill_GetUserFloatStatData(iIndex,SKILLS_DATA_SKILL_EXPERIENCE) + exp_GetUserFloatData(iIndex,EXPERIENCE_DATA_PREMIUM_MULTIPLYEXPERIENCE);
		}
		
		case pd_fUspChance:
		{
			g_iData[iIndex][iStat] = skill_GetUserFloatStatData(iIndex,SKILLS_DATA_SKILL_USP);
		}
		
		case pd_fShotgunChance:
		{
			g_iData[iIndex][iStat] = skill_GetUserFloatStatData(iIndex,SKILLS_DATA_SKILL_SHOTGUN);
		}
		
		case pd_iBonusHegrenades:
		{
			g_iData[iIndex][iStat] = AMOUNT_OF_HEGRENADES + shop_GetUserStatData(iIndex,SHOP_KNIFE_DATA_HEGRENADES) + skill_GetUserStatData(iIndex,SKILLS_DATA_SKILL_HEGRENADE);
		}
		
		case pd_iBonusFlashbangs:
		{
			g_iData[iIndex][iStat] = AMOUNT_OF_FLASHBANGS + shop_GetUserStatData(iIndex,SHOP_KNIFE_DATA_FLASHBANGS) + skill_GetUserStatData(iIndex,SKILLS_DATA_SKILL_FLASHBANG);
		}
		
		case pd_iBonusSmokeGrenades:
		{
			g_iData[iIndex][iStat] = AMOUNT_OF_SMOKEGREANDES + shop_GetUserStatData(iIndex,SHOP_KNIFE_DATA_SMOKEGRENADES) + skill_GetUserStatData(iIndex,SKILLS_DATA_SKILL_SMOKEGRENADE);
		}
	}
}
