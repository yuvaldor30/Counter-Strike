/* Plugin generated by AMXX-Studio */

#include "amxmodx.inc"
#include "hamsandwich.inc"
#include "fun.inc"
#include "fvault.inc"
#include "engine.inc"
#include "hitandrun.inc"

#define PLUGIN "Scout System"
#define VERSION "Never-Tested"
#define AUTHOR "MJ"

#define PREFIX "Shop System"

#pragma semicolon 1

enum _: eScoutData
{
	sd_szName[20],
	bool: sd_bWorldModel
}

new const g_aScouts[] [eScoutData] =
{
	{"Default Scout"	,false}, // need to add v_scout0 as the default scout
	{"Scout #1"		,false},
	{"Scout #2"		,false}
	//{"Scout #1"		,false},
	//{"Scout #1"		,false}
};

new const g_szFileVault[] = "ScoutData";

new const g_szModelLocation[] = "models/UniqueGaming/HitAndRun/Scouts";

new const g_szViewModelFormat[] = 	"v_scout";
new const g_szWorldModelFormat[] = 	"p_scout";

new const g_szModelEnd[] = "mdl";

new g_iUsed[MAX_PLAYERS + 1];

new g_iScoutEachLevel;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	//RegisterHam(Ham_Spawn,"player","fwd_Spawn",1);
	RegisterHam(Ham_Item_Deploy,"weapon_scout","fwd_DeployScout",1);
	
	register_clcmd("say /scout","menu_Scouts");
	register_clcmd("say /scouts","menu_Scouts");
}

public plugin_precache()
{
	g_iScoutEachLevel = exp_GetMaxLevel() / sizeof g_aScouts;
	
	new szAdress[128];
	
	new i;
	
	for(i = 0; i < sizeof g_aScouts; i++)
	{
		formatex(szAdress,charsmax(szAdress),"%s/%s%d.%s",g_szModelLocation,g_szViewModelFormat,i,g_szModelEnd);
		precache_model(szAdress);
		
		if(g_aScouts[i][sd_bWorldModel])
		{
			formatex(szAdress,charsmax(szAdress),"%s/%s%d.%s",g_szModelLocation,g_szWorldModelFormat,i,g_szModelEnd);
			precache_model(szAdress);
		}
	}
}

public client_authorized(iIndex)
{
	g_iUsed[iIndex] = 0;
	
	cmd_LoadData(iIndex);
}

public client_disconnected(iIndex)
{
	cmd_SaveData(iIndex);
}

public menu_Scouts(const iIndex)
{
	new szText[128],szTemp[60];
	
	formatex(szText,charsmax(szText),"\r[ \w%s \r] \wScouts List Menu^n\dChoose a scout you would like to use:",PREFIX);
	new iMenu = menu_create(szText,"handler_Scouts");
	
	new iCallback = menu_makecallback("callback_Scouts");
	
	new iLevel = exp_GetUserData(iIndex,EXPERIENCE_DATA_LEVEL);
	
	for(new i; i < sizeof g_aScouts; i++)
	{
		if(iLevel < i * g_iScoutEachLevel)
			formatex(szTemp,charsmax(szTemp),"\d- \rUnavailable until level %i",i * g_iScoutEachLevel);
			
		else if(g_iUsed[iIndex] == i)
			formatex(szTemp,charsmax(szTemp),"\d- \yUsing");
			
		else
			formatex(szTemp,charsmax(szTemp),"");
		
		formatex(szText,charsmax(szText),"\w%s %s",g_aScouts[i][sd_szName], szTemp);
		menu_additem(iMenu,szText,.callback = iCallback);
	}
	
	menu_setprop(iMenu,MPROP_EXITNAME,"Back to \yShop Main Menu");
	
	menu_display(iIndex,iMenu);
	
	return PLUGIN_HANDLED;
}

public callback_Scouts(const iIndex, const iMenu, const iItem)
{	
	if(g_iUsed[iIndex] == iItem)
		return ITEM_DISABLED;

	new iLevel = exp_GetUserData(iIndex,EXPERIENCE_DATA_LEVEL);
		
	if(iLevel < iItem * g_iScoutEachLevel)
		return ITEM_DISABLED;
		
		
	return ITEM_ENABLED;
}

public handler_Scouts(const iIndex, const iMenu, const iItem)
{
	menu_destroy(iMenu);
	
	if(iItem == MENU_EXIT)
	{
		client_cmd(iIndex,"say /shop");
		
		return PLUGIN_HANDLED;
	}
		
	if(g_iUsed[iIndex] == iItem)
		return client_print_color(iIndex,print_team_default,"^4[%s] ^1You are already using this model.",PREFIX);

	new iLevel = exp_GetUserData(iIndex,EXPERIENCE_DATA_LEVEL);
		
	if(iLevel < iItem * g_iScoutEachLevel)
		return client_print_color(iIndex,print_team_default,"^4[%s] ^1This model is unavailable for you until level ^4%d^1.",PREFIX,iItem * g_iScoutEachLevel);

	g_iUsed[iIndex] = iItem;
	
	cmd_SaveData(iIndex);
	
	if(get_user_weapon(iIndex) == CSW_SCOUT)
		cmd_SetUserModel(iIndex);
	
	client_print_color(iIndex,print_team_default,"^4[%s] ^1You have sueccessfully set your scout model to ^3%s^1.",PREFIX,g_aScouts[iItem][sd_szName]);
	
	return PLUGIN_HANDLED;
}

public fwd_DeployScout(iEntity)
{
	static iIndex;
	
	iIndex = get_pdata_cbase(iEntity, 41, 4);	
	
	if(!is_user_alive(iIndex))
		return HAM_IGNORED;
		
	static iLevel;
	
	iLevel = exp_GetUserData(iIndex,EXPERIENCE_DATA_LEVEL);
	
	if(iLevel < g_iUsed[iIndex] * g_iScoutEachLevel)
	{
		while(iLevel < g_iUsed[iIndex] * g_iScoutEachLevel)
			g_iUsed[iIndex] --;
			
		cmd_SaveData(iIndex);
		
		client_print_color(iIndex,print_team_default,"^4[%s] ^1Your scout has been set to ^3%s ^1due to your low level.",PREFIX , g_aScouts[g_iUsed[iIndex]][sd_szName]);
	}
	
	cmd_SetUserModel(iIndex);
	
	return HAM_SUPERCEDE;
}

stock cmd_SetUserModel(const iIndex)
{
	if(is_user_alive(iIndex))
	{
		static szModel[128];
		
		formatex(szModel,charsmax(szModel),"%s/%s%d.%s",g_szModelLocation,g_szViewModelFormat,g_iUsed[iIndex],g_szModelEnd);
		entity_set_string(iIndex,EV_SZ_viewmodel,szModel);
		
		if(g_aScouts[g_iUsed[iIndex]][sd_bWorldModel])
		{
			formatex(szModel,charsmax(szModel),"%s/%s%d.%s",g_szModelLocation,g_szWorldModelFormat,g_iUsed[iIndex],g_szModelEnd);
			entity_set_string(iIndex,EV_SZ_weaponmodel,szModel);
		}
	}
}

stock cmd_LoadData(const iIndex)
{
	static szString[5],szKey[25];
	get_user_authid(iIndex,szKey,charsmax(szKey));
	
	if(fvault_get_data(g_szFileVault,szKey,szString,charsmax(szString)))
		g_iUsed[iIndex] = str_to_num(szString);
}

stock cmd_SaveData(const iIndex)
{
	static szString[5],szKey[25];
	get_user_authid(iIndex,szKey,charsmax(szKey));
	
	num_to_str(g_iUsed[iIndex],szString,charsmax(szString));
	
	fvault_set_data(g_szFileVault,szKey,szString);
}
/*
public fwd_Spawn(const iIndex)
{
	if(is_user_alive(iIndex))
	{
		strip_user_weapons(iIndex);
		give_item(iIndex,"weapon_knife");
		give_item(iIndex,"weapon_hegrenade");
		give_item(iIndex,"weapon_flashbang");
		give_item(iIndex,"weapon_flashbang");
		give_item(iIndex,"weapon_smokegrenade");
		
		give_item(iIndex,"weapon_scout");
		//cs_set_user_bpammo(iIndex,CSW_SCOUT,10);
	}
}*/
